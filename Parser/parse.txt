Starting parse
Entering state 0
Reading a token: Next token is token VOID ()
Shifting token VOID ()
Entering state 17
Reducing stack by rule 99 (line 244):
   $1 = token VOID ()
-> $$ = nterm type_specifier ()
Stack now 0
Entering state 28
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 85 (line 214):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0
Entering state 26
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 24
Reducing stack by rule 131 (line 309):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 26
Entering state 33
Reading a token: Next token is token LOB ()
Shifting token LOB ()
Entering state 58
Reading a token: Next token is token FLOAT ()
Shifting token FLOAT ()
Entering state 13
Reducing stack by rule 104 (line 249):
   $1 = token FLOAT ()
-> $$ = nterm type_specifier ()
Stack now 0 26 33 58
Entering state 28
Reading a token: Next token is token MULT ()
Reducing stack by rule 85 (line 214):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 26 33 58
Entering state 140
Next token is token MULT ()
Shifting token MULT ()
Entering state 23
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 143 (line 334):
   $1 = token MULT ()
-> $$ = nterm pointer ()
Stack now 0 26 33 58 140
Entering state 34
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 24
Reducing stack by rule 131 (line 309):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 26 33 58 140 34
Entering state 59
Reading a token: Next token is token COMMA ()
Reducing stack by rule 129 (line 303):
   $1 = nterm pointer ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 26 33 58 140
Entering state 226
Reducing stack by rule 153 (line 361):
   $1 = nterm declaration_specifiers ()
   $2 = nterm declarator ()
-> $$ = nterm parameter_declaration ()
Stack now 0 26 33 58
Entering state 143
Reducing stack by rule 151 (line 355):
   $1 = nterm parameter_declaration ()
-> $$ = nterm parameter_list ()
Stack now 0 26 33 58
Entering state 142
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 228
Reading a token: Next token is token FLOAT ()
Shifting token FLOAT ()
Entering state 13
Reducing stack by rule 104 (line 249):
   $1 = token FLOAT ()
-> $$ = nterm type_specifier ()
Stack now 0 26 33 58 142 228
Entering state 28
Reading a token: Next token is token MULT ()
Reducing stack by rule 85 (line 214):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 26 33 58 142 228
Entering state 140
Next token is token MULT ()
Shifting token MULT ()
Entering state 23
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 143 (line 334):
   $1 = token MULT ()
-> $$ = nterm pointer ()
Stack now 0 26 33 58 142 228 140
Entering state 34
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 24
Reducing stack by rule 131 (line 309):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 26 33 58 142 228 140 34
Entering state 59
Reading a token: Next token is token ROB ()
Reducing stack by rule 129 (line 303):
   $1 = nterm pointer ()
   $2 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 26 33 58 142 228 140
Entering state 226
Reducing stack by rule 153 (line 361):
   $1 = nterm declaration_specifiers ()
   $2 = nterm declarator ()
-> $$ = nterm parameter_declaration ()
Stack now 0 26 33 58 142 228
Entering state 291
Reducing stack by rule 152 (line 356):
   $1 = nterm parameter_list ()
   $2 = token COMMA ()
   $3 = nterm parameter_declaration ()
-> $$ = nterm parameter_list ()
Stack now 0 26 33 58
Entering state 142
Next token is token ROB ()
Reducing stack by rule 149 (line 349):
   $1 = nterm parameter_list ()
-> $$ = nterm parameter_type_list ()
Stack now 0 26 33 58
Entering state 141
Next token is token ROB ()
Shifting token ROB ()
Entering state 227
Reducing stack by rule 136 (line 314):
   $1 = nterm direct_declarator ()
   $2 = token LOB ()
   $3 = nterm parameter_type_list ()
   $4 = token ROB ()
-> $$ = nterm direct_declarator ()
Stack now 0 26
Entering state 33
Reading a token: Next token is token LCB ()
Reducing stack by rule 130 (line 304):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 26
Entering state 47
Next token is token LCB ()
Shifting token LCB ()
Entering state 52
Reading a token: Next token is token FLOAT ()
Shifting token FLOAT ()
Entering state 13
Reducing stack by rule 104 (line 249):
   $1 = token FLOAT ()
-> $$ = nterm type_specifier ()
Stack now 0 26 47 52
Entering state 28
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 85 (line 214):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 26 47 52
Entering state 54
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 24
Reducing stack by rule 131 (line 309):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 26 47 52 54
Entering state 33
Reading a token: Next token is token EQUALITY ()
Reducing stack by rule 130 (line 304):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 26 47 52 54
Entering state 132
Next token is token EQUALITY ()
Shifting token EQUALITY ()
Entering state 71
Reading a token: Next token is token MULT ()
Shifting token MULT ()
Entering state 92
Reducing stack by rule 28 (line 86):
   $1 = token MULT ()
-> $$ = nterm unary_operator ()
Stack now 0 26 47 52 54 132 71
Entering state 107
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 26 47 52 54 132 71 107
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 26 47 52 54 132 71 107
Entering state 105
Reading a token: Next token is token SEMICOLON ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 26 47 52 54 132 71 107
Entering state 156
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 26 47 52 54 132 71 107
Entering state 198
Reducing stack by rule 24 (line 79):
   $1 = nterm unary_operator ()
   $2 = nterm cast_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 26 47 52 54 132 71
Entering state 106
Next token is token SEMICOLON ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 26 47 52 54 132 71
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 26 47 52 54 132 71
Entering state 109
Next token is token SEMICOLON ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 26 47 52 54 132 71
Entering state 110
Next token is token SEMICOLON ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 26 47 52 54 132 71
Entering state 111
Next token is token SEMICOLON ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 26 47 52 54 132 71
Entering state 112
Next token is token SEMICOLON ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 26 47 52 54 132 71
Entering state 113
Next token is token SEMICOLON ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 26 47 52 54 132 71
Entering state 114
Next token is token SEMICOLON ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 26 47 52 54 132 71
Entering state 115
Next token is token SEMICOLON ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 26 47 52 54 132 71
Entering state 116
Next token is token SEMICOLON ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 26 47 52 54 132 71
Entering state 117
Next token is token SEMICOLON ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 26 47 52 54 132 71
Entering state 118
Next token is token SEMICOLON ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 26 47 52 54 132 71
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 26 47 52 54 132 71
Entering state 152
Reducing stack by rule 158 (line 381):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 26 47 52 54 132 71
Entering state 153
Reducing stack by rule 94 (line 231):
   $1 = nterm declarator ()
   $2 = token EQUALITY ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Stack now 0 26 47 52 54
Entering state 46
Reducing stack by rule 91 (line 224):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 26 47 52 54
Entering state 45
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 69
Reducing stack by rule 82 (line 207):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token SEMICOLON ()
-> $$ = nterm declaration ()
Stack now 0 26 47 52
Entering state 122
Reducing stack by rule 183 (line 442):
   $1 = nterm declaration ()
-> $$ = nterm block_item ()
Stack now 0 26 47 52
Entering state 127
Reducing stack by rule 181 (line 436):
   $1 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 26 47 52
Entering state 126
Reading a token: Next token is token MULT ()
Shifting token MULT ()
Entering state 92
Reducing stack by rule 28 (line 86):
   $1 = token MULT ()
-> $$ = nterm unary_operator ()
Stack now 0 26 47 52 126
Entering state 107
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 26 47 52 126 107
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 26 47 52 126 107
Entering state 105
Reading a token: Next token is token EQUALITY ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 26 47 52 126 107
Entering state 156
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 26 47 52 126 107
Entering state 198
Reducing stack by rule 24 (line 79):
   $1 = nterm unary_operator ()
   $2 = nterm cast_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 26 47 52 126
Entering state 106
Next token is token EQUALITY ()
Shifting token EQUALITY ()
Entering state 196
Reducing stack by rule 67 (line 180):
   $1 = token EQUALITY ()
-> $$ = nterm assignment_operator ()
Stack now 0 26 47 52 126 106
Entering state 197
Reading a token: Next token is token MULT ()
Shifting token MULT ()
Entering state 92
Reducing stack by rule 28 (line 86):
   $1 = token MULT ()
-> $$ = nterm unary_operator ()
Stack now 0 26 47 52 126 106 197
Entering state 107
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 26 47 52 126 106 197 107
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 26 47 52 126 106 197 107
Entering state 105
Reading a token: Next token is token SEMICOLON ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 26 47 52 126 106 197 107
Entering state 156
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 26 47 52 126 106 197 107
Entering state 198
Reducing stack by rule 24 (line 79):
   $1 = nterm unary_operator ()
   $2 = nterm cast_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 26 47 52 126 106 197
Entering state 106
Next token is token SEMICOLON ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 26 47 52 126 106 197
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 26 47 52 126 106 197
Entering state 109
Next token is token SEMICOLON ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 26 47 52 126 106 197
Entering state 110
Next token is token SEMICOLON ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 26 47 52 126 106 197
Entering state 111
Next token is token SEMICOLON ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 26 47 52 126 106 197
Entering state 112
Next token is token SEMICOLON ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 26 47 52 126 106 197
Entering state 113
Next token is token SEMICOLON ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 26 47 52 126 106 197
Entering state 114
Next token is token SEMICOLON ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 26 47 52 126 106 197
Entering state 115
Next token is token SEMICOLON ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 26 47 52 126 106 197
Entering state 116
Next token is token SEMICOLON ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 26 47 52 126 106 197
Entering state 117
Next token is token SEMICOLON ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 26 47 52 126 106 197
Entering state 118
Next token is token SEMICOLON ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 26 47 52 126 106 197
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 26 47 52 126 106 197
Entering state 266
Reducing stack by rule 66 (line 175):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 26 47 52 126
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 26 47 52 126
Entering state 121
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 218
Reducing stack by rule 186 (line 450):
   $1 = nterm expression ()
   $2 = token SEMICOLON ()
-> $$ = nterm expression_statement ()
Stack now 0 26 47 52 126
Entering state 128
Reducing stack by rule 172 (line 415):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 26 47 52 126
Entering state 123
Reducing stack by rule 184 (line 443):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 26 47 52 126
Entering state 221
Reducing stack by rule 182 (line 437):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 26 47 52
Entering state 126
Reading a token: Next token is token MULT ()
Shifting token MULT ()
Entering state 92
Reducing stack by rule 28 (line 86):
   $1 = token MULT ()
-> $$ = nterm unary_operator ()
Stack now 0 26 47 52 126
Entering state 107
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 26 47 52 126 107
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 26 47 52 126 107
Entering state 105
Reading a token: Next token is token EQUALITY ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 26 47 52 126 107
Entering state 156
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 26 47 52 126 107
Entering state 198
Reducing stack by rule 24 (line 79):
   $1 = nterm unary_operator ()
   $2 = nterm cast_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 26 47 52 126
Entering state 106
Next token is token EQUALITY ()
Shifting token EQUALITY ()
Entering state 196
Reducing stack by rule 67 (line 180):
   $1 = token EQUALITY ()
-> $$ = nterm assignment_operator ()
Stack now 0 26 47 52 126 106
Entering state 197
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 26 47 52 126 106 197
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 26 47 52 126 106 197
Entering state 105
Reading a token: Next token is token SEMICOLON ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 26 47 52 126 106 197
Entering state 106
Next token is token SEMICOLON ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 26 47 52 126 106 197
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 26 47 52 126 106 197
Entering state 109
Next token is token SEMICOLON ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 26 47 52 126 106 197
Entering state 110
Next token is token SEMICOLON ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 26 47 52 126 106 197
Entering state 111
Next token is token SEMICOLON ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 26 47 52 126 106 197
Entering state 112
Next token is token SEMICOLON ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 26 47 52 126 106 197
Entering state 113
Next token is token SEMICOLON ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 26 47 52 126 106 197
Entering state 114
Next token is token SEMICOLON ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 26 47 52 126 106 197
Entering state 115
Next token is token SEMICOLON ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 26 47 52 126 106 197
Entering state 116
Next token is token SEMICOLON ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 26 47 52 126 106 197
Entering state 117
Next token is token SEMICOLON ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 26 47 52 126 106 197
Entering state 118
Next token is token SEMICOLON ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 26 47 52 126 106 197
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 26 47 52 126 106 197
Entering state 266
Reducing stack by rule 66 (line 175):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 26 47 52 126
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 26 47 52 126
Entering state 121
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 218
Reducing stack by rule 186 (line 450):
   $1 = nterm expression ()
   $2 = token SEMICOLON ()
-> $$ = nterm expression_statement ()
Stack now 0 26 47 52 126
Entering state 128
Reducing stack by rule 172 (line 415):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 26 47 52 126
Entering state 123
Reducing stack by rule 184 (line 443):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 26 47 52 126
Entering state 221
Reducing stack by rule 182 (line 437):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 26 47 52
Entering state 126
Reading a token: Next token is token RCB ()
Shifting token RCB ()
Entering state 220
Reducing stack by rule 180 (line 431):
   $1 = token LCB ()
   $2 = nterm block_item_list ()
   $3 = token RCB ()
-> $$ = nterm compound_statement ()
Stack now 0 26 47
Entering state 72
Reducing stack by rule 206 (line 496):
   $1 = nterm declaration_specifiers ()
   $2 = nterm declarator ()
   $3 = nterm compound_statement ()
-> $$ = nterm function_definition ()
Stack now 0
Entering state 37
Reducing stack by rule 203 (line 489):
   $1 = nterm function_definition ()
-> $$ = nterm external_declaration ()
Stack now 0
Entering state 36
Reducing stack by rule 201 (line 483):
   $1 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 35
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 9
Reducing stack by rule 102 (line 247):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 35
Entering state 28
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 85 (line 214):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 35
Entering state 26
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 24
Reducing stack by rule 131 (line 309):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 35 26
Entering state 33
Reading a token: Next token is token LOB ()
Shifting token LOB ()
Entering state 58
Reading a token: Next token is token CHAR ()
Shifting token CHAR ()
Entering state 7
Reducing stack by rule 100 (line 245):
   $1 = token CHAR ()
-> $$ = nterm type_specifier ()
Stack now 0 35 26 33 58
Entering state 28
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 85 (line 214):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 35 26 33 58
Entering state 140
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 24
Reducing stack by rule 131 (line 309):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 35 26 33 58 140
Entering state 33
Reading a token: Next token is token LSB ()
Shifting token LSB ()
Entering state 57
Reading a token: Next token is token RSB ()
Reducing stack by rule 140 (line 324):
-> $$ = nterm type_qualifier_list_opt ()
Stack now 0 35 26 33 58 140 33 57
Entering state 136
Next token is token RSB ()
Reducing stack by rule 142 (line 330):
-> $$ = nterm assignment_expression_opt ()
Stack now 0 35 26 33 58 140 33 57 136
Entering state 225
Next token is token RSB ()
Shifting token RSB ()
Entering state 289
Reducing stack by rule 133 (line 311):
   $1 = nterm direct_declarator ()
   $2 = token LSB ()
   $3 = nterm type_qualifier_list_opt ()
   $4 = nterm assignment_expression_opt ()
   $5 = token RSB ()
-> $$ = nterm direct_declarator ()
Stack now 0 35 26 33 58 140
Entering state 33
Reading a token: Next token is token LSB ()
Shifting token LSB ()
Entering state 57
Reading a token: Next token is token INT_CONSTANT ()
Reducing stack by rule 140 (line 324):
-> $$ = nterm type_qualifier_list_opt ()
Stack now 0 35 26 33 58 140 33 57
Entering state 136
Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 99
Reducing stack by rule 5 (line 49):
   $1 = token INT_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 33 58 140 33 57 136
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 33 58 140 33 57 136
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 33 58 140 33 57 136
Entering state 105
Reading a token: Next token is token RSB ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 33 58 140 33 57 136
Entering state 106
Next token is token RSB ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 33 58 140 33 57 136
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 33 58 140 33 57 136
Entering state 109
Next token is token RSB ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 33 58 140 33 57 136
Entering state 110
Next token is token RSB ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 33 58 140 33 57 136
Entering state 111
Next token is token RSB ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 33 58 140 33 57 136
Entering state 112
Next token is token RSB ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 33 58 140 33 57 136
Entering state 113
Next token is token RSB ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 33 58 140 33 57 136
Entering state 114
Next token is token RSB ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 33 58 140 33 57 136
Entering state 115
Next token is token RSB ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 33 58 140 33 57 136
Entering state 116
Next token is token RSB ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 33 58 140 33 57 136
Entering state 117
Next token is token RSB ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 33 58 140 33 57 136
Entering state 118
Next token is token RSB ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 33 58 140 33 57 136
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 33 58 140 33 57 136
Entering state 224
Reducing stack by rule 141 (line 328):
   $1 = nterm assignment_expression ()
-> $$ = nterm assignment_expression_opt ()
Stack now 0 35 26 33 58 140 33 57 136
Entering state 225
Next token is token RSB ()
Shifting token RSB ()
Entering state 289
Reducing stack by rule 133 (line 311):
   $1 = nterm direct_declarator ()
   $2 = token LSB ()
   $3 = nterm type_qualifier_list_opt ()
   $4 = nterm assignment_expression_opt ()
   $5 = token RSB ()
-> $$ = nterm direct_declarator ()
Stack now 0 35 26 33 58 140
Entering state 33
Reading a token: Next token is token COMMA ()
Reducing stack by rule 130 (line 304):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 35 26 33 58 140
Entering state 226
Reducing stack by rule 153 (line 361):
   $1 = nterm declaration_specifiers ()
   $2 = nterm declarator ()
-> $$ = nterm parameter_declaration ()
Stack now 0 35 26 33 58
Entering state 143
Reducing stack by rule 151 (line 355):
   $1 = nterm parameter_declaration ()
-> $$ = nterm parameter_list ()
Stack now 0 35 26 33 58
Entering state 142
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 228
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 9
Reducing stack by rule 102 (line 247):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 35 26 33 58 142 228
Entering state 28
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 85 (line 214):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 35 26 33 58 142 228
Entering state 140
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 24
Reducing stack by rule 131 (line 309):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 35 26 33 58 142 228 140
Entering state 33
Reading a token: Next token is token ROB ()
Reducing stack by rule 130 (line 304):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 35 26 33 58 142 228 140
Entering state 226
Reducing stack by rule 153 (line 361):
   $1 = nterm declaration_specifiers ()
   $2 = nterm declarator ()
-> $$ = nterm parameter_declaration ()
Stack now 0 35 26 33 58 142 228
Entering state 291
Reducing stack by rule 152 (line 356):
   $1 = nterm parameter_list ()
   $2 = token COMMA ()
   $3 = nterm parameter_declaration ()
-> $$ = nterm parameter_list ()
Stack now 0 35 26 33 58
Entering state 142
Next token is token ROB ()
Reducing stack by rule 149 (line 349):
   $1 = nterm parameter_list ()
-> $$ = nterm parameter_type_list ()
Stack now 0 35 26 33 58
Entering state 141
Next token is token ROB ()
Shifting token ROB ()
Entering state 227
Reducing stack by rule 136 (line 314):
   $1 = nterm direct_declarator ()
   $2 = token LOB ()
   $3 = nterm parameter_type_list ()
   $4 = token ROB ()
-> $$ = nterm direct_declarator ()
Stack now 0 35 26
Entering state 33
Reading a token: Next token is token LCB ()
Reducing stack by rule 130 (line 304):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 35 26
Entering state 47
Next token is token LCB ()
Shifting token LCB ()
Entering state 52
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 9
Reducing stack by rule 102 (line 247):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 35 26 47 52
Entering state 28
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 85 (line 214):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 35 26 47 52
Entering state 54
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 24
Reducing stack by rule 131 (line 309):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 35 26 47 52 54
Entering state 33
Reading a token: Next token is token SEMICOLON ()
Reducing stack by rule 130 (line 304):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 35 26 47 52 54
Entering state 132
Next token is token SEMICOLON ()
Reducing stack by rule 93 (line 230):
   $1 = nterm declarator ()
-> $$ = nterm init_declarator ()
Stack now 0 35 26 47 52 54
Entering state 46
Reducing stack by rule 91 (line 224):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 35 26 47 52 54
Entering state 45
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 69
Reducing stack by rule 82 (line 207):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token SEMICOLON ()
-> $$ = nterm declaration ()
Stack now 0 35 26 47 52
Entering state 122
Reducing stack by rule 183 (line 442):
   $1 = nterm declaration ()
-> $$ = nterm block_item ()
Stack now 0 35 26 47 52
Entering state 127
Reducing stack by rule 181 (line 436):
   $1 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 35 26 47 52
Entering state 126
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 97
Reading a token: Next token is token INC_OP ()
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126
Entering state 105
Next token is token INC_OP ()
Shifting token INC_OP ()
Entering state 180
Reducing stack by rule 15 (line 62):
   $1 = nterm postfix_expression ()
   $2 = token INC_OP ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126
Entering state 105
Reading a token: Next token is token SEMICOLON ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126
Entering state 106
Next token is token SEMICOLON ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126
Entering state 109
Next token is token SEMICOLON ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126
Entering state 110
Next token is token SEMICOLON ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126
Entering state 111
Next token is token SEMICOLON ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126
Entering state 112
Next token is token SEMICOLON ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126
Entering state 113
Next token is token SEMICOLON ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126
Entering state 114
Next token is token SEMICOLON ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126
Entering state 115
Next token is token SEMICOLON ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126
Entering state 116
Next token is token SEMICOLON ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126
Entering state 117
Next token is token SEMICOLON ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126
Entering state 118
Next token is token SEMICOLON ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126
Entering state 121
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 218
Reducing stack by rule 186 (line 450):
   $1 = nterm expression ()
   $2 = token SEMICOLON ()
-> $$ = nterm expression_statement ()
Stack now 0 35 26 47 52 126
Entering state 128
Reducing stack by rule 172 (line 415):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 35 26 47 52 126
Entering state 123
Reducing stack by rule 184 (line 443):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 35 26 47 52 126
Entering state 221
Reducing stack by rule 182 (line 437):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 35 26 47 52
Entering state 126
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 97
Reading a token: Next token is token DEC_OP ()
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126
Entering state 105
Next token is token DEC_OP ()
Shifting token DEC_OP ()
Entering state 181
Reducing stack by rule 16 (line 63):
   $1 = nterm postfix_expression ()
   $2 = token DEC_OP ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126
Entering state 105
Reading a token: Next token is token SEMICOLON ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126
Entering state 106
Next token is token SEMICOLON ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126
Entering state 109
Next token is token SEMICOLON ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126
Entering state 110
Next token is token SEMICOLON ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126
Entering state 111
Next token is token SEMICOLON ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126
Entering state 112
Next token is token SEMICOLON ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126
Entering state 113
Next token is token SEMICOLON ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126
Entering state 114
Next token is token SEMICOLON ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126
Entering state 115
Next token is token SEMICOLON ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126
Entering state 116
Next token is token SEMICOLON ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126
Entering state 117
Next token is token SEMICOLON ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126
Entering state 118
Next token is token SEMICOLON ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126
Entering state 121
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 218
Reducing stack by rule 186 (line 450):
   $1 = nterm expression ()
   $2 = token SEMICOLON ()
-> $$ = nterm expression_statement ()
Stack now 0 35 26 47 52 126
Entering state 128
Reducing stack by rule 172 (line 415):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 35 26 47 52 126
Entering state 123
Reducing stack by rule 184 (line 443):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 35 26 47 52 126
Entering state 221
Reducing stack by rule 182 (line 437):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 35 26 47 52
Entering state 126
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 97
Reading a token: Next token is token EQUALITY ()
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126
Entering state 105
Next token is token EQUALITY ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126
Entering state 106
Next token is token EQUALITY ()
Shifting token EQUALITY ()
Entering state 196
Reducing stack by rule 67 (line 180):
   $1 = token EQUALITY ()
-> $$ = nterm assignment_operator ()
Stack now 0 35 26 47 52 126 106
Entering state 197
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 105
Reading a token: Next token is token MULT ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 106
Next token is token MULT ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 109
Next token is token MULT ()
Shifting token MULT ()
Entering state 201
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 106 197 109 201
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 106 197 109 201
Entering state 105
Reading a token: Next token is token SEMICOLON ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 106 197 109 201
Entering state 156
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 106 197 109 201
Entering state 269
Reducing stack by rule 36 (line 101):
   $1 = nterm multiplicative_expression ()
   $2 = token MULT ()
   $3 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 109
Next token is token SEMICOLON ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 110
Next token is token SEMICOLON ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 111
Next token is token SEMICOLON ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 112
Next token is token SEMICOLON ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 113
Next token is token SEMICOLON ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 114
Next token is token SEMICOLON ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 115
Next token is token SEMICOLON ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 116
Next token is token SEMICOLON ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 117
Next token is token SEMICOLON ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 118
Next token is token SEMICOLON ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 266
Reducing stack by rule 66 (line 175):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126
Entering state 121
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 218
Reducing stack by rule 186 (line 450):
   $1 = nterm expression ()
   $2 = token SEMICOLON ()
-> $$ = nterm expression_statement ()
Stack now 0 35 26 47 52 126
Entering state 128
Reducing stack by rule 172 (line 415):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 35 26 47 52 126
Entering state 123
Reducing stack by rule 184 (line 443):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 35 26 47 52 126
Entering state 221
Reducing stack by rule 182 (line 437):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 35 26 47 52
Entering state 126
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 97
Reading a token: Next token is token EQUALITY ()
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126
Entering state 105
Next token is token EQUALITY ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126
Entering state 106
Next token is token EQUALITY ()
Shifting token EQUALITY ()
Entering state 196
Reducing stack by rule 67 (line 180):
   $1 = token EQUALITY ()
-> $$ = nterm assignment_operator ()
Stack now 0 35 26 47 52 126 106
Entering state 197
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 105
Reading a token: Next token is token MINUS ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 106
Next token is token MINUS ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 109
Next token is token MINUS ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 110
Next token is token MINUS ()
Shifting token MINUS ()
Entering state 203
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 99
Reducing stack by rule 5 (line 49):
   $1 = token INT_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 106 197 110 203
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 106 197 110 203
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 106 197 110 203
Entering state 105
Reading a token: Next token is token SEMICOLON ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 106 197 110 203
Entering state 156
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 106 197 110 203
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 106 197 110 203
Entering state 271
Next token is token SEMICOLON ()
Reducing stack by rule 41 (line 110):
   $1 = nterm additive_expression ()
   $2 = token MINUS ()
   $3 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 110
Next token is token SEMICOLON ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 111
Next token is token SEMICOLON ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 112
Next token is token SEMICOLON ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 113
Next token is token SEMICOLON ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 114
Next token is token SEMICOLON ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 115
Next token is token SEMICOLON ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 116
Next token is token SEMICOLON ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 117
Next token is token SEMICOLON ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 118
Next token is token SEMICOLON ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 266
Reducing stack by rule 66 (line 175):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126
Entering state 121
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 218
Reducing stack by rule 186 (line 450):
   $1 = nterm expression ()
   $2 = token SEMICOLON ()
-> $$ = nterm expression_statement ()
Stack now 0 35 26 47 52 126
Entering state 128
Reducing stack by rule 172 (line 415):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 35 26 47 52 126
Entering state 123
Reducing stack by rule 184 (line 443):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 35 26 47 52 126
Entering state 221
Reducing stack by rule 182 (line 437):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 35 26 47 52
Entering state 126
Reading a token: Next token is token IF ()
Shifting token IF ()
Entering state 79
Reading a token: Next token is token LOB ()
Shifting token LOB ()
Entering state 162
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 105
Reading a token: Next token is token AND_OP ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 106
Next token is token AND_OP ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 109
Next token is token AND_OP ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 110
Next token is token AND_OP ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 111
Next token is token AND_OP ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 112
Next token is token AND_OP ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 113
Next token is token AND_OP ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 114
Next token is token AND_OP ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 115
Next token is token AND_OP ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 116
Next token is token AND_OP ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 117
Next token is token AND_OP ()
Shifting token AND_OP ()
Entering state 215
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 99
Reducing stack by rule 5 (line 49):
   $1 = token INT_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 79 162 117 215
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 79 162 117 215
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 79 162 117 215
Entering state 105
Reading a token: Next token is token OR_OP ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 79 162 117 215
Entering state 156
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 79 162 117 215
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 79 162 117 215
Entering state 109
Next token is token OR_OP ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 79 162 117 215
Entering state 110
Next token is token OR_OP ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 79 162 117 215
Entering state 111
Next token is token OR_OP ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 79 162 117 215
Entering state 112
Next token is token OR_OP ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 79 162 117 215
Entering state 113
Next token is token OR_OP ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 79 162 117 215
Entering state 114
Next token is token OR_OP ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 79 162 117 215
Entering state 115
Next token is token OR_OP ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 79 162 117 215
Entering state 283
Next token is token OR_OP ()
Reducing stack by rule 60 (line 157):
   $1 = nterm logical_and_expression ()
   $2 = token AND_OP ()
   $3 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 117
Next token is token OR_OP ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 118
Next token is token OR_OP ()
Shifting token OR_OP ()
Entering state 216
Reading a token: Next token is token EXCLM ()
Shifting token EXCLM ()
Entering state 96
Reducing stack by rule 32 (line 90):
   $1 = token EXCLM ()
-> $$ = nterm unary_operator ()
Stack now 0 35 26 47 52 126 79 162 118 216
Entering state 107
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 79 162 118 216 107
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 79 162 118 216 107
Entering state 105
Reading a token: Next token is token ROB ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 79 162 118 216 107
Entering state 156
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 79 162 118 216 107
Entering state 198
Reducing stack by rule 24 (line 79):
   $1 = nterm unary_operator ()
   $2 = nterm cast_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 79 162 118 216
Entering state 156
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 79 162 118 216
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 79 162 118 216
Entering state 109
Next token is token ROB ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 79 162 118 216
Entering state 110
Next token is token ROB ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 79 162 118 216
Entering state 111
Next token is token ROB ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 79 162 118 216
Entering state 112
Next token is token ROB ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 79 162 118 216
Entering state 113
Next token is token ROB ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 79 162 118 216
Entering state 114
Next token is token ROB ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 79 162 118 216
Entering state 115
Next token is token ROB ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 79 162 118 216
Entering state 116
Next token is token ROB ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 79 162 118 216
Entering state 284
Next token is token ROB ()
Reducing stack by rule 62 (line 163):
   $1 = nterm logical_or_expression ()
   $2 = token OR_OP ()
   $3 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 118
Next token is token ROB ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 246
Next token is token ROB ()
Shifting token ROB ()
Entering state 303
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 97
Reading a token: Next token is token EQUALITY ()
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303
Entering state 105
Next token is token EQUALITY ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303
Entering state 106
Next token is token EQUALITY ()
Shifting token EQUALITY ()
Entering state 196
Reducing stack by rule 67 (line 180):
   $1 = token EQUALITY ()
-> $$ = nterm assignment_operator ()
Stack now 0 35 26 47 52 126 79 162 246 303 106
Entering state 197
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 106 197
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 106 197
Entering state 105
Reading a token: Next token is token PLUS ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 106 197
Entering state 106
Next token is token PLUS ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 106 197
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 106 197
Entering state 109
Next token is token PLUS ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 106 197
Entering state 110
Next token is token PLUS ()
Shifting token PLUS ()
Entering state 202
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 99
Reducing stack by rule 5 (line 49):
   $1 = token INT_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 79 162 246 303 106 197 110 202
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 106 197 110 202
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 106 197 110 202
Entering state 105
Reading a token: Next token is token SEMICOLON ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 106 197 110 202
Entering state 156
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 106 197 110 202
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 106 197 110 202
Entering state 270
Next token is token SEMICOLON ()
Reducing stack by rule 40 (line 109):
   $1 = nterm additive_expression ()
   $2 = token PLUS ()
   $3 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 106 197
Entering state 110
Next token is token SEMICOLON ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 106 197
Entering state 111
Next token is token SEMICOLON ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 106 197
Entering state 112
Next token is token SEMICOLON ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 106 197
Entering state 113
Next token is token SEMICOLON ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 106 197
Entering state 114
Next token is token SEMICOLON ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 106 197
Entering state 115
Next token is token SEMICOLON ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 106 197
Entering state 116
Next token is token SEMICOLON ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 106 197
Entering state 117
Next token is token SEMICOLON ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 106 197
Entering state 118
Next token is token SEMICOLON ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 106 197
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 106 197
Entering state 266
Reducing stack by rule 66 (line 175):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126 79 162 246 303
Entering state 121
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 218
Reducing stack by rule 186 (line 450):
   $1 = nterm expression ()
   $2 = token SEMICOLON ()
-> $$ = nterm expression_statement ()
Stack now 0 35 26 47 52 126 79 162 246 303
Entering state 128
Reducing stack by rule 172 (line 415):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 35 26 47 52 126 79 162 246 303
Entering state 322
Reading a token: Next token is token IF ()
Reducing stack by rule 187 (line 455):
   $1 = token IF ()
   $2 = token LOB ()
   $3 = nterm expression ()
   $4 = token ROB ()
   $5 = nterm statement ()
-> $$ = nterm selection_statement ()
Stack now 0 35 26 47 52 126
Entering state 129
Reducing stack by rule 173 (line 416):
   $1 = nterm selection_statement ()
-> $$ = nterm statement ()
Stack now 0 35 26 47 52 126
Entering state 123
Reducing stack by rule 184 (line 443):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 35 26 47 52 126
Entering state 221
Reducing stack by rule 182 (line 437):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 35 26 47 52
Entering state 126
Next token is token IF ()
Shifting token IF ()
Entering state 79
Reading a token: Next token is token LOB ()
Shifting token LOB ()
Entering state 162
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 105
Reading a token: Next token is token EQ_OP ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 106
Next token is token EQ_OP ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 109
Next token is token EQ_OP ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 110
Next token is token EQ_OP ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 111
Next token is token EQ_OP ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 112
Next token is token EQ_OP ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 113
Next token is token EQ_OP ()
Shifting token EQ_OP ()
Entering state 210
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 99
Reducing stack by rule 5 (line 49):
   $1 = token INT_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 79 162 113 210
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 79 162 113 210
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 79 162 113 210
Entering state 105
Reading a token: Next token is token ROB ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 79 162 113 210
Entering state 156
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 79 162 113 210
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 79 162 113 210
Entering state 109
Next token is token ROB ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 79 162 113 210
Entering state 110
Next token is token ROB ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 79 162 113 210
Entering state 111
Next token is token ROB ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 79 162 113 210
Entering state 278
Next token is token ROB ()
Reducing stack by rule 51 (line 132):
   $1 = nterm equality_expression ()
   $2 = token EQ_OP ()
   $3 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 113
Next token is token ROB ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 114
Next token is token ROB ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 115
Next token is token ROB ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 116
Next token is token ROB ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 117
Next token is token ROB ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 118
Next token is token ROB ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 246
Next token is token ROB ()
Shifting token ROB ()
Entering state 303
Reading a token: Next token is token LCB ()
Shifting token LCB ()
Entering state 52
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 97
Reading a token: Next token is token EQUALITY ()
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 52
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 52
Entering state 105
Next token is token EQUALITY ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 52
Entering state 106
Next token is token EQUALITY ()
Shifting token EQUALITY ()
Entering state 196
Reducing stack by rule 67 (line 180):
   $1 = token EQUALITY ()
-> $$ = nterm assignment_operator ()
Stack now 0 35 26 47 52 126 79 162 246 303 52 106
Entering state 197
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 52 106 197
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 52 106 197
Entering state 105
Reading a token: Next token is token MULT ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 52 106 197
Entering state 106
Next token is token MULT ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 52 106 197
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 52 106 197
Entering state 109
Next token is token MULT ()
Shifting token MULT ()
Entering state 201
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 52 106 197 109 201
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 52 106 197 109 201
Entering state 105
Reading a token: Next token is token SEMICOLON ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 52 106 197 109 201
Entering state 156
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 52 106 197 109 201
Entering state 269
Reducing stack by rule 36 (line 101):
   $1 = nterm multiplicative_expression ()
   $2 = token MULT ()
   $3 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 52 106 197
Entering state 109
Next token is token SEMICOLON ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 52 106 197
Entering state 110
Next token is token SEMICOLON ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 52 106 197
Entering state 111
Next token is token SEMICOLON ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 52 106 197
Entering state 112
Next token is token SEMICOLON ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 52 106 197
Entering state 113
Next token is token SEMICOLON ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 52 106 197
Entering state 114
Next token is token SEMICOLON ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 52 106 197
Entering state 115
Next token is token SEMICOLON ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 52 106 197
Entering state 116
Next token is token SEMICOLON ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 52 106 197
Entering state 117
Next token is token SEMICOLON ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 52 106 197
Entering state 118
Next token is token SEMICOLON ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 52 106 197
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 52 106 197
Entering state 266
Reducing stack by rule 66 (line 175):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 52
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 52
Entering state 121
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 218
Reducing stack by rule 186 (line 450):
   $1 = nterm expression ()
   $2 = token SEMICOLON ()
-> $$ = nterm expression_statement ()
Stack now 0 35 26 47 52 126 79 162 246 303 52
Entering state 128
Reducing stack by rule 172 (line 415):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 35 26 47 52 126 79 162 246 303 52
Entering state 123
Reducing stack by rule 184 (line 443):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 35 26 47 52 126 79 162 246 303 52
Entering state 127
Reducing stack by rule 181 (line 436):
   $1 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 35 26 47 52 126 79 162 246 303 52
Entering state 126
Reading a token: Next token is token RCB ()
Shifting token RCB ()
Entering state 220
Reducing stack by rule 180 (line 431):
   $1 = token LCB ()
   $2 = nterm block_item_list ()
   $3 = token RCB ()
-> $$ = nterm compound_statement ()
Stack now 0 35 26 47 52 126 79 162 246 303
Entering state 125
Reducing stack by rule 171 (line 414):
   $1 = nterm compound_statement ()
-> $$ = nterm statement ()
Stack now 0 35 26 47 52 126 79 162 246 303
Entering state 322
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 187 (line 455):
   $1 = token IF ()
   $2 = token LOB ()
   $3 = nterm expression ()
   $4 = token ROB ()
   $5 = nterm statement ()
-> $$ = nterm selection_statement ()
Stack now 0 35 26 47 52 126
Entering state 129
Reducing stack by rule 173 (line 416):
   $1 = nterm selection_statement ()
-> $$ = nterm statement ()
Stack now 0 35 26 47 52 126
Entering state 123
Reducing stack by rule 184 (line 443):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 35 26 47 52 126
Entering state 221
Reducing stack by rule 182 (line 437):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 35 26 47 52
Entering state 126
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 97
Reading a token: Next token is token EQUALITY ()
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126
Entering state 105
Next token is token EQUALITY ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126
Entering state 106
Next token is token EQUALITY ()
Shifting token EQUALITY ()
Entering state 196
Reducing stack by rule 67 (line 180):
   $1 = token EQUALITY ()
-> $$ = nterm assignment_operator ()
Stack now 0 35 26 47 52 126 106
Entering state 197
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 105
Reading a token: Next token is token MODULO ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 106
Next token is token MODULO ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 109
Next token is token MODULO ()
Shifting token MODULO ()
Entering state 199
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 99
Reducing stack by rule 5 (line 49):
   $1 = token INT_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 106 197 109 199
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 106 197 109 199
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 106 197 109 199
Entering state 105
Reading a token: Next token is token SEMICOLON ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 106 197 109 199
Entering state 156
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 106 197 109 199
Entering state 267
Reducing stack by rule 38 (line 103):
   $1 = nterm multiplicative_expression ()
   $2 = token MODULO ()
   $3 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 109
Next token is token SEMICOLON ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 110
Next token is token SEMICOLON ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 111
Next token is token SEMICOLON ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 112
Next token is token SEMICOLON ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 113
Next token is token SEMICOLON ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 114
Next token is token SEMICOLON ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 115
Next token is token SEMICOLON ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 116
Next token is token SEMICOLON ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 117
Next token is token SEMICOLON ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 118
Next token is token SEMICOLON ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 266
Reducing stack by rule 66 (line 175):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126
Entering state 121
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 218
Reducing stack by rule 186 (line 450):
   $1 = nterm expression ()
   $2 = token SEMICOLON ()
-> $$ = nterm expression_statement ()
Stack now 0 35 26 47 52 126
Entering state 128
Reducing stack by rule 172 (line 415):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 35 26 47 52 126
Entering state 123
Reducing stack by rule 184 (line 443):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 35 26 47 52 126
Entering state 221
Reducing stack by rule 182 (line 437):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 35 26 47 52
Entering state 126
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 97
Reading a token: Next token is token EQUALITY ()
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126
Entering state 105
Next token is token EQUALITY ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126
Entering state 106
Next token is token EQUALITY ()
Shifting token EQUALITY ()
Entering state 196
Reducing stack by rule 67 (line 180):
   $1 = token EQUALITY ()
-> $$ = nterm assignment_operator ()
Stack now 0 35 26 47 52 126 106
Entering state 197
Reading a token: Next token is token LOB ()
Shifting token LOB ()
Entering state 89
Reading a token: Next token is token LOB ()
Shifting token LOB ()
Entering state 89
Reading a token: Next token is token LOB ()
Shifting token LOB ()
Entering state 89
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 106 197 89 89 89
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 106 197 89 89 89
Entering state 105
Reading a token: Next token is token RIGHT_OP ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 106 197 89 89 89
Entering state 106
Next token is token RIGHT_OP ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 106 197 89 89 89
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 106 197 89 89 89
Entering state 109
Next token is token RIGHT_OP ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 106 197 89 89 89
Entering state 110
Next token is token RIGHT_OP ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 106 197 89 89 89
Entering state 111
Next token is token RIGHT_OP ()
Shifting token RIGHT_OP ()
Entering state 204
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 99
Reducing stack by rule 5 (line 49):
   $1 = token INT_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 106 197 89 89 89 111 204
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 106 197 89 89 89 111 204
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 106 197 89 89 89 111 204
Entering state 105
Reading a token: Next token is token ROB ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 106 197 89 89 89 111 204
Entering state 156
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 106 197 89 89 89 111 204
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 106 197 89 89 89 111 204
Entering state 109
Next token is token ROB ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 106 197 89 89 89 111 204
Entering state 272
Next token is token ROB ()
Reducing stack by rule 44 (line 117):
   $1 = nterm shift_expression ()
   $2 = token RIGHT_OP ()
   $3 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 106 197 89 89 89
Entering state 111
Next token is token ROB ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 106 197 89 89 89
Entering state 112
Next token is token ROB ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 106 197 89 89 89
Entering state 113
Next token is token ROB ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 106 197 89 89 89
Entering state 114
Next token is token ROB ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 106 197 89 89 89
Entering state 115
Next token is token ROB ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 106 197 89 89 89
Entering state 116
Next token is token ROB ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 106 197 89 89 89
Entering state 117
Next token is token ROB ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 106 197 89 89 89
Entering state 118
Next token is token ROB ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 106 197 89 89 89
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 106 197 89 89 89
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126 106 197 89 89 89
Entering state 174
Next token is token ROB ()
Shifting token ROB ()
Entering state 255
Reducing stack by rule 4 (line 44):
   $1 = token LOB ()
   $2 = nterm expression ()
   $3 = token ROB ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 106 197 89 89
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 106 197 89 89
Entering state 105
Reading a token: Next token is token LEFT_OP ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 106 197 89 89
Entering state 106
Next token is token LEFT_OP ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 106 197 89 89
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 106 197 89 89
Entering state 109
Next token is token LEFT_OP ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 106 197 89 89
Entering state 110
Next token is token LEFT_OP ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 106 197 89 89
Entering state 111
Next token is token LEFT_OP ()
Shifting token LEFT_OP ()
Entering state 205
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 99
Reducing stack by rule 5 (line 49):
   $1 = token INT_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 106 197 89 89 111 205
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 106 197 89 89 111 205
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 106 197 89 89 111 205
Entering state 105
Reading a token: Next token is token ROB ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 106 197 89 89 111 205
Entering state 156
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 106 197 89 89 111 205
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 106 197 89 89 111 205
Entering state 109
Next token is token ROB ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 106 197 89 89 111 205
Entering state 273
Next token is token ROB ()
Reducing stack by rule 43 (line 116):
   $1 = nterm shift_expression ()
   $2 = token LEFT_OP ()
   $3 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 106 197 89 89
Entering state 111
Next token is token ROB ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 106 197 89 89
Entering state 112
Next token is token ROB ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 106 197 89 89
Entering state 113
Next token is token ROB ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 106 197 89 89
Entering state 114
Next token is token ROB ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 106 197 89 89
Entering state 115
Next token is token ROB ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 106 197 89 89
Entering state 116
Next token is token ROB ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 106 197 89 89
Entering state 117
Next token is token ROB ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 106 197 89 89
Entering state 118
Next token is token ROB ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 106 197 89 89
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 106 197 89 89
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126 106 197 89 89
Entering state 174
Next token is token ROB ()
Shifting token ROB ()
Entering state 255
Reducing stack by rule 4 (line 44):
   $1 = token LOB ()
   $2 = nterm expression ()
   $3 = token ROB ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 106 197 89
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 106 197 89
Entering state 105
Reading a token: Next token is token PLUS ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 106 197 89
Entering state 106
Next token is token PLUS ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 106 197 89
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 106 197 89
Entering state 109
Next token is token PLUS ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 106 197 89
Entering state 110
Next token is token PLUS ()
Shifting token PLUS ()
Entering state 202
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 99
Reducing stack by rule 5 (line 49):
   $1 = token INT_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 106 197 89 110 202
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 106 197 89 110 202
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 106 197 89 110 202
Entering state 105
Reading a token: Next token is token ROB ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 106 197 89 110 202
Entering state 156
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 106 197 89 110 202
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 106 197 89 110 202
Entering state 270
Next token is token ROB ()
Reducing stack by rule 40 (line 109):
   $1 = nterm additive_expression ()
   $2 = token PLUS ()
   $3 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 106 197 89
Entering state 110
Next token is token ROB ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 106 197 89
Entering state 111
Next token is token ROB ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 106 197 89
Entering state 112
Next token is token ROB ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 106 197 89
Entering state 113
Next token is token ROB ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 106 197 89
Entering state 114
Next token is token ROB ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 106 197 89
Entering state 115
Next token is token ROB ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 106 197 89
Entering state 116
Next token is token ROB ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 106 197 89
Entering state 117
Next token is token ROB ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 106 197 89
Entering state 118
Next token is token ROB ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 106 197 89
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 106 197 89
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126 106 197 89
Entering state 174
Next token is token ROB ()
Shifting token ROB ()
Entering state 255
Reducing stack by rule 4 (line 44):
   $1 = token LOB ()
   $2 = nterm expression ()
   $3 = token ROB ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 105
Reading a token: Next token is token MINUS ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 106
Next token is token MINUS ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 109
Next token is token MINUS ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 110
Next token is token MINUS ()
Shifting token MINUS ()
Entering state 203
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 99
Reducing stack by rule 5 (line 49):
   $1 = token INT_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 106 197 110 203
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 106 197 110 203
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 106 197 110 203
Entering state 105
Reading a token: Next token is token SEMICOLON ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 106 197 110 203
Entering state 156
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 106 197 110 203
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 106 197 110 203
Entering state 271
Next token is token SEMICOLON ()
Reducing stack by rule 41 (line 110):
   $1 = nterm additive_expression ()
   $2 = token MINUS ()
   $3 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 110
Next token is token SEMICOLON ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 111
Next token is token SEMICOLON ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 112
Next token is token SEMICOLON ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 113
Next token is token SEMICOLON ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 114
Next token is token SEMICOLON ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 115
Next token is token SEMICOLON ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 116
Next token is token SEMICOLON ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 117
Next token is token SEMICOLON ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 118
Next token is token SEMICOLON ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 266
Reducing stack by rule 66 (line 175):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126
Entering state 121
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 218
Reducing stack by rule 186 (line 450):
   $1 = nterm expression ()
   $2 = token SEMICOLON ()
-> $$ = nterm expression_statement ()
Stack now 0 35 26 47 52 126
Entering state 128
Reducing stack by rule 172 (line 415):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 35 26 47 52 126
Entering state 123
Reducing stack by rule 184 (line 443):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 35 26 47 52 126
Entering state 221
Reducing stack by rule 182 (line 437):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 35 26 47 52
Entering state 126
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 97
Reading a token: Next token is token EQUALITY ()
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126
Entering state 105
Next token is token EQUALITY ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126
Entering state 106
Next token is token EQUALITY ()
Shifting token EQUALITY ()
Entering state 196
Reducing stack by rule 67 (line 180):
   $1 = token EQUALITY ()
-> $$ = nterm assignment_operator ()
Stack now 0 35 26 47 52 126 106
Entering state 197
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 99
Reducing stack by rule 5 (line 49):
   $1 = token INT_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 106 197
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 105
Reading a token: Next token is token CONJ ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 106
Next token is token CONJ ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 109
Next token is token CONJ ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 110
Next token is token CONJ ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 111
Next token is token CONJ ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 112
Next token is token CONJ ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 113
Next token is token CONJ ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 114
Next token is token CONJ ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 115
Next token is token CONJ ()
Shifting token CONJ ()
Entering state 213
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 99
Reducing stack by rule 5 (line 49):
   $1 = token INT_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 106 197 115 213
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 106 197 115 213
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 106 197 115 213
Entering state 105
Reading a token: Next token is token SEMICOLON ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 106 197 115 213
Entering state 156
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 106 197 115 213
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 106 197 115 213
Entering state 109
Next token is token SEMICOLON ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 106 197 115 213
Entering state 110
Next token is token SEMICOLON ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 106 197 115 213
Entering state 111
Next token is token SEMICOLON ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 106 197 115 213
Entering state 112
Next token is token SEMICOLON ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 106 197 115 213
Entering state 113
Next token is token SEMICOLON ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 106 197 115 213
Entering state 281
Next token is token SEMICOLON ()
Reducing stack by rule 56 (line 145):
   $1 = nterm exclusive_or_expression ()
   $2 = token CONJ ()
   $3 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 115
Next token is token SEMICOLON ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 116
Next token is token SEMICOLON ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 117
Next token is token SEMICOLON ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 118
Next token is token SEMICOLON ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 266
Reducing stack by rule 66 (line 175):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126
Entering state 121
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 218
Reducing stack by rule 186 (line 450):
   $1 = nterm expression ()
   $2 = token SEMICOLON ()
-> $$ = nterm expression_statement ()
Stack now 0 35 26 47 52 126
Entering state 128
Reducing stack by rule 172 (line 415):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 35 26 47 52 126
Entering state 123
Reducing stack by rule 184 (line 443):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 35 26 47 52 126
Entering state 221
Reducing stack by rule 182 (line 437):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 35 26 47 52
Entering state 126
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 97
Reading a token: Next token is token EQUALITY ()
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126
Entering state 105
Next token is token EQUALITY ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126
Entering state 106
Next token is token EQUALITY ()
Shifting token EQUALITY ()
Entering state 196
Reducing stack by rule 67 (line 180):
   $1 = token EQUALITY ()
-> $$ = nterm assignment_operator ()
Stack now 0 35 26 47 52 126 106
Entering state 197
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 99
Reducing stack by rule 5 (line 49):
   $1 = token INT_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 106 197
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 105
Reading a token: Next token is token DIVSN ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 106
Next token is token DIVSN ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 109
Next token is token DIVSN ()
Shifting token DIVSN ()
Entering state 200
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 99
Reducing stack by rule 5 (line 49):
   $1 = token INT_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 106 197 109 200
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 106 197 109 200
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 106 197 109 200
Entering state 105
Reading a token: Next token is token SEMICOLON ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 106 197 109 200
Entering state 156
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 106 197 109 200
Entering state 268
Reducing stack by rule 37 (line 102):
   $1 = nterm multiplicative_expression ()
   $2 = token DIVSN ()
   $3 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 109
Next token is token SEMICOLON ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 110
Next token is token SEMICOLON ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 111
Next token is token SEMICOLON ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 112
Next token is token SEMICOLON ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 113
Next token is token SEMICOLON ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 114
Next token is token SEMICOLON ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 115
Next token is token SEMICOLON ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 116
Next token is token SEMICOLON ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 117
Next token is token SEMICOLON ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 118
Next token is token SEMICOLON ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 266
Reducing stack by rule 66 (line 175):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126
Entering state 121
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 218
Reducing stack by rule 186 (line 450):
   $1 = nterm expression ()
   $2 = token SEMICOLON ()
-> $$ = nterm expression_statement ()
Stack now 0 35 26 47 52 126
Entering state 128
Reducing stack by rule 172 (line 415):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 35 26 47 52 126
Entering state 123
Reducing stack by rule 184 (line 443):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 35 26 47 52 126
Entering state 221
Reducing stack by rule 182 (line 437):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 35 26 47 52
Entering state 126
Reading a token: Next token is token IF ()
Shifting token IF ()
Entering state 79
Reading a token: Next token is token LOB ()
Shifting token LOB ()
Entering state 162
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 105
Reading a token: Next token is token GT ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 106
Next token is token GT ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 109
Next token is token GT ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 110
Next token is token GT ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 111
Next token is token GT ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 112
Next token is token GT ()
Shifting token GT ()
Entering state 209
Reading a token: Next token is token MINUS ()
Shifting token MINUS ()
Entering state 94
Reducing stack by rule 30 (line 88):
   $1 = token MINUS ()
-> $$ = nterm unary_operator ()
Stack now 0 35 26 47 52 126 79 162 112 209
Entering state 107
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 99
Reducing stack by rule 5 (line 49):
   $1 = token INT_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 79 162 112 209 107
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 79 162 112 209 107
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 79 162 112 209 107
Entering state 105
Reading a token: Next token is token ROB ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 79 162 112 209 107
Entering state 156
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 79 162 112 209 107
Entering state 198
Reducing stack by rule 24 (line 79):
   $1 = nterm unary_operator ()
   $2 = nterm cast_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 79 162 112 209
Entering state 156
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 79 162 112 209
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 79 162 112 209
Entering state 109
Next token is token ROB ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 79 162 112 209
Entering state 110
Next token is token ROB ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 79 162 112 209
Entering state 277
Next token is token ROB ()
Reducing stack by rule 47 (line 124):
   $1 = nterm relational_expression ()
   $2 = token GT ()
   $3 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 112
Next token is token ROB ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 113
Next token is token ROB ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 114
Next token is token ROB ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 115
Next token is token ROB ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 116
Next token is token ROB ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 117
Next token is token ROB ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 118
Next token is token ROB ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 246
Next token is token ROB ()
Shifting token ROB ()
Entering state 303
Reading a token: Next token is token LCB ()
Shifting token LCB ()
Entering state 52
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 97
Reading a token: Next token is token MOD_ASSIGN ()
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 52
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 52
Entering state 105
Next token is token MOD_ASSIGN ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 52
Entering state 106
Next token is token MOD_ASSIGN ()
Shifting token MOD_ASSIGN ()
Entering state 193
Reducing stack by rule 70 (line 183):
   $1 = token MOD_ASSIGN ()
-> $$ = nterm assignment_operator ()
Stack now 0 35 26 47 52 126 79 162 246 303 52 106
Entering state 197
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 99
Reducing stack by rule 5 (line 49):
   $1 = token INT_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 79 162 246 303 52 106 197
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 52 106 197
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 52 106 197
Entering state 105
Reading a token: Next token is token SEMICOLON ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 52 106 197
Entering state 106
Next token is token SEMICOLON ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 52 106 197
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 52 106 197
Entering state 109
Next token is token SEMICOLON ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 52 106 197
Entering state 110
Next token is token SEMICOLON ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 52 106 197
Entering state 111
Next token is token SEMICOLON ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 52 106 197
Entering state 112
Next token is token SEMICOLON ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 52 106 197
Entering state 113
Next token is token SEMICOLON ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 52 106 197
Entering state 114
Next token is token SEMICOLON ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 52 106 197
Entering state 115
Next token is token SEMICOLON ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 52 106 197
Entering state 116
Next token is token SEMICOLON ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 52 106 197
Entering state 117
Next token is token SEMICOLON ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 52 106 197
Entering state 118
Next token is token SEMICOLON ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 52 106 197
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 52 106 197
Entering state 266
Reducing stack by rule 66 (line 175):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 52
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 52
Entering state 121
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 218
Reducing stack by rule 186 (line 450):
   $1 = nterm expression ()
   $2 = token SEMICOLON ()
-> $$ = nterm expression_statement ()
Stack now 0 35 26 47 52 126 79 162 246 303 52
Entering state 128
Reducing stack by rule 172 (line 415):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 35 26 47 52 126 79 162 246 303 52
Entering state 123
Reducing stack by rule 184 (line 443):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 35 26 47 52 126 79 162 246 303 52
Entering state 127
Reducing stack by rule 181 (line 436):
   $1 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 35 26 47 52 126 79 162 246 303 52
Entering state 126
Reading a token: Next token is token RCB ()
Shifting token RCB ()
Entering state 220
Reducing stack by rule 180 (line 431):
   $1 = token LCB ()
   $2 = nterm block_item_list ()
   $3 = token RCB ()
-> $$ = nterm compound_statement ()
Stack now 0 35 26 47 52 126 79 162 246 303
Entering state 125
Reducing stack by rule 171 (line 414):
   $1 = nterm compound_statement ()
-> $$ = nterm statement ()
Stack now 0 35 26 47 52 126 79 162 246 303
Entering state 322
Reading a token: Next token is token ELSE ()
Shifting token ELSE ()
Entering state 334
Reading a token: Next token is token IF ()
Shifting token IF ()
Entering state 79
Reading a token: Next token is token LOB ()
Shifting token LOB ()
Entering state 162
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162
Entering state 105
Reading a token: Next token is token LT ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162
Entering state 106
Next token is token LT ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162
Entering state 109
Next token is token LT ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162
Entering state 110
Next token is token LT ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162
Entering state 111
Next token is token LT ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162
Entering state 112
Next token is token LT ()
Shifting token LT ()
Entering state 208
Reading a token: Next token is token MINUS ()
Shifting token MINUS ()
Entering state 94
Reducing stack by rule 30 (line 88):
   $1 = token MINUS ()
-> $$ = nterm unary_operator ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162 112 208
Entering state 107
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 99
Reducing stack by rule 5 (line 49):
   $1 = token INT_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162 112 208 107
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162 112 208 107
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162 112 208 107
Entering state 105
Reading a token: Next token is token ROB ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162 112 208 107
Entering state 156
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162 112 208 107
Entering state 198
Reducing stack by rule 24 (line 79):
   $1 = nterm unary_operator ()
   $2 = nterm cast_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162 112 208
Entering state 156
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162 112 208
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162 112 208
Entering state 109
Next token is token ROB ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162 112 208
Entering state 110
Next token is token ROB ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162 112 208
Entering state 276
Next token is token ROB ()
Reducing stack by rule 46 (line 123):
   $1 = nterm relational_expression ()
   $2 = token LT ()
   $3 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162
Entering state 112
Next token is token ROB ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162
Entering state 113
Next token is token ROB ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162
Entering state 114
Next token is token ROB ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162
Entering state 115
Next token is token ROB ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162
Entering state 116
Next token is token ROB ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162
Entering state 117
Next token is token ROB ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162
Entering state 118
Next token is token ROB ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162
Entering state 246
Next token is token ROB ()
Shifting token ROB ()
Entering state 303
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 97
Reading a token: Next token is token ADD_ASSIGN ()
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162 246 303
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162 246 303
Entering state 105
Next token is token ADD_ASSIGN ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162 246 303
Entering state 106
Next token is token ADD_ASSIGN ()
Shifting token ADD_ASSIGN ()
Entering state 188
Reducing stack by rule 71 (line 184):
   $1 = token ADD_ASSIGN ()
-> $$ = nterm assignment_operator ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162 246 303 106
Entering state 197
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 99
Reducing stack by rule 5 (line 49):
   $1 = token INT_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162 246 303 106 197
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162 246 303 106 197
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162 246 303 106 197
Entering state 105
Reading a token: Next token is token SEMICOLON ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162 246 303 106 197
Entering state 106
Next token is token SEMICOLON ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162 246 303 106 197
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162 246 303 106 197
Entering state 109
Next token is token SEMICOLON ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162 246 303 106 197
Entering state 110
Next token is token SEMICOLON ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162 246 303 106 197
Entering state 111
Next token is token SEMICOLON ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162 246 303 106 197
Entering state 112
Next token is token SEMICOLON ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162 246 303 106 197
Entering state 113
Next token is token SEMICOLON ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162 246 303 106 197
Entering state 114
Next token is token SEMICOLON ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162 246 303 106 197
Entering state 115
Next token is token SEMICOLON ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162 246 303 106 197
Entering state 116
Next token is token SEMICOLON ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162 246 303 106 197
Entering state 117
Next token is token SEMICOLON ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162 246 303 106 197
Entering state 118
Next token is token SEMICOLON ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162 246 303 106 197
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162 246 303 106 197
Entering state 266
Reducing stack by rule 66 (line 175):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162 246 303
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162 246 303
Entering state 121
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 218
Reducing stack by rule 186 (line 450):
   $1 = nterm expression ()
   $2 = token SEMICOLON ()
-> $$ = nterm expression_statement ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162 246 303
Entering state 128
Reducing stack by rule 172 (line 415):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162 246 303
Entering state 322
Reading a token: Next token is token ELSE ()
Shifting token ELSE ()
Entering state 334
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 97
Reading a token: Next token is token SUB_ASSIGN ()
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162 246 303 322 334
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162 246 303 322 334
Entering state 105
Next token is token SUB_ASSIGN ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162 246 303 322 334
Entering state 106
Next token is token SUB_ASSIGN ()
Shifting token SUB_ASSIGN ()
Entering state 189
Reducing stack by rule 72 (line 185):
   $1 = token SUB_ASSIGN ()
-> $$ = nterm assignment_operator ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162 246 303 322 334 106
Entering state 197
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 99
Reducing stack by rule 5 (line 49):
   $1 = token INT_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162 246 303 322 334 106 197
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162 246 303 322 334 106 197
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162 246 303 322 334 106 197
Entering state 105
Reading a token: Next token is token SEMICOLON ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162 246 303 322 334 106 197
Entering state 106
Next token is token SEMICOLON ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162 246 303 322 334 106 197
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162 246 303 322 334 106 197
Entering state 109
Next token is token SEMICOLON ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162 246 303 322 334 106 197
Entering state 110
Next token is token SEMICOLON ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162 246 303 322 334 106 197
Entering state 111
Next token is token SEMICOLON ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162 246 303 322 334 106 197
Entering state 112
Next token is token SEMICOLON ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162 246 303 322 334 106 197
Entering state 113
Next token is token SEMICOLON ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162 246 303 322 334 106 197
Entering state 114
Next token is token SEMICOLON ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162 246 303 322 334 106 197
Entering state 115
Next token is token SEMICOLON ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162 246 303 322 334 106 197
Entering state 116
Next token is token SEMICOLON ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162 246 303 322 334 106 197
Entering state 117
Next token is token SEMICOLON ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162 246 303 322 334 106 197
Entering state 118
Next token is token SEMICOLON ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162 246 303 322 334 106 197
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162 246 303 322 334 106 197
Entering state 266
Reducing stack by rule 66 (line 175):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162 246 303 322 334
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162 246 303 322 334
Entering state 121
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 218
Reducing stack by rule 186 (line 450):
   $1 = nterm expression ()
   $2 = token SEMICOLON ()
-> $$ = nterm expression_statement ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162 246 303 322 334
Entering state 128
Reducing stack by rule 172 (line 415):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334 79 162 246 303 322 334
Entering state 342
Reducing stack by rule 188 (line 456):
   $1 = token IF ()
   $2 = token LOB ()
   $3 = nterm expression ()
   $4 = token ROB ()
   $5 = nterm statement ()
   $6 = token ELSE ()
   $7 = nterm statement ()
-> $$ = nterm selection_statement ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334
Entering state 129
Reducing stack by rule 173 (line 416):
   $1 = nterm selection_statement ()
-> $$ = nterm statement ()
Stack now 0 35 26 47 52 126 79 162 246 303 322 334
Entering state 342
Reducing stack by rule 188 (line 456):
   $1 = token IF ()
   $2 = token LOB ()
   $3 = nterm expression ()
   $4 = token ROB ()
   $5 = nterm statement ()
   $6 = token ELSE ()
   $7 = nterm statement ()
-> $$ = nterm selection_statement ()
Stack now 0 35 26 47 52 126
Entering state 129
Reducing stack by rule 173 (line 416):
   $1 = nterm selection_statement ()
-> $$ = nterm statement ()
Stack now 0 35 26 47 52 126
Entering state 123
Reducing stack by rule 184 (line 443):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 35 26 47 52 126
Entering state 221
Reducing stack by rule 182 (line 437):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 35 26 47 52
Entering state 126
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 97
Reading a token: Next token is token LEFT_ASSIGN ()
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126
Entering state 105
Next token is token LEFT_ASSIGN ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126
Entering state 106
Next token is token LEFT_ASSIGN ()
Shifting token LEFT_ASSIGN ()
Entering state 187
Reducing stack by rule 73 (line 186):
   $1 = token LEFT_ASSIGN ()
-> $$ = nterm assignment_operator ()
Stack now 0 35 26 47 52 126 106
Entering state 197
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 99
Reducing stack by rule 5 (line 49):
   $1 = token INT_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 106 197
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 105
Reading a token: Next token is token SEMICOLON ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 106
Next token is token SEMICOLON ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 109
Next token is token SEMICOLON ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 110
Next token is token SEMICOLON ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 111
Next token is token SEMICOLON ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 112
Next token is token SEMICOLON ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 113
Next token is token SEMICOLON ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 114
Next token is token SEMICOLON ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 115
Next token is token SEMICOLON ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 116
Next token is token SEMICOLON ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 117
Next token is token SEMICOLON ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 118
Next token is token SEMICOLON ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 266
Reducing stack by rule 66 (line 175):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126
Entering state 121
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 218
Reducing stack by rule 186 (line 450):
   $1 = nterm expression ()
   $2 = token SEMICOLON ()
-> $$ = nterm expression_statement ()
Stack now 0 35 26 47 52 126
Entering state 128
Reducing stack by rule 172 (line 415):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 35 26 47 52 126
Entering state 123
Reducing stack by rule 184 (line 443):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 35 26 47 52 126
Entering state 221
Reducing stack by rule 182 (line 437):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 35 26 47 52
Entering state 126
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 97
Reading a token: Next token is token RIGHT_ASSIGN ()
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126
Entering state 105
Next token is token RIGHT_ASSIGN ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126
Entering state 106
Next token is token RIGHT_ASSIGN ()
Shifting token RIGHT_ASSIGN ()
Entering state 186
Reducing stack by rule 74 (line 187):
   $1 = token RIGHT_ASSIGN ()
-> $$ = nterm assignment_operator ()
Stack now 0 35 26 47 52 126 106
Entering state 197
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 99
Reducing stack by rule 5 (line 49):
   $1 = token INT_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 106 197
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 105
Reading a token: Next token is token SEMICOLON ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 106
Next token is token SEMICOLON ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 109
Next token is token SEMICOLON ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 110
Next token is token SEMICOLON ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 111
Next token is token SEMICOLON ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 112
Next token is token SEMICOLON ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 113
Next token is token SEMICOLON ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 114
Next token is token SEMICOLON ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 115
Next token is token SEMICOLON ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 116
Next token is token SEMICOLON ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 117
Next token is token SEMICOLON ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 118
Next token is token SEMICOLON ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 266
Reducing stack by rule 66 (line 175):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126
Entering state 121
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 218
Reducing stack by rule 186 (line 450):
   $1 = nterm expression ()
   $2 = token SEMICOLON ()
-> $$ = nterm expression_statement ()
Stack now 0 35 26 47 52 126
Entering state 128
Reducing stack by rule 172 (line 415):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 35 26 47 52 126
Entering state 123
Reducing stack by rule 184 (line 443):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 35 26 47 52 126
Entering state 221
Reducing stack by rule 182 (line 437):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 35 26 47 52
Entering state 126
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 97
Reading a token: Next token is token BITAND_ASSIGN ()
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126
Entering state 105
Next token is token BITAND_ASSIGN ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126
Entering state 106
Next token is token BITAND_ASSIGN ()
Shifting token BITAND_ASSIGN ()
Entering state 191
Reducing stack by rule 75 (line 188):
   $1 = token BITAND_ASSIGN ()
-> $$ = nterm assignment_operator ()
Stack now 0 35 26 47 52 126 106
Entering state 197
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 99
Reducing stack by rule 5 (line 49):
   $1 = token INT_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 106 197
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 105
Reading a token: Next token is token SEMICOLON ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 106
Next token is token SEMICOLON ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 109
Next token is token SEMICOLON ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 110
Next token is token SEMICOLON ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 111
Next token is token SEMICOLON ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 112
Next token is token SEMICOLON ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 113
Next token is token SEMICOLON ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 114
Next token is token SEMICOLON ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 115
Next token is token SEMICOLON ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 116
Next token is token SEMICOLON ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 117
Next token is token SEMICOLON ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 118
Next token is token SEMICOLON ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 266
Reducing stack by rule 66 (line 175):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126
Entering state 121
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 218
Reducing stack by rule 186 (line 450):
   $1 = nterm expression ()
   $2 = token SEMICOLON ()
-> $$ = nterm expression_statement ()
Stack now 0 35 26 47 52 126
Entering state 128
Reducing stack by rule 172 (line 415):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 35 26 47 52 126
Entering state 123
Reducing stack by rule 184 (line 443):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 35 26 47 52 126
Entering state 221
Reducing stack by rule 182 (line 437):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 35 26 47 52
Entering state 126
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 97
Reading a token: Next token is token XOR_ASSIGN ()
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126
Entering state 105
Next token is token XOR_ASSIGN ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126
Entering state 106
Next token is token XOR_ASSIGN ()
Shifting token XOR_ASSIGN ()
Entering state 194
Reducing stack by rule 76 (line 189):
   $1 = token XOR_ASSIGN ()
-> $$ = nterm assignment_operator ()
Stack now 0 35 26 47 52 126 106
Entering state 197
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 99
Reducing stack by rule 5 (line 49):
   $1 = token INT_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 106 197
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 105
Reading a token: Next token is token SEMICOLON ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 106
Next token is token SEMICOLON ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 109
Next token is token SEMICOLON ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 110
Next token is token SEMICOLON ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 111
Next token is token SEMICOLON ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 112
Next token is token SEMICOLON ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 113
Next token is token SEMICOLON ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 114
Next token is token SEMICOLON ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 115
Next token is token SEMICOLON ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 116
Next token is token SEMICOLON ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 117
Next token is token SEMICOLON ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 118
Next token is token SEMICOLON ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 266
Reducing stack by rule 66 (line 175):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126
Entering state 121
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 218
Reducing stack by rule 186 (line 450):
   $1 = nterm expression ()
   $2 = token SEMICOLON ()
-> $$ = nterm expression_statement ()
Stack now 0 35 26 47 52 126
Entering state 128
Reducing stack by rule 172 (line 415):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 35 26 47 52 126
Entering state 123
Reducing stack by rule 184 (line 443):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 35 26 47 52 126
Entering state 221
Reducing stack by rule 182 (line 437):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 35 26 47 52
Entering state 126
Reading a token: Next token is token DO ()
Shifting token DO ()
Entering state 78
Reading a token: Next token is token LCB ()
Shifting token LCB ()
Entering state 52
Reading a token: Next token is token AUTO ()
Shifting token AUTO ()
Entering state 3
Reducing stack by rule 97 (line 238):
   $1 = token AUTO ()
-> $$ = nterm storage_class_specifier ()
Stack now 0 35 26 47 52 126 78 52
Entering state 27
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 9
Reducing stack by rule 102 (line 247):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 35 26 47 52 126 78 52 27
Entering state 28
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 85 (line 214):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 35 26 47 52 126 78 52 27
Entering state 48
Reducing stack by rule 84 (line 213):
   $1 = nterm storage_class_specifier ()
   $2 = nterm declaration_specifiers ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 35 26 47 52 126 78 52
Entering state 54
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 24
Reducing stack by rule 131 (line 309):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 35 26 47 52 126 78 52 54
Entering state 33
Reading a token: Next token is token EQUALITY ()
Reducing stack by rule 130 (line 304):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 35 26 47 52 126 78 52 54
Entering state 132
Next token is token EQUALITY ()
Shifting token EQUALITY ()
Entering state 71
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 99
Reducing stack by rule 5 (line 49):
   $1 = token INT_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 78 52 54 132 71
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 78 52 54 132 71
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 78 52 54 132 71
Entering state 105
Reading a token: Next token is token COMMA ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 78 52 54 132 71
Entering state 106
Next token is token COMMA ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 78 52 54 132 71
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 78 52 54 132 71
Entering state 109
Next token is token COMMA ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 78 52 54 132 71
Entering state 110
Next token is token COMMA ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 78 52 54 132 71
Entering state 111
Next token is token COMMA ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 78 52 54 132 71
Entering state 112
Next token is token COMMA ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 78 52 54 132 71
Entering state 113
Next token is token COMMA ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 78 52 54 132 71
Entering state 114
Next token is token COMMA ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 78 52 54 132 71
Entering state 115
Next token is token COMMA ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 78 52 54 132 71
Entering state 116
Next token is token COMMA ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 78 52 54 132 71
Entering state 117
Next token is token COMMA ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 78 52 54 132 71
Entering state 118
Next token is token COMMA ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 78 52 54 132 71
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 78 52 54 132 71
Entering state 152
Reducing stack by rule 158 (line 381):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 35 26 47 52 126 78 52 54 132 71
Entering state 153
Reducing stack by rule 94 (line 231):
   $1 = nterm declarator ()
   $2 = token EQUALITY ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Stack now 0 35 26 47 52 126 78 52 54
Entering state 46
Reducing stack by rule 91 (line 224):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 35 26 47 52 126 78 52 54
Entering state 45
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 70
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 24
Reducing stack by rule 131 (line 309):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 35 26 47 52 126 78 52 54 45 70
Entering state 33
Reading a token: Next token is token EQUALITY ()
Reducing stack by rule 130 (line 304):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 35 26 47 52 126 78 52 54 45 70
Entering state 132
Next token is token EQUALITY ()
Shifting token EQUALITY ()
Entering state 71
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 99
Reducing stack by rule 5 (line 49):
   $1 = token INT_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 78 52 54 45 70 132 71
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 78 52 54 45 70 132 71
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 78 52 54 45 70 132 71
Entering state 105
Reading a token: Next token is token SEMICOLON ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 78 52 54 45 70 132 71
Entering state 106
Next token is token SEMICOLON ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 78 52 54 45 70 132 71
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 78 52 54 45 70 132 71
Entering state 109
Next token is token SEMICOLON ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 78 52 54 45 70 132 71
Entering state 110
Next token is token SEMICOLON ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 78 52 54 45 70 132 71
Entering state 111
Next token is token SEMICOLON ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 78 52 54 45 70 132 71
Entering state 112
Next token is token SEMICOLON ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 78 52 54 45 70 132 71
Entering state 113
Next token is token SEMICOLON ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 78 52 54 45 70 132 71
Entering state 114
Next token is token SEMICOLON ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 78 52 54 45 70 132 71
Entering state 115
Next token is token SEMICOLON ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 78 52 54 45 70 132 71
Entering state 116
Next token is token SEMICOLON ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 78 52 54 45 70 132 71
Entering state 117
Next token is token SEMICOLON ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 78 52 54 45 70 132 71
Entering state 118
Next token is token SEMICOLON ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 78 52 54 45 70 132 71
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 78 52 54 45 70 132 71
Entering state 152
Reducing stack by rule 158 (line 381):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 35 26 47 52 126 78 52 54 45 70 132 71
Entering state 153
Reducing stack by rule 94 (line 231):
   $1 = nterm declarator ()
   $2 = token EQUALITY ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Stack now 0 35 26 47 52 126 78 52 54 45 70
Entering state 149
Reducing stack by rule 92 (line 225):
   $1 = nterm init_declarator_list ()
   $2 = token COMMA ()
   $3 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 35 26 47 52 126 78 52 54
Entering state 45
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 69
Reducing stack by rule 82 (line 207):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token SEMICOLON ()
-> $$ = nterm declaration ()
Stack now 0 35 26 47 52 126 78 52
Entering state 122
Reducing stack by rule 183 (line 442):
   $1 = nterm declaration ()
-> $$ = nterm block_item ()
Stack now 0 35 26 47 52 126 78 52
Entering state 127
Reducing stack by rule 181 (line 436):
   $1 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 35 26 47 52 126 78 52
Entering state 126
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 97
Reading a token: Next token is token OR_ASSIGN ()
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 78 52 126
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 78 52 126
Entering state 105
Next token is token OR_ASSIGN ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 78 52 126
Entering state 106
Next token is token OR_ASSIGN ()
Shifting token OR_ASSIGN ()
Entering state 195
Reducing stack by rule 77 (line 190):
   $1 = token OR_ASSIGN ()
-> $$ = nterm assignment_operator ()
Stack now 0 35 26 47 52 126 78 52 126 106
Entering state 197
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 78 52 126 106 197
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 78 52 126 106 197
Entering state 105
Reading a token: Next token is token SEMICOLON ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 78 52 126 106 197
Entering state 106
Next token is token SEMICOLON ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 78 52 126 106 197
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 78 52 126 106 197
Entering state 109
Next token is token SEMICOLON ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 78 52 126 106 197
Entering state 110
Next token is token SEMICOLON ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 78 52 126 106 197
Entering state 111
Next token is token SEMICOLON ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 78 52 126 106 197
Entering state 112
Next token is token SEMICOLON ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 78 52 126 106 197
Entering state 113
Next token is token SEMICOLON ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 78 52 126 106 197
Entering state 114
Next token is token SEMICOLON ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 78 52 126 106 197
Entering state 115
Next token is token SEMICOLON ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 78 52 126 106 197
Entering state 116
Next token is token SEMICOLON ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 78 52 126 106 197
Entering state 117
Next token is token SEMICOLON ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 78 52 126 106 197
Entering state 118
Next token is token SEMICOLON ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 78 52 126 106 197
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 78 52 126 106 197
Entering state 266
Reducing stack by rule 66 (line 175):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 78 52 126
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126 78 52 126
Entering state 121
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 218
Reducing stack by rule 186 (line 450):
   $1 = nterm expression ()
   $2 = token SEMICOLON ()
-> $$ = nterm expression_statement ()
Stack now 0 35 26 47 52 126 78 52 126
Entering state 128
Reducing stack by rule 172 (line 415):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 35 26 47 52 126 78 52 126
Entering state 123
Reducing stack by rule 184 (line 443):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 35 26 47 52 126 78 52 126
Entering state 221
Reducing stack by rule 182 (line 437):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 35 26 47 52 126 78 52
Entering state 126
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 97
Reading a token: Next token is token DEC_OP ()
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 78 52 126
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 78 52 126
Entering state 105
Next token is token DEC_OP ()
Shifting token DEC_OP ()
Entering state 181
Reducing stack by rule 16 (line 63):
   $1 = nterm postfix_expression ()
   $2 = token DEC_OP ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 78 52 126
Entering state 105
Reading a token: Next token is token SEMICOLON ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 78 52 126
Entering state 106
Next token is token SEMICOLON ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 78 52 126
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 78 52 126
Entering state 109
Next token is token SEMICOLON ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 78 52 126
Entering state 110
Next token is token SEMICOLON ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 78 52 126
Entering state 111
Next token is token SEMICOLON ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 78 52 126
Entering state 112
Next token is token SEMICOLON ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 78 52 126
Entering state 113
Next token is token SEMICOLON ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 78 52 126
Entering state 114
Next token is token SEMICOLON ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 78 52 126
Entering state 115
Next token is token SEMICOLON ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 78 52 126
Entering state 116
Next token is token SEMICOLON ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 78 52 126
Entering state 117
Next token is token SEMICOLON ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 78 52 126
Entering state 118
Next token is token SEMICOLON ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 78 52 126
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 78 52 126
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126 78 52 126
Entering state 121
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 218
Reducing stack by rule 186 (line 450):
   $1 = nterm expression ()
   $2 = token SEMICOLON ()
-> $$ = nterm expression_statement ()
Stack now 0 35 26 47 52 126 78 52 126
Entering state 128
Reducing stack by rule 172 (line 415):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 35 26 47 52 126 78 52 126
Entering state 123
Reducing stack by rule 184 (line 443):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 35 26 47 52 126 78 52 126
Entering state 221
Reducing stack by rule 182 (line 437):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 35 26 47 52 126 78 52
Entering state 126
Reading a token: Next token is token IF ()
Shifting token IF ()
Entering state 79
Reading a token: Next token is token LOB ()
Shifting token LOB ()
Entering state 162
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 78 52 126 79 162
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 78 52 126 79 162
Entering state 105
Reading a token: Next token is token GT ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 78 52 126 79 162
Entering state 106
Next token is token GT ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 78 52 126 79 162
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 78 52 126 79 162
Entering state 109
Next token is token GT ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 78 52 126 79 162
Entering state 110
Next token is token GT ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 78 52 126 79 162
Entering state 111
Next token is token GT ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 78 52 126 79 162
Entering state 112
Next token is token GT ()
Shifting token GT ()
Entering state 209
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 78 52 126 79 162 112 209
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 78 52 126 79 162 112 209
Entering state 105
Reading a token: Next token is token ROB ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 78 52 126 79 162 112 209
Entering state 156
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 78 52 126 79 162 112 209
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 78 52 126 79 162 112 209
Entering state 109
Next token is token ROB ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 78 52 126 79 162 112 209
Entering state 110
Next token is token ROB ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 78 52 126 79 162 112 209
Entering state 277
Next token is token ROB ()
Reducing stack by rule 47 (line 124):
   $1 = nterm relational_expression ()
   $2 = token GT ()
   $3 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 78 52 126 79 162
Entering state 112
Next token is token ROB ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 78 52 126 79 162
Entering state 113
Next token is token ROB ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 78 52 126 79 162
Entering state 114
Next token is token ROB ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 78 52 126 79 162
Entering state 115
Next token is token ROB ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 78 52 126 79 162
Entering state 116
Next token is token ROB ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 78 52 126 79 162
Entering state 117
Next token is token ROB ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 78 52 126 79 162
Entering state 118
Next token is token ROB ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 78 52 126 79 162
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 78 52 126 79 162
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126 78 52 126 79 162
Entering state 246
Next token is token ROB ()
Shifting token ROB ()
Entering state 303
Reading a token: Next token is token BREAK ()
Shifting token BREAK ()
Entering state 74
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 155
Reducing stack by rule 198 (line 476):
   $1 = token BREAK ()
   $2 = token SEMICOLON ()
-> $$ = nterm jump_statement ()
Stack now 0 35 26 47 52 126 78 52 126 79 162 246 303
Entering state 131
Reducing stack by rule 175 (line 418):
   $1 = nterm jump_statement ()
-> $$ = nterm statement ()
Stack now 0 35 26 47 52 126 78 52 126 79 162 246 303
Entering state 322
Reading a token: Next token is token RCB ()
Reducing stack by rule 187 (line 455):
   $1 = token IF ()
   $2 = token LOB ()
   $3 = nterm expression ()
   $4 = token ROB ()
   $5 = nterm statement ()
-> $$ = nterm selection_statement ()
Stack now 0 35 26 47 52 126 78 52 126
Entering state 129
Reducing stack by rule 173 (line 416):
   $1 = nterm selection_statement ()
-> $$ = nterm statement ()
Stack now 0 35 26 47 52 126 78 52 126
Entering state 123
Reducing stack by rule 184 (line 443):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 35 26 47 52 126 78 52 126
Entering state 221
Reducing stack by rule 182 (line 437):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 35 26 47 52 126 78 52
Entering state 126
Next token is token RCB ()
Shifting token RCB ()
Entering state 220
Reducing stack by rule 180 (line 431):
   $1 = token LCB ()
   $2 = nterm block_item_list ()
   $3 = token RCB ()
-> $$ = nterm compound_statement ()
Stack now 0 35 26 47 52 126 78
Entering state 125
Reducing stack by rule 171 (line 414):
   $1 = nterm compound_statement ()
-> $$ = nterm statement ()
Stack now 0 35 26 47 52 126 78
Entering state 161
Reading a token: Next token is token WHILE ()
Shifting token WHILE ()
Entering state 245
Reading a token: Next token is token LOB ()
Shifting token LOB ()
Entering state 302
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 78 161 245 302
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 78 161 245 302
Entering state 105
Reading a token: Next token is token OR_OP ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 78 161 245 302
Entering state 106
Next token is token OR_OP ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 78 161 245 302
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 78 161 245 302
Entering state 109
Next token is token OR_OP ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 78 161 245 302
Entering state 110
Next token is token OR_OP ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 78 161 245 302
Entering state 111
Next token is token OR_OP ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 78 161 245 302
Entering state 112
Next token is token OR_OP ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 78 161 245 302
Entering state 113
Next token is token OR_OP ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 78 161 245 302
Entering state 114
Next token is token OR_OP ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 78 161 245 302
Entering state 115
Next token is token OR_OP ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 78 161 245 302
Entering state 116
Next token is token OR_OP ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 78 161 245 302
Entering state 117
Next token is token OR_OP ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 78 161 245 302
Entering state 118
Next token is token OR_OP ()
Shifting token OR_OP ()
Entering state 216
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 78 161 245 302 118 216
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 78 161 245 302 118 216
Entering state 105
Reading a token: Next token is token PLUS ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 78 161 245 302 118 216
Entering state 156
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 78 161 245 302 118 216
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 78 161 245 302 118 216
Entering state 109
Next token is token PLUS ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 78 161 245 302 118 216
Entering state 110
Next token is token PLUS ()
Shifting token PLUS ()
Entering state 202
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 99
Reducing stack by rule 5 (line 49):
   $1 = token INT_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 78 161 245 302 118 216 110 202
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 78 161 245 302 118 216 110 202
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 78 161 245 302 118 216 110 202
Entering state 105
Reading a token: Next token is token ROB ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 78 161 245 302 118 216 110 202
Entering state 156
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 78 161 245 302 118 216 110 202
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 78 161 245 302 118 216 110 202
Entering state 270
Next token is token ROB ()
Reducing stack by rule 40 (line 109):
   $1 = nterm additive_expression ()
   $2 = token PLUS ()
   $3 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 78 161 245 302 118 216
Entering state 110
Next token is token ROB ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 78 161 245 302 118 216
Entering state 111
Next token is token ROB ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 78 161 245 302 118 216
Entering state 112
Next token is token ROB ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 78 161 245 302 118 216
Entering state 113
Next token is token ROB ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 78 161 245 302 118 216
Entering state 114
Next token is token ROB ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 78 161 245 302 118 216
Entering state 115
Next token is token ROB ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 78 161 245 302 118 216
Entering state 116
Next token is token ROB ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 78 161 245 302 118 216
Entering state 284
Next token is token ROB ()
Reducing stack by rule 62 (line 163):
   $1 = nterm logical_or_expression ()
   $2 = token OR_OP ()
   $3 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 78 161 245 302
Entering state 118
Next token is token ROB ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 78 161 245 302
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 78 161 245 302
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126 78 161 245 302
Entering state 321
Next token is token ROB ()
Shifting token ROB ()
Entering state 333
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 341
Reducing stack by rule 191 (line 463):
   $1 = token DO ()
   $2 = nterm statement ()
   $3 = token WHILE ()
   $4 = token LOB ()
   $5 = nterm expression ()
   $6 = token ROB ()
   $7 = token SEMICOLON ()
-> $$ = nterm iteration_statement ()
Stack now 0 35 26 47 52 126
Entering state 130
Reducing stack by rule 174 (line 417):
   $1 = nterm iteration_statement ()
-> $$ = nterm statement ()
Stack now 0 35 26 47 52 126
Entering state 123
Reducing stack by rule 184 (line 443):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 35 26 47 52 126
Entering state 221
Reducing stack by rule 182 (line 437):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 35 26 47 52
Entering state 126
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 97
Reading a token: Next token is token EQUALITY ()
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126
Entering state 105
Next token is token EQUALITY ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126
Entering state 106
Next token is token EQUALITY ()
Shifting token EQUALITY ()
Entering state 196
Reducing stack by rule 67 (line 180):
   $1 = token EQUALITY ()
-> $$ = nterm assignment_operator ()
Stack now 0 35 26 47 52 126 106
Entering state 197
Reading a token: Next token is token SIZEOF ()
Shifting token SIZEOF ()
Entering state 84
Reading a token: Next token is token LOB ()
Shifting token LOB ()
Entering state 167
Reading a token: Next token is token CHAR ()
Shifting token CHAR ()
Entering state 7
Reducing stack by rule 100 (line 245):
   $1 = token CHAR ()
-> $$ = nterm type_specifier ()
Stack now 0 35 26 47 52 126 106 197 84 167
Entering state 175
Reading a token: Next token is token ROB ()
Reducing stack by rule 113 (line 264):
   $1 = nterm type_specifier ()
-> $$ = nterm specifier_qualifier_list ()
Stack now 0 35 26 47 52 126 106 197 84 167
Entering state 176
Reducing stack by rule 157 (line 373):
   $1 = nterm specifier_qualifier_list ()
-> $$ = nterm type_name ()
Stack now 0 35 26 47 52 126 106 197 84 167
Entering state 252
Next token is token ROB ()
Shifting token ROB ()
Entering state 308
Reading a token: Next token is token SEMICOLON ()
Reducing stack by rule 26 (line 81):
   $1 = token SIZEOF ()
   $2 = token LOB ()
   $3 = nterm type_name ()
   $4 = token ROB ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 106
Next token is token SEMICOLON ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 109
Next token is token SEMICOLON ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 110
Next token is token SEMICOLON ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 111
Next token is token SEMICOLON ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 112
Next token is token SEMICOLON ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 113
Next token is token SEMICOLON ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 114
Next token is token SEMICOLON ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 115
Next token is token SEMICOLON ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 116
Next token is token SEMICOLON ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 117
Next token is token SEMICOLON ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 118
Next token is token SEMICOLON ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 266
Reducing stack by rule 66 (line 175):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126
Entering state 121
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 218
Reducing stack by rule 186 (line 450):
   $1 = nterm expression ()
   $2 = token SEMICOLON ()
-> $$ = nterm expression_statement ()
Stack now 0 35 26 47 52 126
Entering state 128
Reducing stack by rule 172 (line 415):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 35 26 47 52 126
Entering state 123
Reducing stack by rule 184 (line 443):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 35 26 47 52 126
Entering state 221
Reducing stack by rule 182 (line 437):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 35 26 47 52
Entering state 126
Reading a token: Next token is token _BOOL ()
Shifting token _BOOL ()
Entering state 18
Reducing stack by rule 108 (line 253):
   $1 = token _BOOL ()
-> $$ = nterm type_specifier ()
Stack now 0 35 26 47 52 126
Entering state 28
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 85 (line 214):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 35 26 47 52 126
Entering state 54
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 24
Reducing stack by rule 131 (line 309):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 35 26 47 52 126 54
Entering state 33
Reading a token: Next token is token SEMICOLON ()
Reducing stack by rule 130 (line 304):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 35 26 47 52 126 54
Entering state 132
Next token is token SEMICOLON ()
Reducing stack by rule 93 (line 230):
   $1 = nterm declarator ()
-> $$ = nterm init_declarator ()
Stack now 0 35 26 47 52 126 54
Entering state 46
Reducing stack by rule 91 (line 224):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 35 26 47 52 126 54
Entering state 45
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 69
Reducing stack by rule 82 (line 207):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token SEMICOLON ()
-> $$ = nterm declaration ()
Stack now 0 35 26 47 52 126
Entering state 122
Reducing stack by rule 183 (line 442):
   $1 = nterm declaration ()
-> $$ = nterm block_item ()
Stack now 0 35 26 47 52 126
Entering state 221
Reducing stack by rule 182 (line 437):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 35 26 47 52
Entering state 126
Reading a token: Next token is token _COMPLEX ()
Shifting token _COMPLEX ()
Entering state 19
Reducing stack by rule 109 (line 254):
   $1 = token _COMPLEX ()
-> $$ = nterm type_specifier ()
Stack now 0 35 26 47 52 126
Entering state 28
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 85 (line 214):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 35 26 47 52 126
Entering state 54
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 24
Reducing stack by rule 131 (line 309):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 35 26 47 52 126 54
Entering state 33
Reading a token: Next token is token SEMICOLON ()
Reducing stack by rule 130 (line 304):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 35 26 47 52 126 54
Entering state 132
Next token is token SEMICOLON ()
Reducing stack by rule 93 (line 230):
   $1 = nterm declarator ()
-> $$ = nterm init_declarator ()
Stack now 0 35 26 47 52 126 54
Entering state 46
Reducing stack by rule 91 (line 224):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 35 26 47 52 126 54
Entering state 45
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 69
Reducing stack by rule 82 (line 207):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token SEMICOLON ()
-> $$ = nterm declaration ()
Stack now 0 35 26 47 52 126
Entering state 122
Reducing stack by rule 183 (line 442):
   $1 = nterm declaration ()
-> $$ = nterm block_item ()
Stack now 0 35 26 47 52 126
Entering state 221
Reducing stack by rule 182 (line 437):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 35 26 47 52
Entering state 126
Reading a token: Next token is token _IMAGINARY ()
Shifting token _IMAGINARY ()
Entering state 20
Reducing stack by rule 110 (line 255):
   $1 = token _IMAGINARY ()
-> $$ = nterm type_specifier ()
Stack now 0 35 26 47 52 126
Entering state 28
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 85 (line 214):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 35 26 47 52 126
Entering state 54
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 24
Reducing stack by rule 131 (line 309):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 35 26 47 52 126 54
Entering state 33
Reading a token: Next token is token SEMICOLON ()
Reducing stack by rule 130 (line 304):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 35 26 47 52 126 54
Entering state 132
Next token is token SEMICOLON ()
Reducing stack by rule 93 (line 230):
   $1 = nterm declarator ()
-> $$ = nterm init_declarator ()
Stack now 0 35 26 47 52 126 54
Entering state 46
Reducing stack by rule 91 (line 224):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 35 26 47 52 126 54
Entering state 45
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 69
Reducing stack by rule 82 (line 207):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token SEMICOLON ()
-> $$ = nterm declaration ()
Stack now 0 35 26 47 52 126
Entering state 122
Reducing stack by rule 183 (line 442):
   $1 = nterm declaration ()
-> $$ = nterm block_item ()
Stack now 0 35 26 47 52 126
Entering state 221
Reducing stack by rule 182 (line 437):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 35 26 47 52
Entering state 126
Reading a token: Next token is token ENUM ()
Shifting token ENUM ()
Entering state 21
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 39
Reading a token: Next token is token SEMICOLON ()
Reducing stack by rule 120 (line 276):
   $1 = token ENUM ()
   $2 = token IDENTIFIER ()
-> $$ = nterm enum_specifier ()
Stack now 0 35 26 47 52 126
Entering state 29
Reducing stack by rule 111 (line 256):
   $1 = nterm enum_specifier ()
-> $$ = nterm type_specifier ()
Stack now 0 35 26 47 52 126
Entering state 28
Next token is token SEMICOLON ()
Reducing stack by rule 85 (line 214):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 35 26 47 52 126
Entering state 54
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 44
Reducing stack by rule 81 (line 206):
   $1 = nterm declaration_specifiers ()
   $2 = token SEMICOLON ()
-> $$ = nterm declaration ()
Stack now 0 35 26 47 52 126
Entering state 122
Reducing stack by rule 183 (line 442):
   $1 = nterm declaration ()
-> $$ = nterm block_item ()
Stack now 0 35 26 47 52 126
Entering state 221
Reducing stack by rule 182 (line 437):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 35 26 47 52
Entering state 126
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 9
Reducing stack by rule 102 (line 247):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 35 26 47 52 126
Entering state 28
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 85 (line 214):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 35 26 47 52 126
Entering state 54
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 24
Reducing stack by rule 131 (line 309):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 35 26 47 52 126 54
Entering state 33
Reading a token: Next token is token EQUALITY ()
Reducing stack by rule 130 (line 304):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 35 26 47 52 126 54
Entering state 132
Next token is token EQUALITY ()
Shifting token EQUALITY ()
Entering state 71
Reading a token: Next token is token MINUS ()
Shifting token MINUS ()
Entering state 94
Reducing stack by rule 30 (line 88):
   $1 = token MINUS ()
-> $$ = nterm unary_operator ()
Stack now 0 35 26 47 52 126 54 132 71
Entering state 107
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 99
Reducing stack by rule 5 (line 49):
   $1 = token INT_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 54 132 71 107
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 54 132 71 107
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 54 132 71 107
Entering state 105
Reading a token: Next token is token SEMICOLON ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 54 132 71 107
Entering state 156
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 54 132 71 107
Entering state 198
Reducing stack by rule 24 (line 79):
   $1 = nterm unary_operator ()
   $2 = nterm cast_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 54 132 71
Entering state 106
Next token is token SEMICOLON ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 54 132 71
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 54 132 71
Entering state 109
Next token is token SEMICOLON ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 54 132 71
Entering state 110
Next token is token SEMICOLON ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 54 132 71
Entering state 111
Next token is token SEMICOLON ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 54 132 71
Entering state 112
Next token is token SEMICOLON ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 54 132 71
Entering state 113
Next token is token SEMICOLON ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 54 132 71
Entering state 114
Next token is token SEMICOLON ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 54 132 71
Entering state 115
Next token is token SEMICOLON ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 54 132 71
Entering state 116
Next token is token SEMICOLON ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 54 132 71
Entering state 117
Next token is token SEMICOLON ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 54 132 71
Entering state 118
Next token is token SEMICOLON ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 54 132 71
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 54 132 71
Entering state 152
Reducing stack by rule 158 (line 381):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 35 26 47 52 126 54 132 71
Entering state 153
Reducing stack by rule 94 (line 231):
   $1 = nterm declarator ()
   $2 = token EQUALITY ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Stack now 0 35 26 47 52 126 54
Entering state 46
Reducing stack by rule 91 (line 224):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 35 26 47 52 126 54
Entering state 45
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 69
Reducing stack by rule 82 (line 207):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token SEMICOLON ()
-> $$ = nterm declaration ()
Stack now 0 35 26 47 52 126
Entering state 122
Reducing stack by rule 183 (line 442):
   $1 = nterm declaration ()
-> $$ = nterm block_item ()
Stack now 0 35 26 47 52 126
Entering state 221
Reducing stack by rule 182 (line 437):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 35 26 47 52
Entering state 126
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 97
Reading a token: Next token is token EQUALITY ()
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126
Entering state 105
Next token is token EQUALITY ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126
Entering state 106
Next token is token EQUALITY ()
Shifting token EQUALITY ()
Entering state 196
Reducing stack by rule 67 (line 180):
   $1 = token EQUALITY ()
-> $$ = nterm assignment_operator ()
Stack now 0 35 26 47 52 126 106
Entering state 197
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 105
Reading a token: Next token is token MINUS ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 106
Next token is token MINUS ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 109
Next token is token MINUS ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 110
Next token is token MINUS ()
Shifting token MINUS ()
Entering state 203
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 99
Reducing stack by rule 5 (line 49):
   $1 = token INT_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 106 197 110 203
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 106 197 110 203
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 106 197 110 203
Entering state 105
Reading a token: Next token is token SEMICOLON ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 106 197 110 203
Entering state 156
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 106 197 110 203
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 106 197 110 203
Entering state 271
Next token is token SEMICOLON ()
Reducing stack by rule 41 (line 110):
   $1 = nterm additive_expression ()
   $2 = token MINUS ()
   $3 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 110
Next token is token SEMICOLON ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 111
Next token is token SEMICOLON ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 112
Next token is token SEMICOLON ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 113
Next token is token SEMICOLON ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 114
Next token is token SEMICOLON ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 115
Next token is token SEMICOLON ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 116
Next token is token SEMICOLON ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 117
Next token is token SEMICOLON ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 118
Next token is token SEMICOLON ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 266
Reducing stack by rule 66 (line 175):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126
Entering state 121
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 218
Reducing stack by rule 186 (line 450):
   $1 = nterm expression ()
   $2 = token SEMICOLON ()
-> $$ = nterm expression_statement ()
Stack now 0 35 26 47 52 126
Entering state 128
Reducing stack by rule 172 (line 415):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 35 26 47 52 126
Entering state 123
Reducing stack by rule 184 (line 443):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 35 26 47 52 126
Entering state 221
Reducing stack by rule 182 (line 437):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 35 26 47 52
Entering state 126
Reading a token: Next token is token FLOAT ()
Shifting token FLOAT ()
Entering state 13
Reducing stack by rule 104 (line 249):
   $1 = token FLOAT ()
-> $$ = nterm type_specifier ()
Stack now 0 35 26 47 52 126
Entering state 28
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 85 (line 214):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 35 26 47 52 126
Entering state 54
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 24
Reducing stack by rule 131 (line 309):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 35 26 47 52 126 54
Entering state 33
Reading a token: Next token is token COMMA ()
Reducing stack by rule 130 (line 304):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 35 26 47 52 126 54
Entering state 132
Next token is token COMMA ()
Reducing stack by rule 93 (line 230):
   $1 = nterm declarator ()
-> $$ = nterm init_declarator ()
Stack now 0 35 26 47 52 126 54
Entering state 46
Reducing stack by rule 91 (line 224):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 35 26 47 52 126 54
Entering state 45
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 70
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 24
Reducing stack by rule 131 (line 309):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 35 26 47 52 126 54 45 70
Entering state 33
Reading a token: Next token is token SEMICOLON ()
Reducing stack by rule 130 (line 304):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 35 26 47 52 126 54 45 70
Entering state 132
Next token is token SEMICOLON ()
Reducing stack by rule 93 (line 230):
   $1 = nterm declarator ()
-> $$ = nterm init_declarator ()
Stack now 0 35 26 47 52 126 54 45 70
Entering state 149
Reducing stack by rule 92 (line 225):
   $1 = nterm init_declarator_list ()
   $2 = token COMMA ()
   $3 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 35 26 47 52 126 54
Entering state 45
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 69
Reducing stack by rule 82 (line 207):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token SEMICOLON ()
-> $$ = nterm declaration ()
Stack now 0 35 26 47 52 126
Entering state 122
Reducing stack by rule 183 (line 442):
   $1 = nterm declaration ()
-> $$ = nterm block_item ()
Stack now 0 35 26 47 52 126
Entering state 221
Reducing stack by rule 182 (line 437):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 35 26 47 52
Entering state 126
Reading a token: Next token is token IF ()
Shifting token IF ()
Entering state 79
Reading a token: Next token is token LOB ()
Shifting token LOB ()
Entering state 162
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 105
Reading a token: Next token is token EQ_OP ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 106
Next token is token EQ_OP ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 109
Next token is token EQ_OP ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 110
Next token is token EQ_OP ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 111
Next token is token EQ_OP ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 112
Next token is token EQ_OP ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 113
Next token is token EQ_OP ()
Shifting token EQ_OP ()
Entering state 210
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 79 162 113 210
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 79 162 113 210
Entering state 105
Reading a token: Next token is token OR_OP ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 79 162 113 210
Entering state 156
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 79 162 113 210
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 79 162 113 210
Entering state 109
Next token is token OR_OP ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 79 162 113 210
Entering state 110
Next token is token OR_OP ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 79 162 113 210
Entering state 111
Next token is token OR_OP ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 79 162 113 210
Entering state 278
Next token is token OR_OP ()
Reducing stack by rule 51 (line 132):
   $1 = nterm equality_expression ()
   $2 = token EQ_OP ()
   $3 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 113
Next token is token OR_OP ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 114
Next token is token OR_OP ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 115
Next token is token OR_OP ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 116
Next token is token OR_OP ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 117
Next token is token OR_OP ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 118
Next token is token OR_OP ()
Shifting token OR_OP ()
Entering state 216
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 79 162 118 216
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 79 162 118 216
Entering state 105
Reading a token: Next token is token LE_OP ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 79 162 118 216
Entering state 156
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 79 162 118 216
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 79 162 118 216
Entering state 109
Next token is token LE_OP ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 79 162 118 216
Entering state 110
Next token is token LE_OP ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 79 162 118 216
Entering state 111
Next token is token LE_OP ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 79 162 118 216
Entering state 112
Next token is token LE_OP ()
Shifting token LE_OP ()
Entering state 206
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 99
Reducing stack by rule 5 (line 49):
   $1 = token INT_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 79 162 118 216 112 206
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 79 162 118 216 112 206
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 79 162 118 216 112 206
Entering state 105
Reading a token: Next token is token ROB ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 79 162 118 216 112 206
Entering state 156
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 79 162 118 216 112 206
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 79 162 118 216 112 206
Entering state 109
Next token is token ROB ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 79 162 118 216 112 206
Entering state 110
Next token is token ROB ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 79 162 118 216 112 206
Entering state 274
Next token is token ROB ()
Reducing stack by rule 48 (line 125):
   $1 = nterm relational_expression ()
   $2 = token LE_OP ()
   $3 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 79 162 118 216
Entering state 112
Next token is token ROB ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 79 162 118 216
Entering state 113
Next token is token ROB ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 79 162 118 216
Entering state 114
Next token is token ROB ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 79 162 118 216
Entering state 115
Next token is token ROB ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 79 162 118 216
Entering state 116
Next token is token ROB ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 79 162 118 216
Entering state 284
Next token is token ROB ()
Reducing stack by rule 62 (line 163):
   $1 = nterm logical_or_expression ()
   $2 = token OR_OP ()
   $3 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 118
Next token is token ROB ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 246
Next token is token ROB ()
Shifting token ROB ()
Entering state 303
Reading a token: Next token is token RETURN ()
Shifting token RETURN ()
Entering state 85
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 99
Reducing stack by rule 5 (line 49):
   $1 = token INT_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 79 162 246 303 85
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 85
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 85
Entering state 105
Reading a token: Next token is token SEMICOLON ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 85
Entering state 106
Next token is token SEMICOLON ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 85
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 85
Entering state 109
Next token is token SEMICOLON ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 85
Entering state 110
Next token is token SEMICOLON ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 85
Entering state 111
Next token is token SEMICOLON ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 85
Entering state 112
Next token is token SEMICOLON ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 85
Entering state 113
Next token is token SEMICOLON ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 85
Entering state 114
Next token is token SEMICOLON ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 85
Entering state 115
Next token is token SEMICOLON ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 85
Entering state 116
Next token is token SEMICOLON ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 85
Entering state 117
Next token is token SEMICOLON ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 85
Entering state 118
Next token is token SEMICOLON ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 85
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 85
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 85
Entering state 170
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 253
Reducing stack by rule 200 (line 478):
   $1 = token RETURN ()
   $2 = nterm expression ()
   $3 = token SEMICOLON ()
-> $$ = nterm jump_statement ()
Stack now 0 35 26 47 52 126 79 162 246 303
Entering state 131
Reducing stack by rule 175 (line 418):
   $1 = nterm jump_statement ()
-> $$ = nterm statement ()
Stack now 0 35 26 47 52 126 79 162 246 303
Entering state 322
Reading a token: Next token is token IF ()
Reducing stack by rule 187 (line 455):
   $1 = token IF ()
   $2 = token LOB ()
   $3 = nterm expression ()
   $4 = token ROB ()
   $5 = nterm statement ()
-> $$ = nterm selection_statement ()
Stack now 0 35 26 47 52 126
Entering state 129
Reducing stack by rule 173 (line 416):
   $1 = nterm selection_statement ()
-> $$ = nterm statement ()
Stack now 0 35 26 47 52 126
Entering state 123
Reducing stack by rule 184 (line 443):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 35 26 47 52 126
Entering state 221
Reducing stack by rule 182 (line 437):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 35 26 47 52
Entering state 126
Next token is token IF ()
Shifting token IF ()
Entering state 79
Reading a token: Next token is token LOB ()
Shifting token LOB ()
Entering state 162
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 105
Reading a token: Next token is token EQ_OP ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 106
Next token is token EQ_OP ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 109
Next token is token EQ_OP ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 110
Next token is token EQ_OP ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 111
Next token is token EQ_OP ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 112
Next token is token EQ_OP ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 113
Next token is token EQ_OP ()
Shifting token EQ_OP ()
Entering state 210
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 99
Reducing stack by rule 5 (line 49):
   $1 = token INT_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 79 162 113 210
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 79 162 113 210
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 79 162 113 210
Entering state 105
Reading a token: Next token is token ROB ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 79 162 113 210
Entering state 156
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 79 162 113 210
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 79 162 113 210
Entering state 109
Next token is token ROB ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 79 162 113 210
Entering state 110
Next token is token ROB ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 79 162 113 210
Entering state 111
Next token is token ROB ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 79 162 113 210
Entering state 278
Next token is token ROB ()
Reducing stack by rule 51 (line 132):
   $1 = nterm equality_expression ()
   $2 = token EQ_OP ()
   $3 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 113
Next token is token ROB ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 114
Next token is token ROB ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 115
Next token is token ROB ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 116
Next token is token ROB ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 117
Next token is token ROB ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 118
Next token is token ROB ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126 79 162
Entering state 246
Next token is token ROB ()
Shifting token ROB ()
Entering state 303
Reading a token: Next token is token RETURN ()
Shifting token RETURN ()
Entering state 85
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 99
Reducing stack by rule 5 (line 49):
   $1 = token INT_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 79 162 246 303 85
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 85
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 85
Entering state 105
Reading a token: Next token is token SEMICOLON ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 85
Entering state 106
Next token is token SEMICOLON ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 85
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 85
Entering state 109
Next token is token SEMICOLON ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 85
Entering state 110
Next token is token SEMICOLON ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 85
Entering state 111
Next token is token SEMICOLON ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 85
Entering state 112
Next token is token SEMICOLON ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 85
Entering state 113
Next token is token SEMICOLON ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 85
Entering state 114
Next token is token SEMICOLON ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 85
Entering state 115
Next token is token SEMICOLON ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 85
Entering state 116
Next token is token SEMICOLON ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 85
Entering state 117
Next token is token SEMICOLON ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 85
Entering state 118
Next token is token SEMICOLON ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 85
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 85
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126 79 162 246 303 85
Entering state 170
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 253
Reducing stack by rule 200 (line 478):
   $1 = token RETURN ()
   $2 = nterm expression ()
   $3 = token SEMICOLON ()
-> $$ = nterm jump_statement ()
Stack now 0 35 26 47 52 126 79 162 246 303
Entering state 131
Reducing stack by rule 175 (line 418):
   $1 = nterm jump_statement ()
-> $$ = nterm statement ()
Stack now 0 35 26 47 52 126 79 162 246 303
Entering state 322
Reading a token: Next token is token INT ()
Reducing stack by rule 187 (line 455):
   $1 = token IF ()
   $2 = token LOB ()
   $3 = nterm expression ()
   $4 = token ROB ()
   $5 = nterm statement ()
-> $$ = nterm selection_statement ()
Stack now 0 35 26 47 52 126
Entering state 129
Reducing stack by rule 173 (line 416):
   $1 = nterm selection_statement ()
-> $$ = nterm statement ()
Stack now 0 35 26 47 52 126
Entering state 123
Reducing stack by rule 184 (line 443):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 35 26 47 52 126
Entering state 221
Reducing stack by rule 182 (line 437):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 35 26 47 52
Entering state 126
Next token is token INT ()
Shifting token INT ()
Entering state 9
Reducing stack by rule 102 (line 247):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 35 26 47 52 126
Entering state 28
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 85 (line 214):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 35 26 47 52 126
Entering state 54
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 24
Reducing stack by rule 131 (line 309):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 35 26 47 52 126 54
Entering state 33
Reading a token: Next token is token EQUALITY ()
Reducing stack by rule 130 (line 304):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 35 26 47 52 126 54
Entering state 132
Next token is token EQUALITY ()
Shifting token EQUALITY ()
Entering state 71
Reading a token: Next token is token MINUS ()
Shifting token MINUS ()
Entering state 94
Reducing stack by rule 30 (line 88):
   $1 = token MINUS ()
-> $$ = nterm unary_operator ()
Stack now 0 35 26 47 52 126 54 132 71
Entering state 107
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 99
Reducing stack by rule 5 (line 49):
   $1 = token INT_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 54 132 71 107
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 54 132 71 107
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 54 132 71 107
Entering state 105
Reading a token: Next token is token SEMICOLON ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 54 132 71 107
Entering state 156
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 54 132 71 107
Entering state 198
Reducing stack by rule 24 (line 79):
   $1 = nterm unary_operator ()
   $2 = nterm cast_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 54 132 71
Entering state 106
Next token is token SEMICOLON ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 54 132 71
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 54 132 71
Entering state 109
Next token is token SEMICOLON ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 54 132 71
Entering state 110
Next token is token SEMICOLON ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 54 132 71
Entering state 111
Next token is token SEMICOLON ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 54 132 71
Entering state 112
Next token is token SEMICOLON ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 54 132 71
Entering state 113
Next token is token SEMICOLON ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 54 132 71
Entering state 114
Next token is token SEMICOLON ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 54 132 71
Entering state 115
Next token is token SEMICOLON ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 54 132 71
Entering state 116
Next token is token SEMICOLON ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 54 132 71
Entering state 117
Next token is token SEMICOLON ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 54 132 71
Entering state 118
Next token is token SEMICOLON ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 54 132 71
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 54 132 71
Entering state 152
Reducing stack by rule 158 (line 381):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 35 26 47 52 126 54 132 71
Entering state 153
Reducing stack by rule 94 (line 231):
   $1 = nterm declarator ()
   $2 = token EQUALITY ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Stack now 0 35 26 47 52 126 54
Entering state 46
Reducing stack by rule 91 (line 224):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 35 26 47 52 126 54
Entering state 45
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 69
Reducing stack by rule 82 (line 207):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token SEMICOLON ()
-> $$ = nterm declaration ()
Stack now 0 35 26 47 52 126
Entering state 122
Reducing stack by rule 183 (line 442):
   $1 = nterm declaration ()
-> $$ = nterm block_item ()
Stack now 0 35 26 47 52 126
Entering state 221
Reducing stack by rule 182 (line 437):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 35 26 47 52
Entering state 126
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 9
Reducing stack by rule 102 (line 247):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 35 26 47 52 126
Entering state 28
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 85 (line 214):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 35 26 47 52 126
Entering state 54
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 24
Reducing stack by rule 131 (line 309):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 35 26 47 52 126 54
Entering state 33
Reading a token: Next token is token LSB ()
Shifting token LSB ()
Entering state 57
Reading a token: Next token is token RSB ()
Reducing stack by rule 140 (line 324):
-> $$ = nterm type_qualifier_list_opt ()
Stack now 0 35 26 47 52 126 54 33 57
Entering state 136
Next token is token RSB ()
Reducing stack by rule 142 (line 330):
-> $$ = nterm assignment_expression_opt ()
Stack now 0 35 26 47 52 126 54 33 57 136
Entering state 225
Next token is token RSB ()
Shifting token RSB ()
Entering state 289
Reducing stack by rule 133 (line 311):
   $1 = nterm direct_declarator ()
   $2 = token LSB ()
   $3 = nterm type_qualifier_list_opt ()
   $4 = nterm assignment_expression_opt ()
   $5 = token RSB ()
-> $$ = nterm direct_declarator ()
Stack now 0 35 26 47 52 126 54
Entering state 33
Reading a token: Next token is token EQUALITY ()
Reducing stack by rule 130 (line 304):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 35 26 47 52 126 54
Entering state 132
Next token is token EQUALITY ()
Shifting token EQUALITY ()
Entering state 71
Reading a token: Next token is token LCB ()
Shifting token LCB ()
Entering state 150
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 99
Reducing stack by rule 5 (line 49):
   $1 = token INT_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 54 132 71 150
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150
Entering state 105
Reading a token: Next token is token COMMA ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150
Entering state 106
Next token is token COMMA ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150
Entering state 109
Next token is token COMMA ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150
Entering state 110
Next token is token COMMA ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150
Entering state 111
Next token is token COMMA ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150
Entering state 112
Next token is token COMMA ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150
Entering state 113
Next token is token COMMA ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150
Entering state 114
Next token is token COMMA ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150
Entering state 115
Next token is token COMMA ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150
Entering state 116
Next token is token COMMA ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150
Entering state 117
Next token is token COMMA ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150
Entering state 118
Next token is token COMMA ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150
Entering state 152
Reducing stack by rule 158 (line 381):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 35 26 47 52 126 54 132 71 150
Entering state 238
Reducing stack by rule 161 (line 388):
   $1 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 35 26 47 52 126 54 132 71 150
Entering state 239
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 296
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 99
Reducing stack by rule 5 (line 49):
   $1 = token INT_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 105
Reading a token: Next token is token COMMA ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 106
Next token is token COMMA ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 109
Next token is token COMMA ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 110
Next token is token COMMA ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 111
Next token is token COMMA ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 112
Next token is token COMMA ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 113
Next token is token COMMA ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 114
Next token is token COMMA ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 115
Next token is token COMMA ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 116
Next token is token COMMA ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 117
Next token is token COMMA ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 118
Next token is token COMMA ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 152
Reducing stack by rule 158 (line 381):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 319
Reducing stack by rule 163 (line 390):
   $1 = nterm initializer_list ()
   $2 = token COMMA ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 35 26 47 52 126 54 132 71 150
Entering state 239
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 296
Reading a token: Next token is token MINUS ()
Shifting token MINUS ()
Entering state 94
Reducing stack by rule 30 (line 88):
   $1 = token MINUS ()
-> $$ = nterm unary_operator ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 107
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 99
Reducing stack by rule 5 (line 49):
   $1 = token INT_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296 107
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296 107
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296 107
Entering state 105
Reading a token: Next token is token COMMA ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296 107
Entering state 156
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296 107
Entering state 198
Reducing stack by rule 24 (line 79):
   $1 = nterm unary_operator ()
   $2 = nterm cast_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 106
Next token is token COMMA ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 109
Next token is token COMMA ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 110
Next token is token COMMA ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 111
Next token is token COMMA ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 112
Next token is token COMMA ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 113
Next token is token COMMA ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 114
Next token is token COMMA ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 115
Next token is token COMMA ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 116
Next token is token COMMA ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 117
Next token is token COMMA ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 118
Next token is token COMMA ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 152
Reducing stack by rule 158 (line 381):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 319
Reducing stack by rule 163 (line 390):
   $1 = nterm initializer_list ()
   $2 = token COMMA ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 35 26 47 52 126 54 132 71 150
Entering state 239
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 296
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 99
Reducing stack by rule 5 (line 49):
   $1 = token INT_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 105
Reading a token: Next token is token COMMA ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 106
Next token is token COMMA ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 109
Next token is token COMMA ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 110
Next token is token COMMA ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 111
Next token is token COMMA ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 112
Next token is token COMMA ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 113
Next token is token COMMA ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 114
Next token is token COMMA ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 115
Next token is token COMMA ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 116
Next token is token COMMA ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 117
Next token is token COMMA ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 118
Next token is token COMMA ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 152
Reducing stack by rule 158 (line 381):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 319
Reducing stack by rule 163 (line 390):
   $1 = nterm initializer_list ()
   $2 = token COMMA ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 35 26 47 52 126 54 132 71 150
Entering state 239
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 296
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 99
Reducing stack by rule 5 (line 49):
   $1 = token INT_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 105
Reading a token: Next token is token RCB ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 106
Next token is token RCB ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 109
Next token is token RCB ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 110
Next token is token RCB ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 111
Next token is token RCB ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 112
Next token is token RCB ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 113
Next token is token RCB ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 114
Next token is token RCB ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 115
Next token is token RCB ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 116
Next token is token RCB ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 117
Next token is token RCB ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 118
Next token is token RCB ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 152
Reducing stack by rule 158 (line 381):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 319
Reducing stack by rule 163 (line 390):
   $1 = nterm initializer_list ()
   $2 = token COMMA ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 35 26 47 52 126 54 132 71 150
Entering state 239
Next token is token RCB ()
Shifting token RCB ()
Entering state 297
Reducing stack by rule 159 (line 382):
   $1 = token LCB ()
   $2 = nterm initializer_list ()
   $3 = token RCB ()
-> $$ = nterm initializer ()
Stack now 0 35 26 47 52 126 54 132 71
Entering state 153
Reducing stack by rule 94 (line 231):
   $1 = nterm declarator ()
   $2 = token EQUALITY ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Stack now 0 35 26 47 52 126 54
Entering state 46
Reducing stack by rule 91 (line 224):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 35 26 47 52 126 54
Entering state 45
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 69
Reducing stack by rule 82 (line 207):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token SEMICOLON ()
-> $$ = nterm declaration ()
Stack now 0 35 26 47 52 126
Entering state 122
Reducing stack by rule 183 (line 442):
   $1 = nterm declaration ()
-> $$ = nterm block_item ()
Stack now 0 35 26 47 52 126
Entering state 221
Reducing stack by rule 182 (line 437):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 35 26 47 52
Entering state 126
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 9
Reducing stack by rule 102 (line 247):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 35 26 47 52 126
Entering state 28
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 85 (line 214):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 35 26 47 52 126
Entering state 54
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 24
Reducing stack by rule 131 (line 309):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 35 26 47 52 126 54
Entering state 33
Reading a token: Next token is token LSB ()
Shifting token LSB ()
Entering state 57
Reading a token: Next token is token RSB ()
Reducing stack by rule 140 (line 324):
-> $$ = nterm type_qualifier_list_opt ()
Stack now 0 35 26 47 52 126 54 33 57
Entering state 136
Next token is token RSB ()
Reducing stack by rule 142 (line 330):
-> $$ = nterm assignment_expression_opt ()
Stack now 0 35 26 47 52 126 54 33 57 136
Entering state 225
Next token is token RSB ()
Shifting token RSB ()
Entering state 289
Reducing stack by rule 133 (line 311):
   $1 = nterm direct_declarator ()
   $2 = token LSB ()
   $3 = nterm type_qualifier_list_opt ()
   $4 = nterm assignment_expression_opt ()
   $5 = token RSB ()
-> $$ = nterm direct_declarator ()
Stack now 0 35 26 47 52 126 54
Entering state 33
Reading a token: Next token is token EQUALITY ()
Reducing stack by rule 130 (line 304):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 35 26 47 52 126 54
Entering state 132
Next token is token EQUALITY ()
Shifting token EQUALITY ()
Entering state 71
Reading a token: Next token is token LCB ()
Shifting token LCB ()
Entering state 150
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 99
Reducing stack by rule 5 (line 49):
   $1 = token INT_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 54 132 71 150
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150
Entering state 105
Reading a token: Next token is token COMMA ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150
Entering state 106
Next token is token COMMA ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150
Entering state 109
Next token is token COMMA ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150
Entering state 110
Next token is token COMMA ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150
Entering state 111
Next token is token COMMA ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150
Entering state 112
Next token is token COMMA ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150
Entering state 113
Next token is token COMMA ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150
Entering state 114
Next token is token COMMA ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150
Entering state 115
Next token is token COMMA ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150
Entering state 116
Next token is token COMMA ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150
Entering state 117
Next token is token COMMA ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150
Entering state 118
Next token is token COMMA ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150
Entering state 152
Reducing stack by rule 158 (line 381):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 35 26 47 52 126 54 132 71 150
Entering state 238
Reducing stack by rule 161 (line 388):
   $1 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 35 26 47 52 126 54 132 71 150
Entering state 239
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 296
Reading a token: Next token is token MINUS ()
Shifting token MINUS ()
Entering state 94
Reducing stack by rule 30 (line 88):
   $1 = token MINUS ()
-> $$ = nterm unary_operator ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 107
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 99
Reducing stack by rule 5 (line 49):
   $1 = token INT_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296 107
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296 107
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296 107
Entering state 105
Reading a token: Next token is token COMMA ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296 107
Entering state 156
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296 107
Entering state 198
Reducing stack by rule 24 (line 79):
   $1 = nterm unary_operator ()
   $2 = nterm cast_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 106
Next token is token COMMA ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 109
Next token is token COMMA ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 110
Next token is token COMMA ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 111
Next token is token COMMA ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 112
Next token is token COMMA ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 113
Next token is token COMMA ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 114
Next token is token COMMA ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 115
Next token is token COMMA ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 116
Next token is token COMMA ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 117
Next token is token COMMA ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 118
Next token is token COMMA ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 152
Reducing stack by rule 158 (line 381):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 319
Reducing stack by rule 163 (line 390):
   $1 = nterm initializer_list ()
   $2 = token COMMA ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 35 26 47 52 126 54 132 71 150
Entering state 239
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 296
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 99
Reducing stack by rule 5 (line 49):
   $1 = token INT_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 105
Reading a token: Next token is token COMMA ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 106
Next token is token COMMA ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 109
Next token is token COMMA ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 110
Next token is token COMMA ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 111
Next token is token COMMA ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 112
Next token is token COMMA ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 113
Next token is token COMMA ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 114
Next token is token COMMA ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 115
Next token is token COMMA ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 116
Next token is token COMMA ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 117
Next token is token COMMA ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 118
Next token is token COMMA ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 152
Reducing stack by rule 158 (line 381):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 319
Reducing stack by rule 163 (line 390):
   $1 = nterm initializer_list ()
   $2 = token COMMA ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 35 26 47 52 126 54 132 71 150
Entering state 239
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 296
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 99
Reducing stack by rule 5 (line 49):
   $1 = token INT_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 105
Reading a token: Next token is token COMMA ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 106
Next token is token COMMA ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 109
Next token is token COMMA ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 110
Next token is token COMMA ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 111
Next token is token COMMA ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 112
Next token is token COMMA ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 113
Next token is token COMMA ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 114
Next token is token COMMA ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 115
Next token is token COMMA ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 116
Next token is token COMMA ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 117
Next token is token COMMA ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 118
Next token is token COMMA ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 152
Reducing stack by rule 158 (line 381):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 319
Reducing stack by rule 163 (line 390):
   $1 = nterm initializer_list ()
   $2 = token COMMA ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 35 26 47 52 126 54 132 71 150
Entering state 239
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 296
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 99
Reducing stack by rule 5 (line 49):
   $1 = token INT_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 105
Reading a token: Next token is token RCB ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 106
Next token is token RCB ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 109
Next token is token RCB ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 110
Next token is token RCB ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 111
Next token is token RCB ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 112
Next token is token RCB ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 113
Next token is token RCB ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 114
Next token is token RCB ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 115
Next token is token RCB ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 116
Next token is token RCB ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 117
Next token is token RCB ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 118
Next token is token RCB ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 152
Reducing stack by rule 158 (line 381):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 35 26 47 52 126 54 132 71 150 239 296
Entering state 319
Reducing stack by rule 163 (line 390):
   $1 = nterm initializer_list ()
   $2 = token COMMA ()
   $3 = nterm initializer ()
-> $$ = nterm initializer_list ()
Stack now 0 35 26 47 52 126 54 132 71 150
Entering state 239
Next token is token RCB ()
Shifting token RCB ()
Entering state 297
Reducing stack by rule 159 (line 382):
   $1 = token LCB ()
   $2 = nterm initializer_list ()
   $3 = token RCB ()
-> $$ = nterm initializer ()
Stack now 0 35 26 47 52 126 54 132 71
Entering state 153
Reducing stack by rule 94 (line 231):
   $1 = nterm declarator ()
   $2 = token EQUALITY ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Stack now 0 35 26 47 52 126 54
Entering state 46
Reducing stack by rule 91 (line 224):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 35 26 47 52 126 54
Entering state 45
Reading a token: Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 69
Reducing stack by rule 82 (line 207):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token SEMICOLON ()
-> $$ = nterm declaration ()
Stack now 0 35 26 47 52 126
Entering state 122
Reducing stack by rule 183 (line 442):
   $1 = nterm declaration ()
-> $$ = nterm block_item ()
Stack now 0 35 26 47 52 126
Entering state 221
Reducing stack by rule 182 (line 437):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 35 26 47 52
Entering state 126
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 9
Reducing stack by rule 102 (line 247):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 35 26 47 52 126
Entering state 28
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 85 (line 214):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 35 26 47 52 126
Entering state 54
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 24
Reducing stack by rule 131 (line 309):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 35 26 47 52 126 54
Entering state 33
Reading a token: Next token is token LSB ()
Shifting token LSB ()
Entering state 57
Reading a token: Next token is token INT_CONSTANT ()
Reducing stack by rule 140 (line 324):
-> $$ = nterm type_qualifier_list_opt ()
Stack now 0 35 26 47 52 126 54 33 57
Entering state 136
Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 99
Reducing stack by rule 5 (line 49):
   $1 = token INT_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 54 33 57 136
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 54 33 57 136
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 54 33 57 136
Entering state 105
Reading a token: Next token is token RSB ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 54 33 57 136
Entering state 106
Next token is token RSB ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 54 33 57 136
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 54 33 57 136
Entering state 109
Next token is token RSB ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 54 33 57 136
Entering state 110
Next token is token RSB ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 54 33 57 136
Entering state 111
Next token is token RSB ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 54 33 57 136
Entering state 112
Next token is token RSB ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 54 33 57 136
Entering state 113
Next token is token RSB ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 54 33 57 136
Entering state 114
Next token is token RSB ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 54 33 57 136
Entering state 115
Next token is token RSB ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 54 33 57 136
Entering state 116
Next token is token RSB ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 54 33 57 136
Entering state 117
Next token is token RSB ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 54 33 57 136
Entering state 118
Next token is token RSB ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 54 33 57 136
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 54 33 57 136
Entering state 224
Reducing stack by rule 141 (line 328):
   $1 = nterm assignment_expression ()
-> $$ = nterm assignment_expression_opt ()
Stack now 0 35 26 47 52 126 54 33 57 136
Entering state 225
Next token is token RSB ()
Shifting token RSB ()
Entering state 289
Reducing stack by rule 133 (line 311):
   $1 = nterm direct_declarator ()
   $2 = token LSB ()
   $3 = nterm type_qualifier_list_opt ()
   $4 = nterm assignment_expression_opt ()
   $5 = token RSB ()
-> $$ = nterm direct_declarator ()
Stack now 0 35 26 47 52 126 54
Entering state 33
Reading a token: Next token is token LSB ()
Shifting token LSB ()
Entering state 57
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 140 (line 324):
-> $$ = nterm type_qualifier_list_opt ()
Stack now 0 35 26 47 52 126 54 33 57
Entering state 136
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 54 33 57 136
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 54 33 57 136
Entering state 105
Reading a token: Next token is token PLUS ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 54 33 57 136
Entering state 106
Next token is token PLUS ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 54 33 57 136
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 54 33 57 136
Entering state 109
Next token is token PLUS ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 54 33 57 136
Entering state 110
Next token is token PLUS ()
Shifting token PLUS ()
Entering state 202
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 99
Reducing stack by rule 5 (line 49):
   $1 = token INT_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 54 33 57 136 110 202
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 54 33 57 136 110 202
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 54 33 57 136 110 202
Entering state 105
Reading a token: Next token is token RSB ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 54 33 57 136 110 202
Entering state 156
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 54 33 57 136 110 202
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 54 33 57 136 110 202
Entering state 270
Next token is token RSB ()
Reducing stack by rule 40 (line 109):
   $1 = nterm additive_expression ()
   $2 = token PLUS ()
   $3 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 54 33 57 136
Entering state 110
Next token is token RSB ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 54 33 57 136
Entering state 111
Next token is token RSB ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 54 33 57 136
Entering state 112
Next token is token RSB ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 54 33 57 136
Entering state 113
Next token is token RSB ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 54 33 57 136
Entering state 114
Next token is token RSB ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 54 33 57 136
Entering state 115
Next token is token RSB ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 54 33 57 136
Entering state 116
Next token is token RSB ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 54 33 57 136
Entering state 117
Next token is token RSB ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 54 33 57 136
Entering state 118
Next token is token RSB ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 54 33 57 136
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 54 33 57 136
Entering state 224
Reducing stack by rule 141 (line 328):
   $1 = nterm assignment_expression ()
-> $$ = nterm assignment_expression_opt ()
Stack now 0 35 26 47 52 126 54 33 57 136
Entering state 225
Next token is token RSB ()
Shifting token RSB ()
Entering state 289
Reducing stack by rule 133 (line 311):
   $1 = nterm direct_declarator ()
   $2 = token LSB ()
   $3 = nterm type_qualifier_list_opt ()
   $4 = nterm assignment_expression_opt ()
   $5 = token RSB ()
-> $$ = nterm direct_declarator ()
Stack now 0 35 26 47 52 126 54
Entering state 33
Reading a token: Next token is token SEMICOLON ()
Reducing stack by rule 130 (line 304):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 35 26 47 52 126 54
Entering state 132
Next token is token SEMICOLON ()
Reducing stack by rule 93 (line 230):
   $1 = nterm declarator ()
-> $$ = nterm init_declarator ()
Stack now 0 35 26 47 52 126 54
Entering state 46
Reducing stack by rule 91 (line 224):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 35 26 47 52 126 54
Entering state 45
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 69
Reducing stack by rule 82 (line 207):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token SEMICOLON ()
-> $$ = nterm declaration ()
Stack now 0 35 26 47 52 126
Entering state 122
Reducing stack by rule 183 (line 442):
   $1 = nterm declaration ()
-> $$ = nterm block_item ()
Stack now 0 35 26 47 52 126
Entering state 221
Reducing stack by rule 182 (line 437):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 35 26 47 52
Entering state 126
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 9
Reducing stack by rule 102 (line 247):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 35 26 47 52 126
Entering state 28
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 85 (line 214):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 35 26 47 52 126
Entering state 54
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 24
Reducing stack by rule 131 (line 309):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 35 26 47 52 126 54
Entering state 33
Reading a token: Next token is token EQUALITY ()
Reducing stack by rule 130 (line 304):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 35 26 47 52 126 54
Entering state 132
Next token is token EQUALITY ()
Shifting token EQUALITY ()
Entering state 71
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 99
Reducing stack by rule 5 (line 49):
   $1 = token INT_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 54 132 71
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 54 132 71
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 54 132 71
Entering state 105
Reading a token: Next token is token COMMA ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 54 132 71
Entering state 106
Next token is token COMMA ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 54 132 71
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 54 132 71
Entering state 109
Next token is token COMMA ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 54 132 71
Entering state 110
Next token is token COMMA ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 54 132 71
Entering state 111
Next token is token COMMA ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 54 132 71
Entering state 112
Next token is token COMMA ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 54 132 71
Entering state 113
Next token is token COMMA ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 54 132 71
Entering state 114
Next token is token COMMA ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 54 132 71
Entering state 115
Next token is token COMMA ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 54 132 71
Entering state 116
Next token is token COMMA ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 54 132 71
Entering state 117
Next token is token COMMA ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 54 132 71
Entering state 118
Next token is token COMMA ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 54 132 71
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 54 132 71
Entering state 152
Reducing stack by rule 158 (line 381):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 35 26 47 52 126 54 132 71
Entering state 153
Reducing stack by rule 94 (line 231):
   $1 = nterm declarator ()
   $2 = token EQUALITY ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Stack now 0 35 26 47 52 126 54
Entering state 46
Reducing stack by rule 91 (line 224):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 35 26 47 52 126 54
Entering state 45
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 70
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 24
Reducing stack by rule 131 (line 309):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 35 26 47 52 126 54 45 70
Entering state 33
Reading a token: Next token is token EQUALITY ()
Reducing stack by rule 130 (line 304):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 35 26 47 52 126 54 45 70
Entering state 132
Next token is token EQUALITY ()
Shifting token EQUALITY ()
Entering state 71
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 99
Reducing stack by rule 5 (line 49):
   $1 = token INT_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 105
Reading a token: Next token is token COMMA ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 106
Next token is token COMMA ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 109
Next token is token COMMA ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 110
Next token is token COMMA ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 111
Next token is token COMMA ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 112
Next token is token COMMA ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 113
Next token is token COMMA ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 114
Next token is token COMMA ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 115
Next token is token COMMA ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 116
Next token is token COMMA ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 117
Next token is token COMMA ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 118
Next token is token COMMA ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 152
Reducing stack by rule 158 (line 381):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 153
Reducing stack by rule 94 (line 231):
   $1 = nterm declarator ()
   $2 = token EQUALITY ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Stack now 0 35 26 47 52 126 54 45 70
Entering state 149
Reducing stack by rule 92 (line 225):
   $1 = nterm init_declarator_list ()
   $2 = token COMMA ()
   $3 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 35 26 47 52 126 54
Entering state 45
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 70
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 24
Reducing stack by rule 131 (line 309):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 35 26 47 52 126 54 45 70
Entering state 33
Reading a token: Next token is token EQUALITY ()
Reducing stack by rule 130 (line 304):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 35 26 47 52 126 54 45 70
Entering state 132
Next token is token EQUALITY ()
Shifting token EQUALITY ()
Entering state 71
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 99
Reducing stack by rule 5 (line 49):
   $1 = token INT_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 105
Reading a token: Next token is token COMMA ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 106
Next token is token COMMA ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 109
Next token is token COMMA ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 110
Next token is token COMMA ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 111
Next token is token COMMA ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 112
Next token is token COMMA ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 113
Next token is token COMMA ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 114
Next token is token COMMA ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 115
Next token is token COMMA ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 116
Next token is token COMMA ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 117
Next token is token COMMA ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 118
Next token is token COMMA ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 152
Reducing stack by rule 158 (line 381):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 153
Reducing stack by rule 94 (line 231):
   $1 = nterm declarator ()
   $2 = token EQUALITY ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Stack now 0 35 26 47 52 126 54 45 70
Entering state 149
Reducing stack by rule 92 (line 225):
   $1 = nterm init_declarator_list ()
   $2 = token COMMA ()
   $3 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 35 26 47 52 126 54
Entering state 45
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 70
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 24
Reducing stack by rule 131 (line 309):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 35 26 47 52 126 54 45 70
Entering state 33
Reading a token: Next token is token EQUALITY ()
Reducing stack by rule 130 (line 304):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 35 26 47 52 126 54 45 70
Entering state 132
Next token is token EQUALITY ()
Shifting token EQUALITY ()
Entering state 71
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 99
Reducing stack by rule 5 (line 49):
   $1 = token INT_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 105
Reading a token: Next token is token COMMA ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 106
Next token is token COMMA ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 109
Next token is token COMMA ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 110
Next token is token COMMA ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 111
Next token is token COMMA ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 112
Next token is token COMMA ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 113
Next token is token COMMA ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 114
Next token is token COMMA ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 115
Next token is token COMMA ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 116
Next token is token COMMA ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 117
Next token is token COMMA ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 118
Next token is token COMMA ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 152
Reducing stack by rule 158 (line 381):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 153
Reducing stack by rule 94 (line 231):
   $1 = nterm declarator ()
   $2 = token EQUALITY ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Stack now 0 35 26 47 52 126 54 45 70
Entering state 149
Reducing stack by rule 92 (line 225):
   $1 = nterm init_declarator_list ()
   $2 = token COMMA ()
   $3 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 35 26 47 52 126 54
Entering state 45
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 70
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 24
Reducing stack by rule 131 (line 309):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 35 26 47 52 126 54 45 70
Entering state 33
Reading a token: Next token is token EQUALITY ()
Reducing stack by rule 130 (line 304):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 35 26 47 52 126 54 45 70
Entering state 132
Next token is token EQUALITY ()
Shifting token EQUALITY ()
Entering state 71
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 99
Reducing stack by rule 5 (line 49):
   $1 = token INT_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 105
Reading a token: Next token is token COMMA ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 106
Next token is token COMMA ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 109
Next token is token COMMA ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 110
Next token is token COMMA ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 111
Next token is token COMMA ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 112
Next token is token COMMA ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 113
Next token is token COMMA ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 114
Next token is token COMMA ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 115
Next token is token COMMA ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 116
Next token is token COMMA ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 117
Next token is token COMMA ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 118
Next token is token COMMA ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 152
Reducing stack by rule 158 (line 381):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 153
Reducing stack by rule 94 (line 231):
   $1 = nterm declarator ()
   $2 = token EQUALITY ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Stack now 0 35 26 47 52 126 54 45 70
Entering state 149
Reducing stack by rule 92 (line 225):
   $1 = nterm init_declarator_list ()
   $2 = token COMMA ()
   $3 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 35 26 47 52 126 54
Entering state 45
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 70
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 24
Reducing stack by rule 131 (line 309):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 35 26 47 52 126 54 45 70
Entering state 33
Reading a token: Next token is token EQUALITY ()
Reducing stack by rule 130 (line 304):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 35 26 47 52 126 54 45 70
Entering state 132
Next token is token EQUALITY ()
Shifting token EQUALITY ()
Entering state 71
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 99
Reducing stack by rule 5 (line 49):
   $1 = token INT_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 105
Reading a token: Next token is token SEMICOLON ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 106
Next token is token SEMICOLON ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 109
Next token is token SEMICOLON ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 110
Next token is token SEMICOLON ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 111
Next token is token SEMICOLON ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 112
Next token is token SEMICOLON ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 113
Next token is token SEMICOLON ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 114
Next token is token SEMICOLON ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 115
Next token is token SEMICOLON ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 116
Next token is token SEMICOLON ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 117
Next token is token SEMICOLON ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 118
Next token is token SEMICOLON ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 152
Reducing stack by rule 158 (line 381):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 153
Reducing stack by rule 94 (line 231):
   $1 = nterm declarator ()
   $2 = token EQUALITY ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Stack now 0 35 26 47 52 126 54 45 70
Entering state 149
Reducing stack by rule 92 (line 225):
   $1 = nterm init_declarator_list ()
   $2 = token COMMA ()
   $3 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 35 26 47 52 126 54
Entering state 45
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 69
Reducing stack by rule 82 (line 207):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token SEMICOLON ()
-> $$ = nterm declaration ()
Stack now 0 35 26 47 52 126
Entering state 122
Reducing stack by rule 183 (line 442):
   $1 = nterm declaration ()
-> $$ = nterm block_item ()
Stack now 0 35 26 47 52 126
Entering state 221
Reducing stack by rule 182 (line 437):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 35 26 47 52
Entering state 126
Reading a token: Next token is token INT ()
Shifting token INT ()
Entering state 9
Reducing stack by rule 102 (line 247):
   $1 = token INT ()
-> $$ = nterm type_specifier ()
Stack now 0 35 26 47 52 126
Entering state 28
Reading a token: Next token is token IDENTIFIER ()
Reducing stack by rule 85 (line 214):
   $1 = nterm type_specifier ()
-> $$ = nterm declaration_specifiers ()
Stack now 0 35 26 47 52 126
Entering state 54
Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 24
Reducing stack by rule 131 (line 309):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 35 26 47 52 126 54
Entering state 33
Reading a token: Next token is token EQUALITY ()
Reducing stack by rule 130 (line 304):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 35 26 47 52 126 54
Entering state 132
Next token is token EQUALITY ()
Shifting token EQUALITY ()
Entering state 71
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 99
Reducing stack by rule 5 (line 49):
   $1 = token INT_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 54 132 71
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 54 132 71
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 54 132 71
Entering state 105
Reading a token: Next token is token COMMA ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 54 132 71
Entering state 106
Next token is token COMMA ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 54 132 71
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 54 132 71
Entering state 109
Next token is token COMMA ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 54 132 71
Entering state 110
Next token is token COMMA ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 54 132 71
Entering state 111
Next token is token COMMA ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 54 132 71
Entering state 112
Next token is token COMMA ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 54 132 71
Entering state 113
Next token is token COMMA ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 54 132 71
Entering state 114
Next token is token COMMA ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 54 132 71
Entering state 115
Next token is token COMMA ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 54 132 71
Entering state 116
Next token is token COMMA ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 54 132 71
Entering state 117
Next token is token COMMA ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 54 132 71
Entering state 118
Next token is token COMMA ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 54 132 71
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 54 132 71
Entering state 152
Reducing stack by rule 158 (line 381):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 35 26 47 52 126 54 132 71
Entering state 153
Reducing stack by rule 94 (line 231):
   $1 = nterm declarator ()
   $2 = token EQUALITY ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Stack now 0 35 26 47 52 126 54
Entering state 46
Reducing stack by rule 91 (line 224):
   $1 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 35 26 47 52 126 54
Entering state 45
Next token is token COMMA ()
Shifting token COMMA ()
Entering state 70
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 24
Reducing stack by rule 131 (line 309):
   $1 = token IDENTIFIER ()
-> $$ = nterm direct_declarator ()
Stack now 0 35 26 47 52 126 54 45 70
Entering state 33
Reading a token: Next token is token EQUALITY ()
Reducing stack by rule 130 (line 304):
   $1 = nterm direct_declarator ()
-> $$ = nterm declarator ()
Stack now 0 35 26 47 52 126 54 45 70
Entering state 132
Next token is token EQUALITY ()
Shifting token EQUALITY ()
Entering state 71
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 99
Reducing stack by rule 5 (line 49):
   $1 = token INT_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 105
Reading a token: Next token is token SEMICOLON ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 106
Next token is token SEMICOLON ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 109
Next token is token SEMICOLON ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 110
Next token is token SEMICOLON ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 111
Next token is token SEMICOLON ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 112
Next token is token SEMICOLON ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 113
Next token is token SEMICOLON ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 114
Next token is token SEMICOLON ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 115
Next token is token SEMICOLON ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 116
Next token is token SEMICOLON ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 117
Next token is token SEMICOLON ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 118
Next token is token SEMICOLON ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 152
Reducing stack by rule 158 (line 381):
   $1 = nterm assignment_expression ()
-> $$ = nterm initializer ()
Stack now 0 35 26 47 52 126 54 45 70 132 71
Entering state 153
Reducing stack by rule 94 (line 231):
   $1 = nterm declarator ()
   $2 = token EQUALITY ()
   $3 = nterm initializer ()
-> $$ = nterm init_declarator ()
Stack now 0 35 26 47 52 126 54 45 70
Entering state 149
Reducing stack by rule 92 (line 225):
   $1 = nterm init_declarator_list ()
   $2 = token COMMA ()
   $3 = nterm init_declarator ()
-> $$ = nterm init_declarator_list ()
Stack now 0 35 26 47 52 126 54
Entering state 45
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 69
Reducing stack by rule 82 (line 207):
   $1 = nterm declaration_specifiers ()
   $2 = nterm init_declarator_list ()
   $3 = token SEMICOLON ()
-> $$ = nterm declaration ()
Stack now 0 35 26 47 52 126
Entering state 122
Reducing stack by rule 183 (line 442):
   $1 = nterm declaration ()
-> $$ = nterm block_item ()
Stack now 0 35 26 47 52 126
Entering state 221
Reducing stack by rule 182 (line 437):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 35 26 47 52
Entering state 126
Reading a token: Next token is token FOR ()
Shifting token FOR ()
Entering state 80
Reading a token: Next token is token LOB ()
Shifting token LOB ()
Entering state 163
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163
Entering state 105
Reading a token: Next token is token EQUALITY ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163
Entering state 106
Next token is token EQUALITY ()
Shifting token EQUALITY ()
Entering state 196
Reducing stack by rule 67 (line 180):
   $1 = token EQUALITY ()
-> $$ = nterm assignment_operator ()
Stack now 0 35 26 47 52 126 80 163 106
Entering state 197
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 99
Reducing stack by rule 5 (line 49):
   $1 = token INT_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 80 163 106 197
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 106 197
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 106 197
Entering state 105
Reading a token: Next token is token SEMICOLON ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 106 197
Entering state 106
Next token is token SEMICOLON ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 106 197
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 106 197
Entering state 109
Next token is token SEMICOLON ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 106 197
Entering state 110
Next token is token SEMICOLON ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 80 163 106 197
Entering state 111
Next token is token SEMICOLON ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 80 163 106 197
Entering state 112
Next token is token SEMICOLON ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 80 163 106 197
Entering state 113
Next token is token SEMICOLON ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 80 163 106 197
Entering state 114
Next token is token SEMICOLON ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 106 197
Entering state 115
Next token is token SEMICOLON ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 106 197
Entering state 116
Next token is token SEMICOLON ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 80 163 106 197
Entering state 117
Next token is token SEMICOLON ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 80 163 106 197
Entering state 118
Next token is token SEMICOLON ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 80 163 106 197
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 80 163 106 197
Entering state 266
Reducing stack by rule 66 (line 175):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 80 163
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126 80 163
Entering state 121
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 218
Reducing stack by rule 186 (line 450):
   $1 = nterm expression ()
   $2 = token SEMICOLON ()
-> $$ = nterm expression_statement ()
Stack now 0 35 26 47 52 126 80 163
Entering state 248
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248
Entering state 105
Reading a token: Next token is token LE_OP ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248
Entering state 106
Next token is token LE_OP ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248
Entering state 109
Next token is token LE_OP ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248
Entering state 110
Next token is token LE_OP ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 80 163 248
Entering state 111
Next token is token LE_OP ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 80 163 248
Entering state 112
Next token is token LE_OP ()
Shifting token LE_OP ()
Entering state 206
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 99
Reducing stack by rule 5 (line 49):
   $1 = token INT_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 80 163 248 112 206
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 112 206
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 112 206
Entering state 105
Reading a token: Next token is token SEMICOLON ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 112 206
Entering state 156
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248 112 206
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248 112 206
Entering state 109
Next token is token SEMICOLON ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248 112 206
Entering state 110
Next token is token SEMICOLON ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 80 163 248 112 206
Entering state 274
Next token is token SEMICOLON ()
Reducing stack by rule 48 (line 125):
   $1 = nterm relational_expression ()
   $2 = token LE_OP ()
   $3 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 80 163 248
Entering state 112
Next token is token SEMICOLON ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 80 163 248
Entering state 113
Next token is token SEMICOLON ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 80 163 248
Entering state 114
Next token is token SEMICOLON ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248
Entering state 115
Next token is token SEMICOLON ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248
Entering state 116
Next token is token SEMICOLON ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 80 163 248
Entering state 117
Next token is token SEMICOLON ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248
Entering state 118
Next token is token SEMICOLON ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 80 163 248
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 80 163 248
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126 80 163 248
Entering state 121
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 218
Reducing stack by rule 186 (line 450):
   $1 = nterm expression ()
   $2 = token SEMICOLON ()
-> $$ = nterm expression_statement ()
Stack now 0 35 26 47 52 126 80 163 248
Entering state 305
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305
Entering state 105
Reading a token: Next token is token INC_OP ()
Shifting token INC_OP ()
Entering state 180
Reducing stack by rule 15 (line 62):
   $1 = nterm postfix_expression ()
   $2 = token INC_OP ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305
Entering state 105
Reading a token: Next token is token ROB ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305
Entering state 106
Next token is token ROB ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305
Entering state 109
Next token is token ROB ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305
Entering state 110
Next token is token ROB ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305
Entering state 111
Next token is token ROB ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305
Entering state 112
Next token is token ROB ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305
Entering state 113
Next token is token ROB ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305
Entering state 114
Next token is token ROB ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305
Entering state 115
Next token is token ROB ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305
Entering state 116
Next token is token ROB ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305
Entering state 117
Next token is token ROB ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305
Entering state 118
Next token is token ROB ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126 80 163 248 305
Entering state 326
Next token is token ROB ()
Shifting token ROB ()
Entering state 338
Reading a token: Next token is token LCB ()
Shifting token LCB ()
Entering state 52
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 97
Reading a token: Next token is token LSB ()
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52
Entering state 105
Next token is token LSB ()
Shifting token LSB ()
Entering state 184
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 105 184
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 105 184
Entering state 105
Reading a token: Next token is token RSB ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 105 184
Entering state 106
Next token is token RSB ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 105 184
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 105 184
Entering state 109
Next token is token RSB ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 105 184
Entering state 110
Next token is token RSB ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 105 184
Entering state 111
Next token is token RSB ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 105 184
Entering state 112
Next token is token RSB ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 105 184
Entering state 113
Next token is token RSB ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 105 184
Entering state 114
Next token is token RSB ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 105 184
Entering state 115
Next token is token RSB ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 105 184
Entering state 116
Next token is token RSB ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 105 184
Entering state 117
Next token is token RSB ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 105 184
Entering state 118
Next token is token RSB ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 105 184
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 105 184
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 105 184
Entering state 262
Next token is token RSB ()
Shifting token RSB ()
Entering state 312
Reducing stack by rule 10 (line 57):
   $1 = nterm postfix_expression ()
   $2 = token LSB ()
   $3 = nterm expression ()
   $4 = token RSB ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52
Entering state 105
Reading a token: Next token is token LSB ()
Shifting token LSB ()
Entering state 184
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 99
Reducing stack by rule 5 (line 49):
   $1 = token INT_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 105 184
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 105 184
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 105 184
Entering state 105
Reading a token: Next token is token RSB ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 105 184
Entering state 106
Next token is token RSB ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 105 184
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 105 184
Entering state 109
Next token is token RSB ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 105 184
Entering state 110
Next token is token RSB ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 105 184
Entering state 111
Next token is token RSB ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 105 184
Entering state 112
Next token is token RSB ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 105 184
Entering state 113
Next token is token RSB ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 105 184
Entering state 114
Next token is token RSB ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 105 184
Entering state 115
Next token is token RSB ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 105 184
Entering state 116
Next token is token RSB ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 105 184
Entering state 117
Next token is token RSB ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 105 184
Entering state 118
Next token is token RSB ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 105 184
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 105 184
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 105 184
Entering state 262
Next token is token RSB ()
Shifting token RSB ()
Entering state 312
Reducing stack by rule 10 (line 57):
   $1 = nterm postfix_expression ()
   $2 = token LSB ()
   $3 = nterm expression ()
   $4 = token RSB ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52
Entering state 105
Reading a token: Next token is token EQUALITY ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52
Entering state 106
Next token is token EQUALITY ()
Shifting token EQUALITY ()
Entering state 196
Reducing stack by rule 67 (line 180):
   $1 = token EQUALITY ()
-> $$ = nterm assignment_operator ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 106
Entering state 197
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 99
Reducing stack by rule 5 (line 49):
   $1 = token INT_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 106 197
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 106 197
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 106 197
Entering state 105
Reading a token: Next token is token SEMICOLON ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 106 197
Entering state 106
Next token is token SEMICOLON ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 106 197
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 106 197
Entering state 109
Next token is token SEMICOLON ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 106 197
Entering state 110
Next token is token SEMICOLON ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 106 197
Entering state 111
Next token is token SEMICOLON ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 106 197
Entering state 112
Next token is token SEMICOLON ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 106 197
Entering state 113
Next token is token SEMICOLON ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 106 197
Entering state 114
Next token is token SEMICOLON ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 106 197
Entering state 115
Next token is token SEMICOLON ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 106 197
Entering state 116
Next token is token SEMICOLON ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 106 197
Entering state 117
Next token is token SEMICOLON ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 106 197
Entering state 118
Next token is token SEMICOLON ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 106 197
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 106 197
Entering state 266
Reducing stack by rule 66 (line 175):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52
Entering state 121
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 218
Reducing stack by rule 186 (line 450):
   $1 = nterm expression ()
   $2 = token SEMICOLON ()
-> $$ = nterm expression_statement ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52
Entering state 128
Reducing stack by rule 172 (line 415):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52
Entering state 123
Reducing stack by rule 184 (line 443):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52
Entering state 127
Reducing stack by rule 181 (line 436):
   $1 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52
Entering state 126
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 97
Reading a token: Next token is token LSB ()
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 126
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 126
Entering state 105
Next token is token LSB ()
Shifting token LSB ()
Entering state 184
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 126 105 184
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 126 105 184
Entering state 105
Reading a token: Next token is token RSB ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 126 105 184
Entering state 106
Next token is token RSB ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 126 105 184
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 126 105 184
Entering state 109
Next token is token RSB ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 126 105 184
Entering state 110
Next token is token RSB ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 126 105 184
Entering state 111
Next token is token RSB ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 126 105 184
Entering state 112
Next token is token RSB ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 126 105 184
Entering state 113
Next token is token RSB ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 126 105 184
Entering state 114
Next token is token RSB ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 126 105 184
Entering state 115
Next token is token RSB ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 126 105 184
Entering state 116
Next token is token RSB ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 126 105 184
Entering state 117
Next token is token RSB ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 126 105 184
Entering state 118
Next token is token RSB ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 126 105 184
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 126 105 184
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 126 105 184
Entering state 262
Next token is token RSB ()
Shifting token RSB ()
Entering state 312
Reducing stack by rule 10 (line 57):
   $1 = nterm postfix_expression ()
   $2 = token LSB ()
   $3 = nterm expression ()
   $4 = token RSB ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 126
Entering state 105
Reading a token: Next token is token LSB ()
Shifting token LSB ()
Entering state 184
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 99
Reducing stack by rule 5 (line 49):
   $1 = token INT_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 126 105 184
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 126 105 184
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 126 105 184
Entering state 105
Reading a token: Next token is token RSB ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 126 105 184
Entering state 106
Next token is token RSB ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 126 105 184
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 126 105 184
Entering state 109
Next token is token RSB ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 126 105 184
Entering state 110
Next token is token RSB ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 126 105 184
Entering state 111
Next token is token RSB ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 126 105 184
Entering state 112
Next token is token RSB ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 126 105 184
Entering state 113
Next token is token RSB ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 126 105 184
Entering state 114
Next token is token RSB ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 126 105 184
Entering state 115
Next token is token RSB ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 126 105 184
Entering state 116
Next token is token RSB ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 126 105 184
Entering state 117
Next token is token RSB ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 126 105 184
Entering state 118
Next token is token RSB ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 126 105 184
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 126 105 184
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 126 105 184
Entering state 262
Next token is token RSB ()
Shifting token RSB ()
Entering state 312
Reducing stack by rule 10 (line 57):
   $1 = nterm postfix_expression ()
   $2 = token LSB ()
   $3 = nterm expression ()
   $4 = token RSB ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 126
Entering state 105
Reading a token: Next token is token EQUALITY ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 126
Entering state 106
Next token is token EQUALITY ()
Shifting token EQUALITY ()
Entering state 196
Reducing stack by rule 67 (line 180):
   $1 = token EQUALITY ()
-> $$ = nterm assignment_operator ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 126 106
Entering state 197
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 99
Reducing stack by rule 5 (line 49):
   $1 = token INT_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 126 106 197
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 126 106 197
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 126 106 197
Entering state 105
Reading a token: Next token is token SEMICOLON ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 126 106 197
Entering state 106
Next token is token SEMICOLON ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 126 106 197
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 126 106 197
Entering state 109
Next token is token SEMICOLON ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 126 106 197
Entering state 110
Next token is token SEMICOLON ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 126 106 197
Entering state 111
Next token is token SEMICOLON ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 126 106 197
Entering state 112
Next token is token SEMICOLON ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 126 106 197
Entering state 113
Next token is token SEMICOLON ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 126 106 197
Entering state 114
Next token is token SEMICOLON ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 126 106 197
Entering state 115
Next token is token SEMICOLON ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 126 106 197
Entering state 116
Next token is token SEMICOLON ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 126 106 197
Entering state 117
Next token is token SEMICOLON ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 126 106 197
Entering state 118
Next token is token SEMICOLON ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 126 106 197
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 126 106 197
Entering state 266
Reducing stack by rule 66 (line 175):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 126
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 126
Entering state 121
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 218
Reducing stack by rule 186 (line 450):
   $1 = nterm expression ()
   $2 = token SEMICOLON ()
-> $$ = nterm expression_statement ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 126
Entering state 128
Reducing stack by rule 172 (line 415):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 126
Entering state 123
Reducing stack by rule 184 (line 443):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 126
Entering state 221
Reducing stack by rule 182 (line 437):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52
Entering state 126
Reading a token: Next token is token RCB ()
Shifting token RCB ()
Entering state 220
Reducing stack by rule 180 (line 431):
   $1 = token LCB ()
   $2 = nterm block_item_list ()
   $3 = token RCB ()
-> $$ = nterm compound_statement ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338
Entering state 125
Reducing stack by rule 171 (line 414):
   $1 = nterm compound_statement ()
-> $$ = nterm statement ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338
Entering state 344
Reducing stack by rule 192 (line 464):
   $1 = token FOR ()
   $2 = token LOB ()
   $3 = nterm expression_statement ()
   $4 = nterm expression_statement ()
   $5 = nterm expression ()
   $6 = token ROB ()
   $7 = nterm statement ()
-> $$ = nterm iteration_statement ()
Stack now 0 35 26 47 52 126
Entering state 130
Reducing stack by rule 174 (line 417):
   $1 = nterm iteration_statement ()
-> $$ = nterm statement ()
Stack now 0 35 26 47 52 126
Entering state 123
Reducing stack by rule 184 (line 443):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 35 26 47 52 126
Entering state 221
Reducing stack by rule 182 (line 437):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 35 26 47 52
Entering state 126
Reading a token: Next token is token FOR ()
Shifting token FOR ()
Entering state 80
Reading a token: Next token is token LOB ()
Shifting token LOB ()
Entering state 163
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163
Entering state 105
Reading a token: Next token is token EQUALITY ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163
Entering state 106
Next token is token EQUALITY ()
Shifting token EQUALITY ()
Entering state 196
Reducing stack by rule 67 (line 180):
   $1 = token EQUALITY ()
-> $$ = nterm assignment_operator ()
Stack now 0 35 26 47 52 126 80 163 106
Entering state 197
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 99
Reducing stack by rule 5 (line 49):
   $1 = token INT_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 80 163 106 197
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 106 197
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 106 197
Entering state 105
Reading a token: Next token is token SEMICOLON ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 106 197
Entering state 106
Next token is token SEMICOLON ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 106 197
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 106 197
Entering state 109
Next token is token SEMICOLON ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 106 197
Entering state 110
Next token is token SEMICOLON ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 80 163 106 197
Entering state 111
Next token is token SEMICOLON ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 80 163 106 197
Entering state 112
Next token is token SEMICOLON ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 80 163 106 197
Entering state 113
Next token is token SEMICOLON ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 80 163 106 197
Entering state 114
Next token is token SEMICOLON ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 106 197
Entering state 115
Next token is token SEMICOLON ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 106 197
Entering state 116
Next token is token SEMICOLON ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 80 163 106 197
Entering state 117
Next token is token SEMICOLON ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 80 163 106 197
Entering state 118
Next token is token SEMICOLON ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 80 163 106 197
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 80 163 106 197
Entering state 266
Reducing stack by rule 66 (line 175):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 80 163
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126 80 163
Entering state 121
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 218
Reducing stack by rule 186 (line 450):
   $1 = nterm expression ()
   $2 = token SEMICOLON ()
-> $$ = nterm expression_statement ()
Stack now 0 35 26 47 52 126 80 163
Entering state 248
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248
Entering state 105
Reading a token: Next token is token LE_OP ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248
Entering state 106
Next token is token LE_OP ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248
Entering state 109
Next token is token LE_OP ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248
Entering state 110
Next token is token LE_OP ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 80 163 248
Entering state 111
Next token is token LE_OP ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 80 163 248
Entering state 112
Next token is token LE_OP ()
Shifting token LE_OP ()
Entering state 206
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 112 206
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 112 206
Entering state 105
Reading a token: Next token is token SEMICOLON ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 112 206
Entering state 156
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248 112 206
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248 112 206
Entering state 109
Next token is token SEMICOLON ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248 112 206
Entering state 110
Next token is token SEMICOLON ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 80 163 248 112 206
Entering state 274
Next token is token SEMICOLON ()
Reducing stack by rule 48 (line 125):
   $1 = nterm relational_expression ()
   $2 = token LE_OP ()
   $3 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 80 163 248
Entering state 112
Next token is token SEMICOLON ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 80 163 248
Entering state 113
Next token is token SEMICOLON ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 80 163 248
Entering state 114
Next token is token SEMICOLON ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248
Entering state 115
Next token is token SEMICOLON ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248
Entering state 116
Next token is token SEMICOLON ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 80 163 248
Entering state 117
Next token is token SEMICOLON ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248
Entering state 118
Next token is token SEMICOLON ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 80 163 248
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 80 163 248
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126 80 163 248
Entering state 121
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 218
Reducing stack by rule 186 (line 450):
   $1 = nterm expression ()
   $2 = token SEMICOLON ()
-> $$ = nterm expression_statement ()
Stack now 0 35 26 47 52 126 80 163 248
Entering state 305
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305
Entering state 105
Reading a token: Next token is token INC_OP ()
Shifting token INC_OP ()
Entering state 180
Reducing stack by rule 15 (line 62):
   $1 = nterm postfix_expression ()
   $2 = token INC_OP ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305
Entering state 105
Reading a token: Next token is token ROB ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305
Entering state 106
Next token is token ROB ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305
Entering state 109
Next token is token ROB ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305
Entering state 110
Next token is token ROB ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305
Entering state 111
Next token is token ROB ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305
Entering state 112
Next token is token ROB ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305
Entering state 113
Next token is token ROB ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305
Entering state 114
Next token is token ROB ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305
Entering state 115
Next token is token ROB ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305
Entering state 116
Next token is token ROB ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305
Entering state 117
Next token is token ROB ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305
Entering state 118
Next token is token ROB ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126 80 163 248 305
Entering state 326
Next token is token ROB ()
Shifting token ROB ()
Entering state 338
Reading a token: Next token is token LCB ()
Shifting token LCB ()
Entering state 52
Reading a token: Next token is token FOR ()
Shifting token FOR ()
Entering state 80
Reading a token: Next token is token LOB ()
Shifting token LOB ()
Entering state 163
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163
Entering state 105
Reading a token: Next token is token EQUALITY ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163
Entering state 106
Next token is token EQUALITY ()
Shifting token EQUALITY ()
Entering state 196
Reducing stack by rule 67 (line 180):
   $1 = token EQUALITY ()
-> $$ = nterm assignment_operator ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 106
Entering state 197
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 99
Reducing stack by rule 5 (line 49):
   $1 = token INT_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 106 197
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 106 197
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 106 197
Entering state 105
Reading a token: Next token is token SEMICOLON ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 106 197
Entering state 106
Next token is token SEMICOLON ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 106 197
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 106 197
Entering state 109
Next token is token SEMICOLON ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 106 197
Entering state 110
Next token is token SEMICOLON ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 106 197
Entering state 111
Next token is token SEMICOLON ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 106 197
Entering state 112
Next token is token SEMICOLON ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 106 197
Entering state 113
Next token is token SEMICOLON ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 106 197
Entering state 114
Next token is token SEMICOLON ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 106 197
Entering state 115
Next token is token SEMICOLON ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 106 197
Entering state 116
Next token is token SEMICOLON ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 106 197
Entering state 117
Next token is token SEMICOLON ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 106 197
Entering state 118
Next token is token SEMICOLON ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 106 197
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 106 197
Entering state 266
Reducing stack by rule 66 (line 175):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163
Entering state 121
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 218
Reducing stack by rule 186 (line 450):
   $1 = nterm expression ()
   $2 = token SEMICOLON ()
-> $$ = nterm expression_statement ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163
Entering state 248
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248
Entering state 105
Reading a token: Next token is token LT ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248
Entering state 106
Next token is token LT ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248
Entering state 109
Next token is token LT ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248
Entering state 110
Next token is token LT ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248
Entering state 111
Next token is token LT ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248
Entering state 112
Next token is token LT ()
Shifting token LT ()
Entering state 208
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 99
Reducing stack by rule 5 (line 49):
   $1 = token INT_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 112 208
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 112 208
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 112 208
Entering state 105
Reading a token: Next token is token SEMICOLON ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 112 208
Entering state 156
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 112 208
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 112 208
Entering state 109
Next token is token SEMICOLON ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 112 208
Entering state 110
Next token is token SEMICOLON ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 112 208
Entering state 276
Next token is token SEMICOLON ()
Reducing stack by rule 46 (line 123):
   $1 = nterm relational_expression ()
   $2 = token LT ()
   $3 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248
Entering state 112
Next token is token SEMICOLON ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248
Entering state 113
Next token is token SEMICOLON ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248
Entering state 114
Next token is token SEMICOLON ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248
Entering state 115
Next token is token SEMICOLON ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248
Entering state 116
Next token is token SEMICOLON ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248
Entering state 117
Next token is token SEMICOLON ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248
Entering state 118
Next token is token SEMICOLON ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248
Entering state 121
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 218
Reducing stack by rule 186 (line 450):
   $1 = nterm expression ()
   $2 = token SEMICOLON ()
-> $$ = nterm expression_statement ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248
Entering state 305
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305
Entering state 105
Reading a token: Next token is token INC_OP ()
Shifting token INC_OP ()
Entering state 180
Reducing stack by rule 15 (line 62):
   $1 = nterm postfix_expression ()
   $2 = token INC_OP ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305
Entering state 105
Reading a token: Next token is token ROB ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305
Entering state 106
Next token is token ROB ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305
Entering state 109
Next token is token ROB ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305
Entering state 110
Next token is token ROB ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305
Entering state 111
Next token is token ROB ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305
Entering state 112
Next token is token ROB ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305
Entering state 113
Next token is token ROB ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305
Entering state 114
Next token is token ROB ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305
Entering state 115
Next token is token ROB ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305
Entering state 116
Next token is token ROB ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305
Entering state 117
Next token is token ROB ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305
Entering state 118
Next token is token ROB ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305
Entering state 326
Next token is token ROB ()
Shifting token ROB ()
Entering state 338
Reading a token: Next token is token LCB ()
Shifting token LCB ()
Entering state 52
Reading a token: Next token is token FOR ()
Shifting token FOR ()
Entering state 80
Reading a token: Next token is token LOB ()
Shifting token LOB ()
Entering state 163
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163
Entering state 105
Reading a token: Next token is token EQUALITY ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163
Entering state 106
Next token is token EQUALITY ()
Shifting token EQUALITY ()
Entering state 196
Reducing stack by rule 67 (line 180):
   $1 = token EQUALITY ()
-> $$ = nterm assignment_operator ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 106
Entering state 197
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 99
Reducing stack by rule 5 (line 49):
   $1 = token INT_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 106 197
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 106 197
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 106 197
Entering state 105
Reading a token: Next token is token SEMICOLON ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 106 197
Entering state 106
Next token is token SEMICOLON ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 106 197
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 106 197
Entering state 109
Next token is token SEMICOLON ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 106 197
Entering state 110
Next token is token SEMICOLON ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 106 197
Entering state 111
Next token is token SEMICOLON ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 106 197
Entering state 112
Next token is token SEMICOLON ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 106 197
Entering state 113
Next token is token SEMICOLON ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 106 197
Entering state 114
Next token is token SEMICOLON ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 106 197
Entering state 115
Next token is token SEMICOLON ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 106 197
Entering state 116
Next token is token SEMICOLON ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 106 197
Entering state 117
Next token is token SEMICOLON ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 106 197
Entering state 118
Next token is token SEMICOLON ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 106 197
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 106 197
Entering state 266
Reducing stack by rule 66 (line 175):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163
Entering state 121
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 218
Reducing stack by rule 186 (line 450):
   $1 = nterm expression ()
   $2 = token SEMICOLON ()
-> $$ = nterm expression_statement ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163
Entering state 248
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248
Entering state 105
Reading a token: Next token is token LT ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248
Entering state 106
Next token is token LT ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248
Entering state 109
Next token is token LT ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248
Entering state 110
Next token is token LT ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248
Entering state 111
Next token is token LT ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248
Entering state 112
Next token is token LT ()
Shifting token LT ()
Entering state 208
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 99
Reducing stack by rule 5 (line 49):
   $1 = token INT_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 112 208
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 112 208
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 112 208
Entering state 105
Reading a token: Next token is token SEMICOLON ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 112 208
Entering state 156
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 112 208
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 112 208
Entering state 109
Next token is token SEMICOLON ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 112 208
Entering state 110
Next token is token SEMICOLON ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 112 208
Entering state 276
Next token is token SEMICOLON ()
Reducing stack by rule 46 (line 123):
   $1 = nterm relational_expression ()
   $2 = token LT ()
   $3 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248
Entering state 112
Next token is token SEMICOLON ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248
Entering state 113
Next token is token SEMICOLON ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248
Entering state 114
Next token is token SEMICOLON ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248
Entering state 115
Next token is token SEMICOLON ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248
Entering state 116
Next token is token SEMICOLON ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248
Entering state 117
Next token is token SEMICOLON ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248
Entering state 118
Next token is token SEMICOLON ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248
Entering state 121
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 218
Reducing stack by rule 186 (line 450):
   $1 = nterm expression ()
   $2 = token SEMICOLON ()
-> $$ = nterm expression_statement ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248
Entering state 305
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305
Entering state 105
Reading a token: Next token is token INC_OP ()
Shifting token INC_OP ()
Entering state 180
Reducing stack by rule 15 (line 62):
   $1 = nterm postfix_expression ()
   $2 = token INC_OP ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305
Entering state 105
Reading a token: Next token is token ROB ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305
Entering state 106
Next token is token ROB ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305
Entering state 109
Next token is token ROB ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305
Entering state 110
Next token is token ROB ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305
Entering state 111
Next token is token ROB ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305
Entering state 112
Next token is token ROB ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305
Entering state 113
Next token is token ROB ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305
Entering state 114
Next token is token ROB ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305
Entering state 115
Next token is token ROB ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305
Entering state 116
Next token is token ROB ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305
Entering state 117
Next token is token ROB ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305
Entering state 118
Next token is token ROB ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305
Entering state 326
Next token is token ROB ()
Shifting token ROB ()
Entering state 338
Reading a token: Next token is token LCB ()
Shifting token LCB ()
Entering state 52
Reading a token: Next token is token IF ()
Shifting token IF ()
Entering state 79
Reading a token: Next token is token LOB ()
Shifting token LOB ()
Entering state 162
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162
Entering state 105
Reading a token: Next token is token LSB ()
Shifting token LSB ()
Entering state 184
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 105 184
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 105 184
Entering state 105
Reading a token: Next token is token RSB ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 105 184
Entering state 106
Next token is token RSB ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 105 184
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 105 184
Entering state 109
Next token is token RSB ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 105 184
Entering state 110
Next token is token RSB ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 105 184
Entering state 111
Next token is token RSB ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 105 184
Entering state 112
Next token is token RSB ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 105 184
Entering state 113
Next token is token RSB ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 105 184
Entering state 114
Next token is token RSB ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 105 184
Entering state 115
Next token is token RSB ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 105 184
Entering state 116
Next token is token RSB ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 105 184
Entering state 117
Next token is token RSB ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 105 184
Entering state 118
Next token is token RSB ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 105 184
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 105 184
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 105 184
Entering state 262
Next token is token RSB ()
Shifting token RSB ()
Entering state 312
Reducing stack by rule 10 (line 57):
   $1 = nterm postfix_expression ()
   $2 = token LSB ()
   $3 = nterm expression ()
   $4 = token RSB ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162
Entering state 105
Reading a token: Next token is token LSB ()
Shifting token LSB ()
Entering state 184
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 105 184
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 105 184
Entering state 105
Reading a token: Next token is token RSB ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 105 184
Entering state 106
Next token is token RSB ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 105 184
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 105 184
Entering state 109
Next token is token RSB ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 105 184
Entering state 110
Next token is token RSB ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 105 184
Entering state 111
Next token is token RSB ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 105 184
Entering state 112
Next token is token RSB ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 105 184
Entering state 113
Next token is token RSB ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 105 184
Entering state 114
Next token is token RSB ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 105 184
Entering state 115
Next token is token RSB ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 105 184
Entering state 116
Next token is token RSB ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 105 184
Entering state 117
Next token is token RSB ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 105 184
Entering state 118
Next token is token RSB ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 105 184
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 105 184
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 105 184
Entering state 262
Next token is token RSB ()
Shifting token RSB ()
Entering state 312
Reducing stack by rule 10 (line 57):
   $1 = nterm postfix_expression ()
   $2 = token LSB ()
   $3 = nterm expression ()
   $4 = token RSB ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162
Entering state 105
Reading a token: Next token is token NE_OP ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162
Entering state 106
Next token is token NE_OP ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162
Entering state 109
Next token is token NE_OP ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162
Entering state 110
Next token is token NE_OP ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162
Entering state 111
Next token is token NE_OP ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162
Entering state 112
Next token is token NE_OP ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162
Entering state 113
Next token is token NE_OP ()
Shifting token NE_OP ()
Entering state 211
Reading a token: Next token is token CHAR_CONSTANT ()
Shifting token CHAR_CONSTANT ()
Entering state 102
Reducing stack by rule 8 (line 52):
   $1 = token CHAR_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 113 211
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 113 211
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 113 211
Entering state 105
Reading a token: Next token is token AND_OP ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 113 211
Entering state 156
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 113 211
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 113 211
Entering state 109
Next token is token AND_OP ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 113 211
Entering state 110
Next token is token AND_OP ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 113 211
Entering state 111
Next token is token AND_OP ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 113 211
Entering state 279
Next token is token AND_OP ()
Reducing stack by rule 52 (line 133):
   $1 = nterm equality_expression ()
   $2 = token NE_OP ()
   $3 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162
Entering state 113
Next token is token AND_OP ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162
Entering state 114
Next token is token AND_OP ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162
Entering state 115
Next token is token AND_OP ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162
Entering state 116
Next token is token AND_OP ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162
Entering state 117
Next token is token AND_OP ()
Shifting token AND_OP ()
Entering state 215
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 117 215
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 117 215
Entering state 105
Reading a token: Next token is token LSB ()
Shifting token LSB ()
Entering state 184
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 117 215 105 184
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 117 215 105 184
Entering state 105
Reading a token: Next token is token RSB ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 117 215 105 184
Entering state 106
Next token is token RSB ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 117 215 105 184
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 117 215 105 184
Entering state 109
Next token is token RSB ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 117 215 105 184
Entering state 110
Next token is token RSB ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 117 215 105 184
Entering state 111
Next token is token RSB ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 117 215 105 184
Entering state 112
Next token is token RSB ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 117 215 105 184
Entering state 113
Next token is token RSB ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 117 215 105 184
Entering state 114
Next token is token RSB ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 117 215 105 184
Entering state 115
Next token is token RSB ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 117 215 105 184
Entering state 116
Next token is token RSB ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 117 215 105 184
Entering state 117
Next token is token RSB ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 117 215 105 184
Entering state 118
Next token is token RSB ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 117 215 105 184
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 117 215 105 184
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 117 215 105 184
Entering state 262
Next token is token RSB ()
Shifting token RSB ()
Entering state 312
Reducing stack by rule 10 (line 57):
   $1 = nterm postfix_expression ()
   $2 = token LSB ()
   $3 = nterm expression ()
   $4 = token RSB ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 117 215
Entering state 105
Reading a token: Next token is token LSB ()
Shifting token LSB ()
Entering state 184
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 117 215 105 184
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 117 215 105 184
Entering state 105
Reading a token: Next token is token RSB ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 117 215 105 184
Entering state 106
Next token is token RSB ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 117 215 105 184
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 117 215 105 184
Entering state 109
Next token is token RSB ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 117 215 105 184
Entering state 110
Next token is token RSB ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 117 215 105 184
Entering state 111
Next token is token RSB ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 117 215 105 184
Entering state 112
Next token is token RSB ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 117 215 105 184
Entering state 113
Next token is token RSB ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 117 215 105 184
Entering state 114
Next token is token RSB ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 117 215 105 184
Entering state 115
Next token is token RSB ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 117 215 105 184
Entering state 116
Next token is token RSB ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 117 215 105 184
Entering state 117
Next token is token RSB ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 117 215 105 184
Entering state 118
Next token is token RSB ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 117 215 105 184
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 117 215 105 184
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 117 215 105 184
Entering state 262
Next token is token RSB ()
Shifting token RSB ()
Entering state 312
Reducing stack by rule 10 (line 57):
   $1 = nterm postfix_expression ()
   $2 = token LSB ()
   $3 = nterm expression ()
   $4 = token RSB ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 117 215
Entering state 105
Reading a token: Next token is token NE_OP ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 117 215
Entering state 156
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 117 215
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 117 215
Entering state 109
Next token is token NE_OP ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 117 215
Entering state 110
Next token is token NE_OP ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 117 215
Entering state 111
Next token is token NE_OP ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 117 215
Entering state 112
Next token is token NE_OP ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 117 215
Entering state 113
Next token is token NE_OP ()
Shifting token NE_OP ()
Entering state 211
Reading a token: Next token is token CHAR_CONSTANT ()
Shifting token CHAR_CONSTANT ()
Entering state 102
Reducing stack by rule 8 (line 52):
   $1 = token CHAR_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 117 215 113 211
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 117 215 113 211
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 117 215 113 211
Entering state 105
Reading a token: Next token is token ROB ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 117 215 113 211
Entering state 156
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 117 215 113 211
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 117 215 113 211
Entering state 109
Next token is token ROB ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 117 215 113 211
Entering state 110
Next token is token ROB ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 117 215 113 211
Entering state 111
Next token is token ROB ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 117 215 113 211
Entering state 279
Next token is token ROB ()
Reducing stack by rule 52 (line 133):
   $1 = nterm equality_expression ()
   $2 = token NE_OP ()
   $3 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 117 215
Entering state 113
Next token is token ROB ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 117 215
Entering state 114
Next token is token ROB ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 117 215
Entering state 115
Next token is token ROB ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 117 215
Entering state 283
Next token is token ROB ()
Reducing stack by rule 60 (line 157):
   $1 = nterm logical_and_expression ()
   $2 = token AND_OP ()
   $3 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162
Entering state 117
Next token is token ROB ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162
Entering state 118
Next token is token ROB ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162
Entering state 246
Next token is token ROB ()
Shifting token ROB ()
Entering state 303
Reading a token: Next token is token LCB ()
Shifting token LCB ()
Entering state 52
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 97
Reading a token: Next token is token EQUALITY ()
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52
Entering state 105
Next token is token EQUALITY ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52
Entering state 106
Next token is token EQUALITY ()
Shifting token EQUALITY ()
Entering state 196
Reducing stack by rule 67 (line 180):
   $1 = token EQUALITY ()
-> $$ = nterm assignment_operator ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 106
Entering state 197
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 106 197
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 106 197
Entering state 105
Reading a token: Next token is token LSB ()
Shifting token LSB ()
Entering state 184
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 106 197 105 184
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 106 197 105 184
Entering state 105
Reading a token: Next token is token RSB ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 106 197 105 184
Entering state 106
Next token is token RSB ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 106 197 105 184
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 106 197 105 184
Entering state 109
Next token is token RSB ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 106 197 105 184
Entering state 110
Next token is token RSB ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 106 197 105 184
Entering state 111
Next token is token RSB ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 106 197 105 184
Entering state 112
Next token is token RSB ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 106 197 105 184
Entering state 113
Next token is token RSB ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 106 197 105 184
Entering state 114
Next token is token RSB ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 106 197 105 184
Entering state 115
Next token is token RSB ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 106 197 105 184
Entering state 116
Next token is token RSB ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 106 197 105 184
Entering state 117
Next token is token RSB ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 106 197 105 184
Entering state 118
Next token is token RSB ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 106 197 105 184
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 106 197 105 184
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 106 197 105 184
Entering state 262
Next token is token RSB ()
Shifting token RSB ()
Entering state 312
Reducing stack by rule 10 (line 57):
   $1 = nterm postfix_expression ()
   $2 = token LSB ()
   $3 = nterm expression ()
   $4 = token RSB ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 106 197
Entering state 105
Reading a token: Next token is token LSB ()
Shifting token LSB ()
Entering state 184
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 106 197 105 184
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 106 197 105 184
Entering state 105
Reading a token: Next token is token RSB ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 106 197 105 184
Entering state 106
Next token is token RSB ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 106 197 105 184
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 106 197 105 184
Entering state 109
Next token is token RSB ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 106 197 105 184
Entering state 110
Next token is token RSB ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 106 197 105 184
Entering state 111
Next token is token RSB ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 106 197 105 184
Entering state 112
Next token is token RSB ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 106 197 105 184
Entering state 113
Next token is token RSB ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 106 197 105 184
Entering state 114
Next token is token RSB ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 106 197 105 184
Entering state 115
Next token is token RSB ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 106 197 105 184
Entering state 116
Next token is token RSB ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 106 197 105 184
Entering state 117
Next token is token RSB ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 106 197 105 184
Entering state 118
Next token is token RSB ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 106 197 105 184
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 106 197 105 184
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 106 197 105 184
Entering state 262
Next token is token RSB ()
Shifting token RSB ()
Entering state 312
Reducing stack by rule 10 (line 57):
   $1 = nterm postfix_expression ()
   $2 = token LSB ()
   $3 = nterm expression ()
   $4 = token RSB ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 106 197
Entering state 105
Reading a token: Next token is token MINUS ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 106 197
Entering state 106
Next token is token MINUS ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 106 197
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 106 197
Entering state 109
Next token is token MINUS ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 106 197
Entering state 110
Next token is token MINUS ()
Shifting token MINUS ()
Entering state 203
Reading a token: Next token is token CHAR_CONSTANT ()
Shifting token CHAR_CONSTANT ()
Entering state 102
Reducing stack by rule 8 (line 52):
   $1 = token CHAR_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 106 197 110 203
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 106 197 110 203
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 106 197 110 203
Entering state 105
Reading a token: Next token is token SEMICOLON ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 106 197 110 203
Entering state 156
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 106 197 110 203
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 106 197 110 203
Entering state 271
Next token is token SEMICOLON ()
Reducing stack by rule 41 (line 110):
   $1 = nterm additive_expression ()
   $2 = token MINUS ()
   $3 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 106 197
Entering state 110
Next token is token SEMICOLON ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 106 197
Entering state 111
Next token is token SEMICOLON ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 106 197
Entering state 112
Next token is token SEMICOLON ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 106 197
Entering state 113
Next token is token SEMICOLON ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 106 197
Entering state 114
Next token is token SEMICOLON ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 106 197
Entering state 115
Next token is token SEMICOLON ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 106 197
Entering state 116
Next token is token SEMICOLON ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 106 197
Entering state 117
Next token is token SEMICOLON ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 106 197
Entering state 118
Next token is token SEMICOLON ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 106 197
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 106 197
Entering state 266
Reducing stack by rule 66 (line 175):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52
Entering state 121
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 218
Reducing stack by rule 186 (line 450):
   $1 = nterm expression ()
   $2 = token SEMICOLON ()
-> $$ = nterm expression_statement ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52
Entering state 128
Reducing stack by rule 172 (line 415):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52
Entering state 123
Reducing stack by rule 184 (line 443):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52
Entering state 127
Reducing stack by rule 181 (line 436):
   $1 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52
Entering state 126
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 97
Reading a token: Next token is token LSB ()
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126
Entering state 105
Next token is token LSB ()
Shifting token LSB ()
Entering state 184
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 105 184
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 105 184
Entering state 105
Reading a token: Next token is token RSB ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 105 184
Entering state 106
Next token is token RSB ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 105 184
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 105 184
Entering state 109
Next token is token RSB ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 105 184
Entering state 110
Next token is token RSB ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 105 184
Entering state 111
Next token is token RSB ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 105 184
Entering state 112
Next token is token RSB ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 105 184
Entering state 113
Next token is token RSB ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 105 184
Entering state 114
Next token is token RSB ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 105 184
Entering state 115
Next token is token RSB ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 105 184
Entering state 116
Next token is token RSB ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 105 184
Entering state 117
Next token is token RSB ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 105 184
Entering state 118
Next token is token RSB ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 105 184
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 105 184
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 105 184
Entering state 262
Next token is token RSB ()
Shifting token RSB ()
Entering state 312
Reducing stack by rule 10 (line 57):
   $1 = nterm postfix_expression ()
   $2 = token LSB ()
   $3 = nterm expression ()
   $4 = token RSB ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126
Entering state 105
Reading a token: Next token is token LSB ()
Shifting token LSB ()
Entering state 184
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 105 184
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 105 184
Entering state 105
Reading a token: Next token is token RSB ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 105 184
Entering state 106
Next token is token RSB ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 105 184
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 105 184
Entering state 109
Next token is token RSB ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 105 184
Entering state 110
Next token is token RSB ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 105 184
Entering state 111
Next token is token RSB ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 105 184
Entering state 112
Next token is token RSB ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 105 184
Entering state 113
Next token is token RSB ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 105 184
Entering state 114
Next token is token RSB ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 105 184
Entering state 115
Next token is token RSB ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 105 184
Entering state 116
Next token is token RSB ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 105 184
Entering state 117
Next token is token RSB ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 105 184
Entering state 118
Next token is token RSB ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 105 184
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 105 184
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 105 184
Entering state 262
Next token is token RSB ()
Shifting token RSB ()
Entering state 312
Reducing stack by rule 10 (line 57):
   $1 = nterm postfix_expression ()
   $2 = token LSB ()
   $3 = nterm expression ()
   $4 = token RSB ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126
Entering state 105
Reading a token: Next token is token EQUALITY ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126
Entering state 106
Next token is token EQUALITY ()
Shifting token EQUALITY ()
Entering state 196
Reducing stack by rule 67 (line 180):
   $1 = token EQUALITY ()
-> $$ = nterm assignment_operator ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 106
Entering state 197
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 99
Reducing stack by rule 5 (line 49):
   $1 = token INT_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 106 197
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 106 197
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 106 197
Entering state 105
Reading a token: Next token is token SEMICOLON ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 106 197
Entering state 106
Next token is token SEMICOLON ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 106 197
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 106 197
Entering state 109
Next token is token SEMICOLON ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 106 197
Entering state 110
Next token is token SEMICOLON ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 106 197
Entering state 111
Next token is token SEMICOLON ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 106 197
Entering state 112
Next token is token SEMICOLON ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 106 197
Entering state 113
Next token is token SEMICOLON ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 106 197
Entering state 114
Next token is token SEMICOLON ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 106 197
Entering state 115
Next token is token SEMICOLON ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 106 197
Entering state 116
Next token is token SEMICOLON ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 106 197
Entering state 117
Next token is token SEMICOLON ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 106 197
Entering state 118
Next token is token SEMICOLON ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 106 197
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 106 197
Entering state 266
Reducing stack by rule 66 (line 175):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126
Entering state 121
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 218
Reducing stack by rule 186 (line 450):
   $1 = nterm expression ()
   $2 = token SEMICOLON ()
-> $$ = nterm expression_statement ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126
Entering state 128
Reducing stack by rule 172 (line 415):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126
Entering state 123
Reducing stack by rule 184 (line 443):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126
Entering state 221
Reducing stack by rule 182 (line 437):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52
Entering state 126
Reading a token: Next token is token FOR ()
Shifting token FOR ()
Entering state 80
Reading a token: Next token is token LOB ()
Shifting token LOB ()
Entering state 163
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163
Entering state 105
Reading a token: Next token is token EQUALITY ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163
Entering state 106
Next token is token EQUALITY ()
Shifting token EQUALITY ()
Entering state 196
Reducing stack by rule 67 (line 180):
   $1 = token EQUALITY ()
-> $$ = nterm assignment_operator ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 106
Entering state 197
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 99
Reducing stack by rule 5 (line 49):
   $1 = token INT_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 106 197
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 106 197
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 106 197
Entering state 105
Reading a token: Next token is token SEMICOLON ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 106 197
Entering state 106
Next token is token SEMICOLON ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 106 197
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 106 197
Entering state 109
Next token is token SEMICOLON ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 106 197
Entering state 110
Next token is token SEMICOLON ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 106 197
Entering state 111
Next token is token SEMICOLON ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 106 197
Entering state 112
Next token is token SEMICOLON ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 106 197
Entering state 113
Next token is token SEMICOLON ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 106 197
Entering state 114
Next token is token SEMICOLON ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 106 197
Entering state 115
Next token is token SEMICOLON ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 106 197
Entering state 116
Next token is token SEMICOLON ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 106 197
Entering state 117
Next token is token SEMICOLON ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 106 197
Entering state 118
Next token is token SEMICOLON ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 106 197
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 106 197
Entering state 266
Reducing stack by rule 66 (line 175):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163
Entering state 121
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 218
Reducing stack by rule 186 (line 450):
   $1 = nterm expression ()
   $2 = token SEMICOLON ()
-> $$ = nterm expression_statement ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163
Entering state 248
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248
Entering state 105
Reading a token: Next token is token LT ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248
Entering state 106
Next token is token LT ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248
Entering state 109
Next token is token LT ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248
Entering state 110
Next token is token LT ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248
Entering state 111
Next token is token LT ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248
Entering state 112
Next token is token LT ()
Shifting token LT ()
Entering state 208
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 99
Reducing stack by rule 5 (line 49):
   $1 = token INT_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 112 208
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 112 208
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 112 208
Entering state 105
Reading a token: Next token is token SEMICOLON ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 112 208
Entering state 156
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 112 208
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 112 208
Entering state 109
Next token is token SEMICOLON ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 112 208
Entering state 110
Next token is token SEMICOLON ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 112 208
Entering state 276
Next token is token SEMICOLON ()
Reducing stack by rule 46 (line 123):
   $1 = nterm relational_expression ()
   $2 = token LT ()
   $3 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248
Entering state 112
Next token is token SEMICOLON ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248
Entering state 113
Next token is token SEMICOLON ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248
Entering state 114
Next token is token SEMICOLON ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248
Entering state 115
Next token is token SEMICOLON ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248
Entering state 116
Next token is token SEMICOLON ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248
Entering state 117
Next token is token SEMICOLON ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248
Entering state 118
Next token is token SEMICOLON ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248
Entering state 121
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 218
Reducing stack by rule 186 (line 450):
   $1 = nterm expression ()
   $2 = token SEMICOLON ()
-> $$ = nterm expression_statement ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248
Entering state 305
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305
Entering state 105
Reading a token: Next token is token INC_OP ()
Shifting token INC_OP ()
Entering state 180
Reducing stack by rule 15 (line 62):
   $1 = nterm postfix_expression ()
   $2 = token INC_OP ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305
Entering state 105
Reading a token: Next token is token ROB ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305
Entering state 106
Next token is token ROB ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305
Entering state 109
Next token is token ROB ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305
Entering state 110
Next token is token ROB ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305
Entering state 111
Next token is token ROB ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305
Entering state 112
Next token is token ROB ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305
Entering state 113
Next token is token ROB ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305
Entering state 114
Next token is token ROB ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305
Entering state 115
Next token is token ROB ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305
Entering state 116
Next token is token ROB ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305
Entering state 117
Next token is token ROB ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305
Entering state 118
Next token is token ROB ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305
Entering state 326
Next token is token ROB ()
Shifting token ROB ()
Entering state 338
Reading a token: Next token is token LCB ()
Shifting token LCB ()
Entering state 52
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 97
Reading a token: Next token is token EQUALITY ()
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52
Entering state 105
Next token is token EQUALITY ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52
Entering state 106
Next token is token EQUALITY ()
Shifting token EQUALITY ()
Entering state 196
Reducing stack by rule 67 (line 180):
   $1 = token EQUALITY ()
-> $$ = nterm assignment_operator ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 106
Entering state 197
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 106 197
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 106 197
Entering state 105
Reading a token: Next token is token PLUS ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 106 197
Entering state 106
Next token is token PLUS ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 106 197
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 106 197
Entering state 109
Next token is token PLUS ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 106 197
Entering state 110
Next token is token PLUS ()
Shifting token PLUS ()
Entering state 202
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 106 197 110 202
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 106 197 110 202
Entering state 105
Reading a token: Next token is token LSB ()
Shifting token LSB ()
Entering state 184
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 106 197 110 202 105 184
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 106 197 110 202 105 184
Entering state 105
Reading a token: Next token is token RSB ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 106 197 110 202 105 184
Entering state 106
Next token is token RSB ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 106 197 110 202 105 184
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 106 197 110 202 105 184
Entering state 109
Next token is token RSB ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 106 197 110 202 105 184
Entering state 110
Next token is token RSB ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 106 197 110 202 105 184
Entering state 111
Next token is token RSB ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 106 197 110 202 105 184
Entering state 112
Next token is token RSB ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 106 197 110 202 105 184
Entering state 113
Next token is token RSB ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 106 197 110 202 105 184
Entering state 114
Next token is token RSB ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 106 197 110 202 105 184
Entering state 115
Next token is token RSB ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 106 197 110 202 105 184
Entering state 116
Next token is token RSB ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 106 197 110 202 105 184
Entering state 117
Next token is token RSB ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 106 197 110 202 105 184
Entering state 118
Next token is token RSB ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 106 197 110 202 105 184
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 106 197 110 202 105 184
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 106 197 110 202 105 184
Entering state 262
Next token is token RSB ()
Shifting token RSB ()
Entering state 312
Reducing stack by rule 10 (line 57):
   $1 = nterm postfix_expression ()
   $2 = token LSB ()
   $3 = nterm expression ()
   $4 = token RSB ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 106 197 110 202
Entering state 105
Reading a token: Next token is token SEMICOLON ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 106 197 110 202
Entering state 156
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 106 197 110 202
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 106 197 110 202
Entering state 270
Next token is token SEMICOLON ()
Reducing stack by rule 40 (line 109):
   $1 = nterm additive_expression ()
   $2 = token PLUS ()
   $3 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 106 197
Entering state 110
Next token is token SEMICOLON ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 106 197
Entering state 111
Next token is token SEMICOLON ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 106 197
Entering state 112
Next token is token SEMICOLON ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 106 197
Entering state 113
Next token is token SEMICOLON ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 106 197
Entering state 114
Next token is token SEMICOLON ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 106 197
Entering state 115
Next token is token SEMICOLON ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 106 197
Entering state 116
Next token is token SEMICOLON ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 106 197
Entering state 117
Next token is token SEMICOLON ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 106 197
Entering state 118
Next token is token SEMICOLON ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 106 197
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 106 197
Entering state 266
Reducing stack by rule 66 (line 175):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52
Entering state 121
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 218
Reducing stack by rule 186 (line 450):
   $1 = nterm expression ()
   $2 = token SEMICOLON ()
-> $$ = nterm expression_statement ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52
Entering state 128
Reducing stack by rule 172 (line 415):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52
Entering state 123
Reducing stack by rule 184 (line 443):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52
Entering state 127
Reducing stack by rule 181 (line 436):
   $1 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52
Entering state 126
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 97
Reading a token: Next token is token EQUALITY ()
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126
Entering state 105
Next token is token EQUALITY ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126
Entering state 106
Next token is token EQUALITY ()
Shifting token EQUALITY ()
Entering state 196
Reducing stack by rule 67 (line 180):
   $1 = token EQUALITY ()
-> $$ = nterm assignment_operator ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 106
Entering state 197
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 106 197
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 106 197
Entering state 105
Reading a token: Next token is token PLUS ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 106 197
Entering state 106
Next token is token PLUS ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 106 197
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 106 197
Entering state 109
Next token is token PLUS ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 106 197
Entering state 110
Next token is token PLUS ()
Shifting token PLUS ()
Entering state 202
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 106 197 110 202
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 106 197 110 202
Entering state 105
Reading a token: Next token is token LSB ()
Shifting token LSB ()
Entering state 184
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 106 197 110 202 105 184
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 106 197 110 202 105 184
Entering state 105
Reading a token: Next token is token RSB ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 106 197 110 202 105 184
Entering state 106
Next token is token RSB ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 106 197 110 202 105 184
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 106 197 110 202 105 184
Entering state 109
Next token is token RSB ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 106 197 110 202 105 184
Entering state 110
Next token is token RSB ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 106 197 110 202 105 184
Entering state 111
Next token is token RSB ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 106 197 110 202 105 184
Entering state 112
Next token is token RSB ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 106 197 110 202 105 184
Entering state 113
Next token is token RSB ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 106 197 110 202 105 184
Entering state 114
Next token is token RSB ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 106 197 110 202 105 184
Entering state 115
Next token is token RSB ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 106 197 110 202 105 184
Entering state 116
Next token is token RSB ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 106 197 110 202 105 184
Entering state 117
Next token is token RSB ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 106 197 110 202 105 184
Entering state 118
Next token is token RSB ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 106 197 110 202 105 184
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 106 197 110 202 105 184
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 106 197 110 202 105 184
Entering state 262
Next token is token RSB ()
Shifting token RSB ()
Entering state 312
Reducing stack by rule 10 (line 57):
   $1 = nterm postfix_expression ()
   $2 = token LSB ()
   $3 = nterm expression ()
   $4 = token RSB ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 106 197 110 202
Entering state 105
Reading a token: Next token is token SEMICOLON ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 106 197 110 202
Entering state 156
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 106 197 110 202
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 106 197 110 202
Entering state 270
Next token is token SEMICOLON ()
Reducing stack by rule 40 (line 109):
   $1 = nterm additive_expression ()
   $2 = token PLUS ()
   $3 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 106 197
Entering state 110
Next token is token SEMICOLON ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 106 197
Entering state 111
Next token is token SEMICOLON ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 106 197
Entering state 112
Next token is token SEMICOLON ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 106 197
Entering state 113
Next token is token SEMICOLON ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 106 197
Entering state 114
Next token is token SEMICOLON ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 106 197
Entering state 115
Next token is token SEMICOLON ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 106 197
Entering state 116
Next token is token SEMICOLON ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 106 197
Entering state 117
Next token is token SEMICOLON ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 106 197
Entering state 118
Next token is token SEMICOLON ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 106 197
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 106 197
Entering state 266
Reducing stack by rule 66 (line 175):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126
Entering state 121
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 218
Reducing stack by rule 186 (line 450):
   $1 = nterm expression ()
   $2 = token SEMICOLON ()
-> $$ = nterm expression_statement ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126
Entering state 128
Reducing stack by rule 172 (line 415):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126
Entering state 123
Reducing stack by rule 184 (line 443):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126
Entering state 221
Reducing stack by rule 182 (line 437):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52
Entering state 126
Reading a token: Next token is token IF ()
Shifting token IF ()
Entering state 79
Reading a token: Next token is token LOB ()
Shifting token LOB ()
Entering state 162
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162
Entering state 105
Reading a token: Next token is token GE_OP ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162
Entering state 106
Next token is token GE_OP ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162
Entering state 109
Next token is token GE_OP ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162
Entering state 110
Next token is token GE_OP ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162
Entering state 111
Next token is token GE_OP ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162
Entering state 112
Next token is token GE_OP ()
Shifting token GE_OP ()
Entering state 207
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 99
Reducing stack by rule 5 (line 49):
   $1 = token INT_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 112 207
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 112 207
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 112 207
Entering state 105
Reading a token: Next token is token AND_OP ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 112 207
Entering state 156
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 112 207
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 112 207
Entering state 109
Next token is token AND_OP ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 112 207
Entering state 110
Next token is token AND_OP ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 112 207
Entering state 275
Next token is token AND_OP ()
Reducing stack by rule 49 (line 126):
   $1 = nterm relational_expression ()
   $2 = token GE_OP ()
   $3 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162
Entering state 112
Next token is token AND_OP ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162
Entering state 113
Next token is token AND_OP ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162
Entering state 114
Next token is token AND_OP ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162
Entering state 115
Next token is token AND_OP ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162
Entering state 116
Next token is token AND_OP ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162
Entering state 117
Next token is token AND_OP ()
Shifting token AND_OP ()
Entering state 215
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215
Entering state 105
Reading a token: Next token is token LE_OP ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215
Entering state 156
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215
Entering state 109
Next token is token LE_OP ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215
Entering state 110
Next token is token LE_OP ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215
Entering state 111
Next token is token LE_OP ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215
Entering state 112
Next token is token LE_OP ()
Shifting token LE_OP ()
Entering state 206
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 99
Reducing stack by rule 5 (line 49):
   $1 = token INT_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 112 206
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 112 206
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 112 206
Entering state 105
Reading a token: Next token is token AND_OP ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 112 206
Entering state 156
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 112 206
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 112 206
Entering state 109
Next token is token AND_OP ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 112 206
Entering state 110
Next token is token AND_OP ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 112 206
Entering state 274
Next token is token AND_OP ()
Reducing stack by rule 48 (line 125):
   $1 = nterm relational_expression ()
   $2 = token LE_OP ()
   $3 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215
Entering state 112
Next token is token AND_OP ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215
Entering state 113
Next token is token AND_OP ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215
Entering state 114
Next token is token AND_OP ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215
Entering state 115
Next token is token AND_OP ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215
Entering state 283
Next token is token AND_OP ()
Reducing stack by rule 60 (line 157):
   $1 = nterm logical_and_expression ()
   $2 = token AND_OP ()
   $3 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162
Entering state 117
Next token is token AND_OP ()
Shifting token AND_OP ()
Entering state 215
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215
Entering state 105
Reading a token: Next token is token GE_OP ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215
Entering state 156
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215
Entering state 109
Next token is token GE_OP ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215
Entering state 110
Next token is token GE_OP ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215
Entering state 111
Next token is token GE_OP ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215
Entering state 112
Next token is token GE_OP ()
Shifting token GE_OP ()
Entering state 207
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 99
Reducing stack by rule 5 (line 49):
   $1 = token INT_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 112 207
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 112 207
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 112 207
Entering state 105
Reading a token: Next token is token AND_OP ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 112 207
Entering state 156
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 112 207
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 112 207
Entering state 109
Next token is token AND_OP ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 112 207
Entering state 110
Next token is token AND_OP ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 112 207
Entering state 275
Next token is token AND_OP ()
Reducing stack by rule 49 (line 126):
   $1 = nterm relational_expression ()
   $2 = token GE_OP ()
   $3 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215
Entering state 112
Next token is token AND_OP ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215
Entering state 113
Next token is token AND_OP ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215
Entering state 114
Next token is token AND_OP ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215
Entering state 115
Next token is token AND_OP ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215
Entering state 283
Next token is token AND_OP ()
Reducing stack by rule 60 (line 157):
   $1 = nterm logical_and_expression ()
   $2 = token AND_OP ()
   $3 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162
Entering state 117
Next token is token AND_OP ()
Shifting token AND_OP ()
Entering state 215
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215
Entering state 105
Reading a token: Next token is token LE_OP ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215
Entering state 156
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215
Entering state 109
Next token is token LE_OP ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215
Entering state 110
Next token is token LE_OP ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215
Entering state 111
Next token is token LE_OP ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215
Entering state 112
Next token is token LE_OP ()
Shifting token LE_OP ()
Entering state 206
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 99
Reducing stack by rule 5 (line 49):
   $1 = token INT_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 112 206
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 112 206
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 112 206
Entering state 105
Reading a token: Next token is token AND_OP ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 112 206
Entering state 156
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 112 206
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 112 206
Entering state 109
Next token is token AND_OP ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 112 206
Entering state 110
Next token is token AND_OP ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 112 206
Entering state 274
Next token is token AND_OP ()
Reducing stack by rule 48 (line 125):
   $1 = nterm relational_expression ()
   $2 = token LE_OP ()
   $3 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215
Entering state 112
Next token is token AND_OP ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215
Entering state 113
Next token is token AND_OP ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215
Entering state 114
Next token is token AND_OP ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215
Entering state 115
Next token is token AND_OP ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215
Entering state 283
Next token is token AND_OP ()
Reducing stack by rule 60 (line 157):
   $1 = nterm logical_and_expression ()
   $2 = token AND_OP ()
   $3 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162
Entering state 117
Next token is token AND_OP ()
Shifting token AND_OP ()
Entering state 215
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215
Entering state 105
Reading a token: Next token is token LSB ()
Shifting token LSB ()
Entering state 184
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 105 184
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 105 184
Entering state 105
Reading a token: Next token is token RSB ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 105 184
Entering state 106
Next token is token RSB ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 105 184
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 105 184
Entering state 109
Next token is token RSB ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 105 184
Entering state 110
Next token is token RSB ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 105 184
Entering state 111
Next token is token RSB ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 105 184
Entering state 112
Next token is token RSB ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 105 184
Entering state 113
Next token is token RSB ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 105 184
Entering state 114
Next token is token RSB ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 105 184
Entering state 115
Next token is token RSB ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 105 184
Entering state 116
Next token is token RSB ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 105 184
Entering state 117
Next token is token RSB ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 105 184
Entering state 118
Next token is token RSB ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 105 184
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 105 184
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 105 184
Entering state 262
Next token is token RSB ()
Shifting token RSB ()
Entering state 312
Reducing stack by rule 10 (line 57):
   $1 = nterm postfix_expression ()
   $2 = token LSB ()
   $3 = nterm expression ()
   $4 = token RSB ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215
Entering state 105
Reading a token: Next token is token LSB ()
Shifting token LSB ()
Entering state 184
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 105 184
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 105 184
Entering state 105
Reading a token: Next token is token RSB ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 105 184
Entering state 106
Next token is token RSB ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 105 184
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 105 184
Entering state 109
Next token is token RSB ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 105 184
Entering state 110
Next token is token RSB ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 105 184
Entering state 111
Next token is token RSB ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 105 184
Entering state 112
Next token is token RSB ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 105 184
Entering state 113
Next token is token RSB ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 105 184
Entering state 114
Next token is token RSB ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 105 184
Entering state 115
Next token is token RSB ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 105 184
Entering state 116
Next token is token RSB ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 105 184
Entering state 117
Next token is token RSB ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 105 184
Entering state 118
Next token is token RSB ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 105 184
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 105 184
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 105 184
Entering state 262
Next token is token RSB ()
Shifting token RSB ()
Entering state 312
Reducing stack by rule 10 (line 57):
   $1 = nterm postfix_expression ()
   $2 = token LSB ()
   $3 = nterm expression ()
   $4 = token RSB ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215
Entering state 105
Reading a token: Next token is token NE_OP ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215
Entering state 156
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215
Entering state 109
Next token is token NE_OP ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215
Entering state 110
Next token is token NE_OP ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215
Entering state 111
Next token is token NE_OP ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215
Entering state 112
Next token is token NE_OP ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215
Entering state 113
Next token is token NE_OP ()
Shifting token NE_OP ()
Entering state 211
Reading a token: Next token is token CHAR_CONSTANT ()
Shifting token CHAR_CONSTANT ()
Entering state 102
Reducing stack by rule 8 (line 52):
   $1 = token CHAR_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 113 211
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 113 211
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 113 211
Entering state 105
Reading a token: Next token is token AND_OP ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 113 211
Entering state 156
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 113 211
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 113 211
Entering state 109
Next token is token AND_OP ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 113 211
Entering state 110
Next token is token AND_OP ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 113 211
Entering state 111
Next token is token AND_OP ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 113 211
Entering state 279
Next token is token AND_OP ()
Reducing stack by rule 52 (line 133):
   $1 = nterm equality_expression ()
   $2 = token NE_OP ()
   $3 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215
Entering state 113
Next token is token AND_OP ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215
Entering state 114
Next token is token AND_OP ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215
Entering state 115
Next token is token AND_OP ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215
Entering state 283
Next token is token AND_OP ()
Reducing stack by rule 60 (line 157):
   $1 = nterm logical_and_expression ()
   $2 = token AND_OP ()
   $3 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162
Entering state 117
Next token is token AND_OP ()
Shifting token AND_OP ()
Entering state 215
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215
Entering state 105
Reading a token: Next token is token LSB ()
Shifting token LSB ()
Entering state 184
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 105 184
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 105 184
Entering state 105
Reading a token: Next token is token RSB ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 105 184
Entering state 106
Next token is token RSB ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 105 184
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 105 184
Entering state 109
Next token is token RSB ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 105 184
Entering state 110
Next token is token RSB ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 105 184
Entering state 111
Next token is token RSB ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 105 184
Entering state 112
Next token is token RSB ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 105 184
Entering state 113
Next token is token RSB ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 105 184
Entering state 114
Next token is token RSB ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 105 184
Entering state 115
Next token is token RSB ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 105 184
Entering state 116
Next token is token RSB ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 105 184
Entering state 117
Next token is token RSB ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 105 184
Entering state 118
Next token is token RSB ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 105 184
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 105 184
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 105 184
Entering state 262
Next token is token RSB ()
Shifting token RSB ()
Entering state 312
Reducing stack by rule 10 (line 57):
   $1 = nterm postfix_expression ()
   $2 = token LSB ()
   $3 = nterm expression ()
   $4 = token RSB ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215
Entering state 105
Reading a token: Next token is token LSB ()
Shifting token LSB ()
Entering state 184
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 105 184
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 105 184
Entering state 105
Reading a token: Next token is token RSB ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 105 184
Entering state 106
Next token is token RSB ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 105 184
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 105 184
Entering state 109
Next token is token RSB ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 105 184
Entering state 110
Next token is token RSB ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 105 184
Entering state 111
Next token is token RSB ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 105 184
Entering state 112
Next token is token RSB ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 105 184
Entering state 113
Next token is token RSB ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 105 184
Entering state 114
Next token is token RSB ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 105 184
Entering state 115
Next token is token RSB ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 105 184
Entering state 116
Next token is token RSB ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 105 184
Entering state 117
Next token is token RSB ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 105 184
Entering state 118
Next token is token RSB ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 105 184
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 105 184
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 105 184
Entering state 262
Next token is token RSB ()
Shifting token RSB ()
Entering state 312
Reducing stack by rule 10 (line 57):
   $1 = nterm postfix_expression ()
   $2 = token LSB ()
   $3 = nterm expression ()
   $4 = token RSB ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215
Entering state 105
Reading a token: Next token is token NE_OP ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215
Entering state 156
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215
Entering state 109
Next token is token NE_OP ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215
Entering state 110
Next token is token NE_OP ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215
Entering state 111
Next token is token NE_OP ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215
Entering state 112
Next token is token NE_OP ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215
Entering state 113
Next token is token NE_OP ()
Shifting token NE_OP ()
Entering state 211
Reading a token: Next token is token CHAR_CONSTANT ()
Shifting token CHAR_CONSTANT ()
Entering state 102
Reducing stack by rule 8 (line 52):
   $1 = token CHAR_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 113 211
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 113 211
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 113 211
Entering state 105
Reading a token: Next token is token ROB ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 113 211
Entering state 156
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 113 211
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 113 211
Entering state 109
Next token is token ROB ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 113 211
Entering state 110
Next token is token ROB ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 113 211
Entering state 111
Next token is token ROB ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215 113 211
Entering state 279
Next token is token ROB ()
Reducing stack by rule 52 (line 133):
   $1 = nterm equality_expression ()
   $2 = token NE_OP ()
   $3 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215
Entering state 113
Next token is token ROB ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215
Entering state 114
Next token is token ROB ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215
Entering state 115
Next token is token ROB ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 117 215
Entering state 283
Next token is token ROB ()
Reducing stack by rule 60 (line 157):
   $1 = nterm logical_and_expression ()
   $2 = token AND_OP ()
   $3 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162
Entering state 117
Next token is token ROB ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162
Entering state 118
Next token is token ROB ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162
Entering state 246
Next token is token ROB ()
Shifting token ROB ()
Entering state 303
Reading a token: Next token is token LCB ()
Shifting token LCB ()
Entering state 52
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 97
Reading a token: Next token is token EQUALITY ()
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52
Entering state 105
Next token is token EQUALITY ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52
Entering state 106
Next token is token EQUALITY ()
Shifting token EQUALITY ()
Entering state 196
Reducing stack by rule 67 (line 180):
   $1 = token EQUALITY ()
-> $$ = nterm assignment_operator ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 106
Entering state 197
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 106 197
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 106 197
Entering state 105
Reading a token: Next token is token LSB ()
Shifting token LSB ()
Entering state 184
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 106 197 105 184
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 106 197 105 184
Entering state 105
Reading a token: Next token is token RSB ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 106 197 105 184
Entering state 106
Next token is token RSB ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 106 197 105 184
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 106 197 105 184
Entering state 109
Next token is token RSB ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 106 197 105 184
Entering state 110
Next token is token RSB ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 106 197 105 184
Entering state 111
Next token is token RSB ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 106 197 105 184
Entering state 112
Next token is token RSB ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 106 197 105 184
Entering state 113
Next token is token RSB ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 106 197 105 184
Entering state 114
Next token is token RSB ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 106 197 105 184
Entering state 115
Next token is token RSB ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 106 197 105 184
Entering state 116
Next token is token RSB ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 106 197 105 184
Entering state 117
Next token is token RSB ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 106 197 105 184
Entering state 118
Next token is token RSB ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 106 197 105 184
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 106 197 105 184
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 106 197 105 184
Entering state 262
Next token is token RSB ()
Shifting token RSB ()
Entering state 312
Reducing stack by rule 10 (line 57):
   $1 = nterm postfix_expression ()
   $2 = token LSB ()
   $3 = nterm expression ()
   $4 = token RSB ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 106 197
Entering state 105
Reading a token: Next token is token LSB ()
Shifting token LSB ()
Entering state 184
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 106 197 105 184
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 106 197 105 184
Entering state 105
Reading a token: Next token is token RSB ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 106 197 105 184
Entering state 106
Next token is token RSB ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 106 197 105 184
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 106 197 105 184
Entering state 109
Next token is token RSB ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 106 197 105 184
Entering state 110
Next token is token RSB ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 106 197 105 184
Entering state 111
Next token is token RSB ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 106 197 105 184
Entering state 112
Next token is token RSB ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 106 197 105 184
Entering state 113
Next token is token RSB ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 106 197 105 184
Entering state 114
Next token is token RSB ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 106 197 105 184
Entering state 115
Next token is token RSB ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 106 197 105 184
Entering state 116
Next token is token RSB ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 106 197 105 184
Entering state 117
Next token is token RSB ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 106 197 105 184
Entering state 118
Next token is token RSB ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 106 197 105 184
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 106 197 105 184
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 106 197 105 184
Entering state 262
Next token is token RSB ()
Shifting token RSB ()
Entering state 312
Reducing stack by rule 10 (line 57):
   $1 = nterm postfix_expression ()
   $2 = token LSB ()
   $3 = nterm expression ()
   $4 = token RSB ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 106 197
Entering state 105
Reading a token: Next token is token MINUS ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 106 197
Entering state 106
Next token is token MINUS ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 106 197
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 106 197
Entering state 109
Next token is token MINUS ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 106 197
Entering state 110
Next token is token MINUS ()
Shifting token MINUS ()
Entering state 203
Reading a token: Next token is token CHAR_CONSTANT ()
Shifting token CHAR_CONSTANT ()
Entering state 102
Reducing stack by rule 8 (line 52):
   $1 = token CHAR_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 106 197 110 203
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 106 197 110 203
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 106 197 110 203
Entering state 105
Reading a token: Next token is token SEMICOLON ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 106 197 110 203
Entering state 156
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 106 197 110 203
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 106 197 110 203
Entering state 271
Next token is token SEMICOLON ()
Reducing stack by rule 41 (line 110):
   $1 = nterm additive_expression ()
   $2 = token MINUS ()
   $3 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 106 197
Entering state 110
Next token is token SEMICOLON ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 106 197
Entering state 111
Next token is token SEMICOLON ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 106 197
Entering state 112
Next token is token SEMICOLON ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 106 197
Entering state 113
Next token is token SEMICOLON ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 106 197
Entering state 114
Next token is token SEMICOLON ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 106 197
Entering state 115
Next token is token SEMICOLON ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 106 197
Entering state 116
Next token is token SEMICOLON ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 106 197
Entering state 117
Next token is token SEMICOLON ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 106 197
Entering state 118
Next token is token SEMICOLON ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 106 197
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 106 197
Entering state 266
Reducing stack by rule 66 (line 175):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52
Entering state 121
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 218
Reducing stack by rule 186 (line 450):
   $1 = nterm expression ()
   $2 = token SEMICOLON ()
-> $$ = nterm expression_statement ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52
Entering state 128
Reducing stack by rule 172 (line 415):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52
Entering state 123
Reducing stack by rule 184 (line 443):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52
Entering state 127
Reducing stack by rule 181 (line 436):
   $1 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52
Entering state 126
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 97
Reading a token: Next token is token LSB ()
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126
Entering state 105
Next token is token LSB ()
Shifting token LSB ()
Entering state 184
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 105 184
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 105 184
Entering state 105
Reading a token: Next token is token RSB ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 105 184
Entering state 106
Next token is token RSB ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 105 184
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 105 184
Entering state 109
Next token is token RSB ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 105 184
Entering state 110
Next token is token RSB ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 105 184
Entering state 111
Next token is token RSB ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 105 184
Entering state 112
Next token is token RSB ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 105 184
Entering state 113
Next token is token RSB ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 105 184
Entering state 114
Next token is token RSB ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 105 184
Entering state 115
Next token is token RSB ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 105 184
Entering state 116
Next token is token RSB ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 105 184
Entering state 117
Next token is token RSB ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 105 184
Entering state 118
Next token is token RSB ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 105 184
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 105 184
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 105 184
Entering state 262
Next token is token RSB ()
Shifting token RSB ()
Entering state 312
Reducing stack by rule 10 (line 57):
   $1 = nterm postfix_expression ()
   $2 = token LSB ()
   $3 = nterm expression ()
   $4 = token RSB ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126
Entering state 105
Reading a token: Next token is token LSB ()
Shifting token LSB ()
Entering state 184
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 105 184
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 105 184
Entering state 105
Reading a token: Next token is token RSB ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 105 184
Entering state 106
Next token is token RSB ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 105 184
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 105 184
Entering state 109
Next token is token RSB ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 105 184
Entering state 110
Next token is token RSB ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 105 184
Entering state 111
Next token is token RSB ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 105 184
Entering state 112
Next token is token RSB ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 105 184
Entering state 113
Next token is token RSB ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 105 184
Entering state 114
Next token is token RSB ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 105 184
Entering state 115
Next token is token RSB ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 105 184
Entering state 116
Next token is token RSB ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 105 184
Entering state 117
Next token is token RSB ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 105 184
Entering state 118
Next token is token RSB ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 105 184
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 105 184
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 105 184
Entering state 262
Next token is token RSB ()
Shifting token RSB ()
Entering state 312
Reducing stack by rule 10 (line 57):
   $1 = nterm postfix_expression ()
   $2 = token LSB ()
   $3 = nterm expression ()
   $4 = token RSB ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126
Entering state 105
Reading a token: Next token is token ADD_ASSIGN ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126
Entering state 106
Next token is token ADD_ASSIGN ()
Shifting token ADD_ASSIGN ()
Entering state 188
Reducing stack by rule 71 (line 184):
   $1 = token ADD_ASSIGN ()
-> $$ = nterm assignment_operator ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 106
Entering state 197
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 106 197
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 106 197
Entering state 105
Reading a token: Next token is token LSB ()
Shifting token LSB ()
Entering state 184
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 106 197 105 184
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 106 197 105 184
Entering state 105
Reading a token: Next token is token RSB ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 106 197 105 184
Entering state 106
Next token is token RSB ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 106 197 105 184
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 106 197 105 184
Entering state 109
Next token is token RSB ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 106 197 105 184
Entering state 110
Next token is token RSB ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 106 197 105 184
Entering state 111
Next token is token RSB ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 106 197 105 184
Entering state 112
Next token is token RSB ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 106 197 105 184
Entering state 113
Next token is token RSB ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 106 197 105 184
Entering state 114
Next token is token RSB ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 106 197 105 184
Entering state 115
Next token is token RSB ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 106 197 105 184
Entering state 116
Next token is token RSB ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 106 197 105 184
Entering state 117
Next token is token RSB ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 106 197 105 184
Entering state 118
Next token is token RSB ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 106 197 105 184
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 106 197 105 184
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 106 197 105 184
Entering state 262
Next token is token RSB ()
Shifting token RSB ()
Entering state 312
Reducing stack by rule 10 (line 57):
   $1 = nterm postfix_expression ()
   $2 = token LSB ()
   $3 = nterm expression ()
   $4 = token RSB ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 106 197
Entering state 105
Reading a token: Next token is token LSB ()
Shifting token LSB ()
Entering state 184
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 106 197 105 184
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 106 197 105 184
Entering state 105
Reading a token: Next token is token MINUS ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 106 197 105 184
Entering state 106
Next token is token MINUS ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 106 197 105 184
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 106 197 105 184
Entering state 109
Next token is token MINUS ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 106 197 105 184
Entering state 110
Next token is token MINUS ()
Shifting token MINUS ()
Entering state 203
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 99
Reducing stack by rule 5 (line 49):
   $1 = token INT_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 106 197 105 184 110 203
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 106 197 105 184 110 203
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 106 197 105 184 110 203
Entering state 105
Reading a token: Next token is token RSB ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 106 197 105 184 110 203
Entering state 156
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 106 197 105 184 110 203
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 106 197 105 184 110 203
Entering state 271
Next token is token RSB ()
Reducing stack by rule 41 (line 110):
   $1 = nterm additive_expression ()
   $2 = token MINUS ()
   $3 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 106 197 105 184
Entering state 110
Next token is token RSB ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 106 197 105 184
Entering state 111
Next token is token RSB ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 106 197 105 184
Entering state 112
Next token is token RSB ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 106 197 105 184
Entering state 113
Next token is token RSB ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 106 197 105 184
Entering state 114
Next token is token RSB ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 106 197 105 184
Entering state 115
Next token is token RSB ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 106 197 105 184
Entering state 116
Next token is token RSB ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 106 197 105 184
Entering state 117
Next token is token RSB ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 106 197 105 184
Entering state 118
Next token is token RSB ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 106 197 105 184
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 106 197 105 184
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 106 197 105 184
Entering state 262
Next token is token RSB ()
Shifting token RSB ()
Entering state 312
Reducing stack by rule 10 (line 57):
   $1 = nterm postfix_expression ()
   $2 = token LSB ()
   $3 = nterm expression ()
   $4 = token RSB ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 106 197
Entering state 105
Reading a token: Next token is token SEMICOLON ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 106 197
Entering state 106
Next token is token SEMICOLON ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 106 197
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 106 197
Entering state 109
Next token is token SEMICOLON ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 106 197
Entering state 110
Next token is token SEMICOLON ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 106 197
Entering state 111
Next token is token SEMICOLON ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 106 197
Entering state 112
Next token is token SEMICOLON ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 106 197
Entering state 113
Next token is token SEMICOLON ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 106 197
Entering state 114
Next token is token SEMICOLON ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 106 197
Entering state 115
Next token is token SEMICOLON ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 106 197
Entering state 116
Next token is token SEMICOLON ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 106 197
Entering state 117
Next token is token SEMICOLON ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 106 197
Entering state 118
Next token is token SEMICOLON ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 106 197
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126 106 197
Entering state 266
Reducing stack by rule 66 (line 175):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126
Entering state 121
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 218
Reducing stack by rule 186 (line 450):
   $1 = nterm expression ()
   $2 = token SEMICOLON ()
-> $$ = nterm expression_statement ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126
Entering state 128
Reducing stack by rule 172 (line 415):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126
Entering state 123
Reducing stack by rule 184 (line 443):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52 126
Entering state 221
Reducing stack by rule 182 (line 437):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303 52
Entering state 126
Reading a token: Next token is token RCB ()
Shifting token RCB ()
Entering state 220
Reducing stack by rule 180 (line 431):
   $1 = token LCB ()
   $2 = nterm block_item_list ()
   $3 = token RCB ()
-> $$ = nterm compound_statement ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303
Entering state 125
Reducing stack by rule 171 (line 414):
   $1 = nterm compound_statement ()
-> $$ = nterm statement ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126 79 162 246 303
Entering state 322
Reading a token: Next token is token RCB ()
Reducing stack by rule 187 (line 455):
   $1 = token IF ()
   $2 = token LOB ()
   $3 = nterm expression ()
   $4 = token ROB ()
   $5 = nterm statement ()
-> $$ = nterm selection_statement ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126
Entering state 129
Reducing stack by rule 173 (line 416):
   $1 = nterm selection_statement ()
-> $$ = nterm statement ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126
Entering state 123
Reducing stack by rule 184 (line 443):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52 126
Entering state 221
Reducing stack by rule 182 (line 437):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338 52
Entering state 126
Next token is token RCB ()
Shifting token RCB ()
Entering state 220
Reducing stack by rule 180 (line 431):
   $1 = token LCB ()
   $2 = nterm block_item_list ()
   $3 = token RCB ()
-> $$ = nterm compound_statement ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338
Entering state 125
Reducing stack by rule 171 (line 414):
   $1 = nterm compound_statement ()
-> $$ = nterm statement ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126 80 163 248 305 326 338
Entering state 344
Reducing stack by rule 192 (line 464):
   $1 = token FOR ()
   $2 = token LOB ()
   $3 = nterm expression_statement ()
   $4 = nterm expression_statement ()
   $5 = nterm expression ()
   $6 = token ROB ()
   $7 = nterm statement ()
-> $$ = nterm iteration_statement ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126
Entering state 130
Reducing stack by rule 174 (line 417):
   $1 = nterm iteration_statement ()
-> $$ = nterm statement ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126
Entering state 123
Reducing stack by rule 184 (line 443):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52 126
Entering state 221
Reducing stack by rule 182 (line 437):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303 52
Entering state 126
Reading a token: Next token is token RCB ()
Shifting token RCB ()
Entering state 220
Reducing stack by rule 180 (line 431):
   $1 = token LCB ()
   $2 = nterm block_item_list ()
   $3 = token RCB ()
-> $$ = nterm compound_statement ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303
Entering state 125
Reducing stack by rule 171 (line 414):
   $1 = nterm compound_statement ()
-> $$ = nterm statement ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52 79 162 246 303
Entering state 322
Reading a token: Next token is token RCB ()
Reducing stack by rule 187 (line 455):
   $1 = token IF ()
   $2 = token LOB ()
   $3 = nterm expression ()
   $4 = token ROB ()
   $5 = nterm statement ()
-> $$ = nterm selection_statement ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52
Entering state 129
Reducing stack by rule 173 (line 416):
   $1 = nterm selection_statement ()
-> $$ = nterm statement ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52
Entering state 123
Reducing stack by rule 184 (line 443):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52
Entering state 127
Reducing stack by rule 181 (line 436):
   $1 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338 52
Entering state 126
Next token is token RCB ()
Shifting token RCB ()
Entering state 220
Reducing stack by rule 180 (line 431):
   $1 = token LCB ()
   $2 = nterm block_item_list ()
   $3 = token RCB ()
-> $$ = nterm compound_statement ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338
Entering state 125
Reducing stack by rule 171 (line 414):
   $1 = nterm compound_statement ()
-> $$ = nterm statement ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52 80 163 248 305 326 338
Entering state 344
Reducing stack by rule 192 (line 464):
   $1 = token FOR ()
   $2 = token LOB ()
   $3 = nterm expression_statement ()
   $4 = nterm expression_statement ()
   $5 = nterm expression ()
   $6 = token ROB ()
   $7 = nterm statement ()
-> $$ = nterm iteration_statement ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52
Entering state 130
Reducing stack by rule 174 (line 417):
   $1 = nterm iteration_statement ()
-> $$ = nterm statement ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52
Entering state 123
Reducing stack by rule 184 (line 443):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52
Entering state 127
Reducing stack by rule 181 (line 436):
   $1 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338 52
Entering state 126
Reading a token: Next token is token RCB ()
Shifting token RCB ()
Entering state 220
Reducing stack by rule 180 (line 431):
   $1 = token LCB ()
   $2 = nterm block_item_list ()
   $3 = token RCB ()
-> $$ = nterm compound_statement ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338
Entering state 125
Reducing stack by rule 171 (line 414):
   $1 = nterm compound_statement ()
-> $$ = nterm statement ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52 80 163 248 305 326 338
Entering state 344
Reducing stack by rule 192 (line 464):
   $1 = token FOR ()
   $2 = token LOB ()
   $3 = nterm expression_statement ()
   $4 = nterm expression_statement ()
   $5 = nterm expression ()
   $6 = token ROB ()
   $7 = nterm statement ()
-> $$ = nterm iteration_statement ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52
Entering state 130
Reducing stack by rule 174 (line 417):
   $1 = nterm iteration_statement ()
-> $$ = nterm statement ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52
Entering state 123
Reducing stack by rule 184 (line 443):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52
Entering state 127
Reducing stack by rule 181 (line 436):
   $1 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 52
Entering state 126
Reading a token: Next token is token RCB ()
Shifting token RCB ()
Entering state 220
Reducing stack by rule 180 (line 431):
   $1 = token LCB ()
   $2 = nterm block_item_list ()
   $3 = token RCB ()
-> $$ = nterm compound_statement ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338
Entering state 125
Reducing stack by rule 171 (line 414):
   $1 = nterm compound_statement ()
-> $$ = nterm statement ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338
Entering state 344
Reducing stack by rule 192 (line 464):
   $1 = token FOR ()
   $2 = token LOB ()
   $3 = nterm expression_statement ()
   $4 = nterm expression_statement ()
   $5 = nterm expression ()
   $6 = token ROB ()
   $7 = nterm statement ()
-> $$ = nterm iteration_statement ()
Stack now 0 35 26 47 52 126
Entering state 130
Reducing stack by rule 174 (line 417):
   $1 = nterm iteration_statement ()
-> $$ = nterm statement ()
Stack now 0 35 26 47 52 126
Entering state 123
Reducing stack by rule 184 (line 443):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 35 26 47 52 126
Entering state 221
Reducing stack by rule 182 (line 437):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 35 26 47 52
Entering state 126
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 97
Reading a token: Next token is token EQUALITY ()
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126
Entering state 105
Next token is token EQUALITY ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126
Entering state 106
Next token is token EQUALITY ()
Shifting token EQUALITY ()
Entering state 196
Reducing stack by rule 67 (line 180):
   $1 = token EQUALITY ()
-> $$ = nterm assignment_operator ()
Stack now 0 35 26 47 52 126 106
Entering state 197
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 99
Reducing stack by rule 5 (line 49):
   $1 = token INT_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 106 197
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 105
Reading a token: Next token is token SEMICOLON ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 106
Next token is token SEMICOLON ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 109
Next token is token SEMICOLON ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 110
Next token is token SEMICOLON ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 111
Next token is token SEMICOLON ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 112
Next token is token SEMICOLON ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 113
Next token is token SEMICOLON ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 114
Next token is token SEMICOLON ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 115
Next token is token SEMICOLON ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 116
Next token is token SEMICOLON ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 117
Next token is token SEMICOLON ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 118
Next token is token SEMICOLON ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 106 197
Entering state 266
Reducing stack by rule 66 (line 175):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126
Entering state 121
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 218
Reducing stack by rule 186 (line 450):
   $1 = nterm expression ()
   $2 = token SEMICOLON ()
-> $$ = nterm expression_statement ()
Stack now 0 35 26 47 52 126
Entering state 128
Reducing stack by rule 172 (line 415):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 35 26 47 52 126
Entering state 123
Reducing stack by rule 184 (line 443):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 35 26 47 52 126
Entering state 221
Reducing stack by rule 182 (line 437):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 35 26 47 52
Entering state 126
Reading a token: Next token is token FOR ()
Shifting token FOR ()
Entering state 80
Reading a token: Next token is token LOB ()
Shifting token LOB ()
Entering state 163
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163
Entering state 105
Reading a token: Next token is token EQUALITY ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163
Entering state 106
Next token is token EQUALITY ()
Shifting token EQUALITY ()
Entering state 196
Reducing stack by rule 67 (line 180):
   $1 = token EQUALITY ()
-> $$ = nterm assignment_operator ()
Stack now 0 35 26 47 52 126 80 163 106
Entering state 197
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 99
Reducing stack by rule 5 (line 49):
   $1 = token INT_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 80 163 106 197
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 106 197
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 106 197
Entering state 105
Reading a token: Next token is token SEMICOLON ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 106 197
Entering state 106
Next token is token SEMICOLON ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 106 197
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 106 197
Entering state 109
Next token is token SEMICOLON ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 106 197
Entering state 110
Next token is token SEMICOLON ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 80 163 106 197
Entering state 111
Next token is token SEMICOLON ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 80 163 106 197
Entering state 112
Next token is token SEMICOLON ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 80 163 106 197
Entering state 113
Next token is token SEMICOLON ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 80 163 106 197
Entering state 114
Next token is token SEMICOLON ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 106 197
Entering state 115
Next token is token SEMICOLON ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 106 197
Entering state 116
Next token is token SEMICOLON ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 80 163 106 197
Entering state 117
Next token is token SEMICOLON ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 80 163 106 197
Entering state 118
Next token is token SEMICOLON ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 80 163 106 197
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 80 163 106 197
Entering state 266
Reducing stack by rule 66 (line 175):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 80 163
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126 80 163
Entering state 121
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 218
Reducing stack by rule 186 (line 450):
   $1 = nterm expression ()
   $2 = token SEMICOLON ()
-> $$ = nterm expression_statement ()
Stack now 0 35 26 47 52 126 80 163
Entering state 248
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248
Entering state 105
Reading a token: Next token is token LE_OP ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248
Entering state 106
Next token is token LE_OP ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248
Entering state 109
Next token is token LE_OP ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248
Entering state 110
Next token is token LE_OP ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 80 163 248
Entering state 111
Next token is token LE_OP ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 80 163 248
Entering state 112
Next token is token LE_OP ()
Shifting token LE_OP ()
Entering state 206
Reading a token: Next token is token INT_CONSTANT ()
Shifting token INT_CONSTANT ()
Entering state 99
Reducing stack by rule 5 (line 49):
   $1 = token INT_CONSTANT ()
-> $$ = nterm constant ()
Stack now 0 35 26 47 52 126 80 163 248 112 206
Entering state 104
Reducing stack by rule 2 (line 42):
   $1 = nterm constant ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 112 206
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 112 206
Entering state 105
Reading a token: Next token is token SEMICOLON ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 112 206
Entering state 156
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248 112 206
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248 112 206
Entering state 109
Next token is token SEMICOLON ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248 112 206
Entering state 110
Next token is token SEMICOLON ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 80 163 248 112 206
Entering state 274
Next token is token SEMICOLON ()
Reducing stack by rule 48 (line 125):
   $1 = nterm relational_expression ()
   $2 = token LE_OP ()
   $3 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 80 163 248
Entering state 112
Next token is token SEMICOLON ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 80 163 248
Entering state 113
Next token is token SEMICOLON ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 80 163 248
Entering state 114
Next token is token SEMICOLON ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248
Entering state 115
Next token is token SEMICOLON ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248
Entering state 116
Next token is token SEMICOLON ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 80 163 248
Entering state 117
Next token is token SEMICOLON ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248
Entering state 118
Next token is token SEMICOLON ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 80 163 248
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 80 163 248
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126 80 163 248
Entering state 121
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 218
Reducing stack by rule 186 (line 450):
   $1 = nterm expression ()
   $2 = token SEMICOLON ()
-> $$ = nterm expression_statement ()
Stack now 0 35 26 47 52 126 80 163 248
Entering state 305
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305
Entering state 105
Reading a token: Next token is token INC_OP ()
Shifting token INC_OP ()
Entering state 180
Reducing stack by rule 15 (line 62):
   $1 = nterm postfix_expression ()
   $2 = token INC_OP ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305
Entering state 105
Reading a token: Next token is token ROB ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305
Entering state 106
Next token is token ROB ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305
Entering state 109
Next token is token ROB ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305
Entering state 110
Next token is token ROB ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305
Entering state 111
Next token is token ROB ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305
Entering state 112
Next token is token ROB ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305
Entering state 113
Next token is token ROB ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305
Entering state 114
Next token is token ROB ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305
Entering state 115
Next token is token ROB ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305
Entering state 116
Next token is token ROB ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305
Entering state 117
Next token is token ROB ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305
Entering state 118
Next token is token ROB ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126 80 163 248 305
Entering state 326
Next token is token ROB ()
Shifting token ROB ()
Entering state 338
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 97
Reading a token: Next token is token ADD_ASSIGN ()
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338
Entering state 105
Next token is token ADD_ASSIGN ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338
Entering state 106
Next token is token ADD_ASSIGN ()
Shifting token ADD_ASSIGN ()
Entering state 188
Reducing stack by rule 71 (line 184):
   $1 = token ADD_ASSIGN ()
-> $$ = nterm assignment_operator ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 106
Entering state 197
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 106 197
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 106 197
Entering state 105
Reading a token: Next token is token LSB ()
Shifting token LSB ()
Entering state 184
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 106 197 105 184
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 106 197 105 184
Entering state 105
Reading a token: Next token is token RSB ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 106 197 105 184
Entering state 106
Next token is token RSB ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 106 197 105 184
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 106 197 105 184
Entering state 109
Next token is token RSB ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 106 197 105 184
Entering state 110
Next token is token RSB ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 106 197 105 184
Entering state 111
Next token is token RSB ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 106 197 105 184
Entering state 112
Next token is token RSB ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 106 197 105 184
Entering state 113
Next token is token RSB ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 106 197 105 184
Entering state 114
Next token is token RSB ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 106 197 105 184
Entering state 115
Next token is token RSB ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 106 197 105 184
Entering state 116
Next token is token RSB ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 106 197 105 184
Entering state 117
Next token is token RSB ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 106 197 105 184
Entering state 118
Next token is token RSB ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 106 197 105 184
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 106 197 105 184
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 106 197 105 184
Entering state 262
Next token is token RSB ()
Shifting token RSB ()
Entering state 312
Reducing stack by rule 10 (line 57):
   $1 = nterm postfix_expression ()
   $2 = token LSB ()
   $3 = nterm expression ()
   $4 = token RSB ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 106 197
Entering state 105
Reading a token: Next token is token LSB ()
Shifting token LSB ()
Entering state 184
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 106 197 105 184
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 106 197 105 184
Entering state 105
Reading a token: Next token is token RSB ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 106 197 105 184
Entering state 106
Next token is token RSB ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 106 197 105 184
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 106 197 105 184
Entering state 109
Next token is token RSB ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 106 197 105 184
Entering state 110
Next token is token RSB ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 106 197 105 184
Entering state 111
Next token is token RSB ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 106 197 105 184
Entering state 112
Next token is token RSB ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 106 197 105 184
Entering state 113
Next token is token RSB ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 106 197 105 184
Entering state 114
Next token is token RSB ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 106 197 105 184
Entering state 115
Next token is token RSB ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 106 197 105 184
Entering state 116
Next token is token RSB ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 106 197 105 184
Entering state 117
Next token is token RSB ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 106 197 105 184
Entering state 118
Next token is token RSB ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 106 197 105 184
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 106 197 105 184
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 106 197 105 184
Entering state 262
Next token is token RSB ()
Shifting token RSB ()
Entering state 312
Reducing stack by rule 10 (line 57):
   $1 = nterm postfix_expression ()
   $2 = token LSB ()
   $3 = nterm expression ()
   $4 = token RSB ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 106 197
Entering state 105
Reading a token: Next token is token SEMICOLON ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 106 197
Entering state 106
Next token is token SEMICOLON ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 106 197
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 106 197
Entering state 109
Next token is token SEMICOLON ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 106 197
Entering state 110
Next token is token SEMICOLON ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 106 197
Entering state 111
Next token is token SEMICOLON ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 106 197
Entering state 112
Next token is token SEMICOLON ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 106 197
Entering state 113
Next token is token SEMICOLON ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 106 197
Entering state 114
Next token is token SEMICOLON ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 106 197
Entering state 115
Next token is token SEMICOLON ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 106 197
Entering state 116
Next token is token SEMICOLON ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 106 197
Entering state 117
Next token is token SEMICOLON ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 106 197
Entering state 118
Next token is token SEMICOLON ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 106 197
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338 106 197
Entering state 266
Reducing stack by rule 66 (line 175):
   $1 = nterm unary_expression ()
   $2 = nterm assignment_operator ()
   $3 = nterm assignment_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338
Entering state 121
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 218
Reducing stack by rule 186 (line 450):
   $1 = nterm expression ()
   $2 = token SEMICOLON ()
-> $$ = nterm expression_statement ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338
Entering state 128
Reducing stack by rule 172 (line 415):
   $1 = nterm expression_statement ()
-> $$ = nterm statement ()
Stack now 0 35 26 47 52 126 80 163 248 305 326 338
Entering state 344
Reducing stack by rule 192 (line 464):
   $1 = token FOR ()
   $2 = token LOB ()
   $3 = nterm expression_statement ()
   $4 = nterm expression_statement ()
   $5 = nterm expression ()
   $6 = token ROB ()
   $7 = nterm statement ()
-> $$ = nterm iteration_statement ()
Stack now 0 35 26 47 52 126
Entering state 130
Reducing stack by rule 174 (line 417):
   $1 = nterm iteration_statement ()
-> $$ = nterm statement ()
Stack now 0 35 26 47 52 126
Entering state 123
Reducing stack by rule 184 (line 443):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 35 26 47 52 126
Entering state 221
Reducing stack by rule 182 (line 437):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 35 26 47 52
Entering state 126
Reading a token: Next token is token RETURN ()
Shifting token RETURN ()
Entering state 85
Reading a token: Next token is token IDENTIFIER ()
Shifting token IDENTIFIER ()
Entering state 151
Reducing stack by rule 1 (line 41):
   $1 = token IDENTIFIER ()
-> $$ = nterm primary_expression ()
Stack now 0 35 26 47 52 126 85
Entering state 103
Reducing stack by rule 9 (line 56):
   $1 = nterm primary_expression ()
-> $$ = nterm postfix_expression ()
Stack now 0 35 26 47 52 126 85
Entering state 105
Reading a token: Next token is token SEMICOLON ()
Reducing stack by rule 21 (line 76):
   $1 = nterm postfix_expression ()
-> $$ = nterm unary_expression ()
Stack now 0 35 26 47 52 126 85
Entering state 106
Next token is token SEMICOLON ()
Reducing stack by rule 33 (line 94):
   $1 = nterm unary_expression ()
-> $$ = nterm cast_expression ()
Stack now 0 35 26 47 52 126 85
Entering state 108
Reducing stack by rule 35 (line 100):
   $1 = nterm cast_expression ()
-> $$ = nterm multiplicative_expression ()
Stack now 0 35 26 47 52 126 85
Entering state 109
Next token is token SEMICOLON ()
Reducing stack by rule 39 (line 108):
   $1 = nterm multiplicative_expression ()
-> $$ = nterm additive_expression ()
Stack now 0 35 26 47 52 126 85
Entering state 110
Next token is token SEMICOLON ()
Reducing stack by rule 42 (line 115):
   $1 = nterm additive_expression ()
-> $$ = nterm shift_expression ()
Stack now 0 35 26 47 52 126 85
Entering state 111
Next token is token SEMICOLON ()
Reducing stack by rule 45 (line 122):
   $1 = nterm shift_expression ()
-> $$ = nterm relational_expression ()
Stack now 0 35 26 47 52 126 85
Entering state 112
Next token is token SEMICOLON ()
Reducing stack by rule 50 (line 131):
   $1 = nterm relational_expression ()
-> $$ = nterm equality_expression ()
Stack now 0 35 26 47 52 126 85
Entering state 113
Next token is token SEMICOLON ()
Reducing stack by rule 53 (line 138):
   $1 = nterm equality_expression ()
-> $$ = nterm and_expression ()
Stack now 0 35 26 47 52 126 85
Entering state 114
Next token is token SEMICOLON ()
Reducing stack by rule 55 (line 144):
   $1 = nterm and_expression ()
-> $$ = nterm exclusive_or_expression ()
Stack now 0 35 26 47 52 126 85
Entering state 115
Next token is token SEMICOLON ()
Reducing stack by rule 57 (line 150):
   $1 = nterm exclusive_or_expression ()
-> $$ = nterm inclusive_or_expression ()
Stack now 0 35 26 47 52 126 85
Entering state 116
Next token is token SEMICOLON ()
Reducing stack by rule 59 (line 156):
   $1 = nterm inclusive_or_expression ()
-> $$ = nterm logical_and_expression ()
Stack now 0 35 26 47 52 126 85
Entering state 117
Next token is token SEMICOLON ()
Reducing stack by rule 61 (line 162):
   $1 = nterm logical_and_expression ()
-> $$ = nterm logical_or_expression ()
Stack now 0 35 26 47 52 126 85
Entering state 118
Next token is token SEMICOLON ()
Reducing stack by rule 63 (line 168):
   $1 = nterm logical_or_expression ()
-> $$ = nterm conditional_expression ()
Stack now 0 35 26 47 52 126 85
Entering state 119
Reducing stack by rule 65 (line 174):
   $1 = nterm conditional_expression ()
-> $$ = nterm assignment_expression ()
Stack now 0 35 26 47 52 126 85
Entering state 120
Reducing stack by rule 78 (line 195):
   $1 = nterm assignment_expression ()
-> $$ = nterm expression ()
Stack now 0 35 26 47 52 126 85
Entering state 170
Next token is token SEMICOLON ()
Shifting token SEMICOLON ()
Entering state 253
Reducing stack by rule 200 (line 478):
   $1 = token RETURN ()
   $2 = nterm expression ()
   $3 = token SEMICOLON ()
-> $$ = nterm jump_statement ()
Stack now 0 35 26 47 52 126
Entering state 131
Reducing stack by rule 175 (line 418):
   $1 = nterm jump_statement ()
-> $$ = nterm statement ()
Stack now 0 35 26 47 52 126
Entering state 123
Reducing stack by rule 184 (line 443):
   $1 = nterm statement ()
-> $$ = nterm block_item ()
Stack now 0 35 26 47 52 126
Entering state 221
Reducing stack by rule 182 (line 437):
   $1 = nterm block_item_list ()
   $2 = nterm block_item ()
-> $$ = nterm block_item_list ()
Stack now 0 35 26 47 52
Entering state 126
Reading a token: Next token is token RCB ()
Shifting token RCB ()
Entering state 220
Reducing stack by rule 180 (line 431):
   $1 = token LCB ()
   $2 = nterm block_item_list ()
   $3 = token RCB ()
-> $$ = nterm compound_statement ()
Stack now 0 35 26 47
Entering state 72
Reducing stack by rule 206 (line 496):
   $1 = nterm declaration_specifiers ()
   $2 = nterm declarator ()
   $3 = nterm compound_statement ()
-> $$ = nterm function_definition ()
Stack now 0 35
Entering state 37
Reducing stack by rule 203 (line 489):
   $1 = nterm function_definition ()
-> $$ = nterm external_declaration ()
Stack now 0 35
Entering state 61
Reducing stack by rule 202 (line 484):
   $1 = nterm translation_unit ()
   $2 = nterm external_declaration ()
-> $$ = nterm translation_unit ()
Stack now 0
Entering state 35
Reading a token: Now at end of input.
Shifting token $end ()
Entering state 60
Stack now 0 35 60
Cleanup: popping token $end ()
Cleanup: popping nterm translation_unit ()
